<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DataTemplates_k.xaml"/>
        <ResourceDictionary Source="CharacterSheetTemplates.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <BitmapImage x:Key="InventorySlotsTileImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/invSlot.png"/>

    <ImageSource x:Key="SavingThrowDice">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/mainStats_ability_single.png</ImageSource>
    <ImageSource x:Key="NoResistanceIcon">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/resistance_none_bg.png</ImageSource>

    <System:Double x:Key="ExaminePanelWidth">1720</System:Double>

    <System:Double x:Key="CSDollHeight">1380</System:Double>
    <System:Double x:Key="CSDollWidth">1400</System:Double>
    <System:Double x:Key="EXDollWidth">1050</System:Double>
    
    <System:Double x:Key="CornerRadius">20</System:Double>

    <System:Double x:Key="CSContentHeight">1340</System:Double>
    <System:Double x:Key="CSColumnWidth">648</System:Double>

    <Thickness x:Key="CSInfoMargin">52,52,52,24</Thickness>
    <Thickness x:Key="ScrollOffset">0,0,-38,0</Thickness>

    <System:Double x:Key="CSSlotSize">88</System:Double>


    <SolidColorBrush x:Key="InventoryBGShade" Color="#70444444"/>
    <SolidColorBrush x:Key="ContentBGShade" Color="#21000000"/>
    
    <LinearGradientBrush x:Key="InventoryBGShadeFilter" StartPoint="0, 0" EndPoint="1, 1">
        <GradientStop Color="#99441444" Offset="0"/>
        <GradientStop Color="#66441444" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="InventoryBGShadeFilterBorder" Color="#CC441444"/>

    <!--ROW STYLES-->
    <Style x:Key="RowBG_d" TargetType="Border">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CornerRadius" Value="12,12,12,12"/>
    </Style>
    <SolidColorBrush x:Key="RowBG_h" Opacity="0.4" Color="{StaticResource accent75Color}"/>

    <Style x:Key="ListSectionBackground" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource ContentBGShade}"/>
        <Setter Property="CornerRadius" Value="12"/>
    </Style>

    <Style x:Key="DetailedListText" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
    </Style>

    <Style x:Key="DetailedListValue" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
    </Style>

    <Style x:Key="SummaryListText" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="8,0"/>
    </Style>

    <Style x:Key="SummaryRoundIcons" TargetType="Rectangle">
        <Setter Property="Width" Value="48"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="RadiusX" Value="24"/>
        <Setter Property="RadiusY" Value="24"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="SkillTextStyle" TargetType="TextBlock" BasedOn="{StaticResource DetailedListText}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Margin" Value="8,0,0,0"/>
    </Style>

    <Style x:Key="StatsNameStyle" TargetType="Control">
        <Setter Property="FontSize" Value="{StaticResource ScaledSmallFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Margin" Value="8,0,0,0"/>
    </Style>

    <Style x:Key="SkillTitleTextStyle" TargetType="TextBlock" BasedOn="{StaticResource DetailedListValue}">
        <Setter Property="ToolTipService.Placement" Value="Right"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="DockPanel.Dock" Value="Right"/>
        <Setter Property="Margin" Value="0,0,8,0"/>
    </Style>



    <!--NO RESULTS TEMPLATE-->
    <ControlTemplate x:Key="NoResultsFoundTemplate" TargetType="Control">
        <Grid>
            <Image Source="/GustavNoesisGUI;component/Assets/CharacterPanel/invSlot_message_bg.png" Stretch="None" HorizontalAlignment="Center"/>
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource LS_extraspecialTxtColor}" FontSize="{StaticResource SmallFontSize}" ls:TextBlockFormatter.SourceText="{Binding Source='h7f09be65g3d97g45dfg87f1gb70869a7ae24', Converter={StaticResource TranslatedStringConverter}}"/>
        </Grid>
    </ControlTemplate>


    <!-- ===== USED IN TRADE  ===== -->
    <System:Double x:Key="NewSlotSize">88</System:Double>
    <System:Double x:Key="NewIconSlotSize">80</System:Double>

    <!-- Icons -->
    <BitmapImage x:Key="PrimaryAbilityIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SheetGeneral/ico_star.png" />
    <BitmapImage x:Key="BulletPointIconEmpty" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SheetGeneral/ico_bullet_empty.png" />
    <BitmapImage x:Key="BulletPointIconFilled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SheetGeneral/ico_bullet.png" />

    <BitmapImage  x:Key="ActiveSlot_h_img" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/activeSlot_overlay_h_selected.png" />

    <Style x:Key="EquipmentSlotStyle" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">

                    <ls:LSButton IsEnabled="{Binding IsEnabled}"
                        Command="{Binding DataContext.ShowAvailableEquipmentCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                        CommandParameter="{Binding}" >

                        <ls:LSButton.Template>
                            <ControlTemplate TargetType="ls:LSButton">

                                <Grid x:Name="root" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Grid Width="{DynamicResource InvSlotSize}" Height="{DynamicResource InvSlotSize}" ToolTipService.IsEnabled="{Binding Item,Converter={StaticResource NullToBoolFalseConverter}}"  ToolTipService.Placement="Right" >
                                        <Grid.ToolTip>
                                            <ls:LSTooltip IsHitTestVisible="False" Content="{Binding Path=DataContext.Item,ElementName=root}" />

                                        </Grid.ToolTip>
                                        <Control Style="{StaticResource EquipmentSlotTemplateStyle}"/>

                                        <!-- Highlight slot when hovered -->
                                        <Rectangle x:Name="hoverImg" IsHitTestVisible="False" Fill="{x:Null}" Width="{DynamicResource InvSlotSize}" Height="{DynamicResource InvSlotSize}"/>

                                        <!-- New item indication -->
                                        <Control Style="{StaticResource NewInventoryCellItemStyle}"  />

                                        <Image x:Name="disabledCover" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/nonActiveSlot_indicator.png" 
                                       Visibility="{Binding IsEnabled , Converter={StaticResource BoolToCollapsedConverter}}"
                                       RenderTransformOrigin="0.5, 0.5" ToolTipService.Placement="Mouse">
                                            <Image.ToolTip>
                                                <ls:LSTooltip Content="{Binding Source='hcc92420fgadcfg4a13g90feg6996722734b6',Converter={StaticResource TranslatedStringConverter}}">
                                                </ls:LSTooltip>
                                            </Image.ToolTip>
                                        </Image>
                                        <Rectangle Fill="{StaticResource LS_DisabledSlotColor}" Visibility="{Binding IsEnabled , Converter={StaticResource BoolToHiddenConverter}}" IsHitTestVisible="False"/>
                                    </Grid>

                                    <!-- Selected slot indicator -->
                                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/activeSlot_overlay_d_selected.png" Visibility="{Binding IsSelecting , Converter={StaticResource BoolToVisibleConverter}}" Stretch="Uniform" Width="104" IsHitTestVisible="False"/>
                                </Grid>
                                <ControlTemplate.Triggers>

                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="hoverImg" Property="Fill">
                                            <Setter.Value>
                                                <ImageBrush ImageSource="{StaticResource ActiveSlot_h_img}" Stretch="Uniform"/>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ls:LSButton.Template>
                        <b:Interaction.Behaviors>
                            <ls:DragGenericBehavior StartDragCommand="{Binding DataContext.DragEquipmentSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <ls:DropOnGenericBehavior DropCommand="{Binding DataContext.DropEquipmentSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:Interaction.Behaviors>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseEnter">
                                <b:InvokeCommandAction IsEnabled="{Binding IsNew}" Command="{Binding DataContext.UpdateEquipmentSlotNewFlagCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSButton>

                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="Panel.ZIndex" Value="0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelecting}" Value="True">
                <Setter Property="Panel.ZIndex" Value="1"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="EquipmentSlotVisibilityStyle" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Control Style="{StaticResource EquipmentSlotStyle}"/>
                        <ls:LSButton x:Name="VisibilityButton" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,-6,-6"
                                     Command="{Binding DataContext.ChangeEquipmentVisibilityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                     CommandParameter="{Binding}">
                            <ls:LSButton.Template>
                                <ControlTemplate TargetType="ls:LSButton">
                                    <Grid>
                                        <Image x:Name="frame" HorizontalAlignment="Left" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_d_active.png" Stretch="None"/>
                                        <Image x:Name="icon" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{DynamicResource IconNormal}" Stretch="None">
                                            <!-- Default is hidden-->
                                            <Image.Style>
                                                <Style TargetType="Image">
                                                    <Style.Resources>
                                                        <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_d.png</ImageSource>
                                                        <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                                        <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                                    </Style.Resources>
                                                </Style>
                                            </Image.Style>
                                        </Image>
                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding VisibilityType}" Value="Visible">
                                            <Setter Property="Style" TargetName="icon">
                                                <Setter.Value>
                                                    <Style TargetType="Image">
                                                        <Style.Resources>
                                                            <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_d.png</ImageSource>
                                                            <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_h.png</ImageSource>
                                                            <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_h.png</ImageSource>
                                                        </Style.Resources>
                                                    </Style>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding VisibilityType}" Value="CinematicsHidden">
                                            <Setter Property="Style" TargetName="icon">
                                                <Setter.Value>
                                                    <Style TargetType="Image">
                                                        <Style.Resources>
                                                            <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_d.png</ImageSource>
                                                            <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_h.png</ImageSource>
                                                            <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_h.png</ImageSource>
                                                        </Style.Resources>
                                                    </Style>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding VisibilityType}" Value="Hidden">
                                            <Setter Property="Style" TargetName="icon">
                                                <Setter.Value>
                                                    <Style TargetType="Image">
                                                        <Style.Resources>
                                                            <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_d.png</ImageSource>
                                                            <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                                            <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                                        </Style.Resources>
                                                    </Style>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>

                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                                            <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
                                        </Trigger>

                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                                            <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ls:LSButton.Template>
                            <ls:LSButton.ToolTip>
                                <ls:LSTooltip Content="{Binding Source='h90154bd4g08b9g46efg8e70gbce5d5a99e1a',Converter={StaticResource TranslatedStringConverter}}" x:Name="TooltipContent"/>
                            </ls:LSButton.ToolTip>
                        </ls:LSButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding VisibilityType}" Value="CinematicsHidden">
                            <Setter Property="Content" TargetName="TooltipContent" Value="{Binding Source='h57dce093g8d4ag43b4gb7a3g525250a499c1',Converter={StaticResource TranslatedStringConverter}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding VisibilityType}" Value="Hidden">
                            <Setter Property="Content" TargetName="TooltipContent" Value="{Binding Source='h5bd7b04cg842eg4892ga9b7ga421ad707517',Converter={StaticResource TranslatedStringConverter}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Panel.ZIndex" Value="0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelecting}" Value="True">
                <Setter Property="Panel.ZIndex" Value="1"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    
    <!-- General -->
    <ControlTemplate x:Key="NameAndDescriptionTemplate">
        <StackPanel>
            <TextBlock Text="{Binding Name}" Foreground="{StaticResource LS_PrimaryColor}" HorizontalAlignment="Center"/>

            <TextBlock Foreground="{StaticResource LS_ActivePanelFontColor}" Margin="8,0,0,0" HorizontalAlignment="Center">
                <TextBlock.Text>
                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                        <Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
                        <Binding Path="DataContext.Stats.Level.Value" RelativeSource="{RelativeSource Mode=Self}"/>
                        <Binding Path="DataContext.Stats.ClassList" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource ListConcatenationConverter}" ConverterParameter="h2519408dg5fd7g4cbcg840cg14370239edf8"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </StackPanel>
    </ControlTemplate>

    <Style x:Key="ModifierTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_ActivePanelFontColor}"/>
    </Style>
    
    <DataTemplate x:Key="ModifierTemplate">
        <Grid ToolTipService.Placement="Right" ToolTip="{StaticResource ManagedTooltip}">
            <Image x:Name="BgImg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/frame_EQstat.png" Stretch="None"/>
            <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Margin="60,0,0,0" Text="{Binding Name}" Style="{DynamicResource ModifierTextStyle}"/>
            <TextBlock x:Name="ValueTxt" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,2,60,-2" Text="{Binding Value}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{DynamicResource ScaledDefaultFontSize}"/>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BgImg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/selector_EQstat.png"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="modifier">
                <Setter TargetName="ValueTxt" Property="Text" Value="{Binding Value, StringFormat={}{0:+#;-#;+0}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!-- Shared set of framing elements for various screens, e.g. Inventory, PartyCharacterSheet, CharacterOverview -->
    <ControlTemplate x:Key="StandardFraming" TargetType="ContentControl">
        <!-- Outer full screen grid adding black borders left and right if in non 16:9 ratio -->
        <ContentControl Template="{StaticResource StdFrameContentTemplate}" Background="{DynamicResource LS_PanelBackground}">
            <Grid x:Name="ContentFrame">
                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/mainpane_vignette.png" Stretch="Fill"/>
                <!-- Close button -->
                <ls:LSButton Style="{DynamicResource CloseButton}" Command="{Binding CustomEvent}" CommandParameter="CloseWidget" HorizontalAlignment="Right" VerticalAlignment="Top" SoundID="UI_HUD_Panel_Close" />
                <!-- Inspiration Points and Party Gold -->
                <Control Template="{DynamicResource HeaderInspirationPointsGold}" VerticalAlignment="Top" HorizontalAlignment="Right" DataContext="{Binding CurrentPlayer}" Margin="0,24,120,0"/>
                <ContentPresenter/>
            </Grid>
        </ContentControl>

    </ControlTemplate>
    <ControlTemplate x:Key="MeleeDamageDisplay">
        <Grid>
            <Image x:Name="type" Stretch="None" VerticalAlignment="Top" Margin="0,24,0,0" DataContext="{Binding Stats}">
                <Image.Style>
                    <Style TargetType="Image">
                        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_slashing.png"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Piercing">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_piercing.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Bludgeoning">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_blunt.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Acid">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_acid.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Thunder">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_thunder.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Necrotic">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_necrotic.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Fire">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_fire.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Lightning">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_lightning.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Cold">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_cold.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Physics">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_psychic.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Poison">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_poison.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Radiant">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_radiant.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MeleeAttackDamageType}" Value="Force">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_force.png"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
            <TextBlock x:Name="roll" Text="{Binding Stats.MeleeAttackDamageRoll}" FontSize="{StaticResource LargeFontSize}" Foreground="{StaticResource LS_PrimaryColor}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,80,0,0"/>
            <TextBlock x:Name="deltaSign" Visibility="Hidden" Text="{Binding Stats.StatsCompare.MeleeAttackDamageChange, StringFormat={}{0:+ve;-ve;0}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=deltaSign, Path=Text}" Value="+ve">
                <Setter TargetName="type" Property="DataContext" Value="{Binding Stats.StatsCompare}"/>
                <Setter TargetName="roll" Property="Text" Value="{Binding Stats.StatsCompare.MeleeAttackDamageRoll}"/>
                <Setter TargetName="roll" Property="Foreground" Value="{StaticResource LS_PositiveDeltaColor}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=deltaSign, Path=Text}" Value="-ve">
                <Setter TargetName="type" Property="DataContext" Value="{Binding Stats.StatsCompare}"/>
                <Setter TargetName="roll" Property="Text" Value="{Binding Stats.StatsCompare.MeleeAttackDamageRoll}"/>
                <Setter TargetName="roll" Property="Foreground" Value="{StaticResource LS_NegativeDeltaColor}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="RangedDamageDisplay">
        <Grid>
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_ranged.png"  Stretch="None" VerticalAlignment="Top" Margin="0,24,0,0"/>
            <TextBlock x:Name="roll" Text="{Binding Stats.RangedAttackDamageRoll}" FontSize="{StaticResource LargeFontSize}" Foreground="{StaticResource LS_PrimaryColor}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,80,0,0"/>
            <TextBlock x:Name="deltaSign" Visibility="Hidden" Text="{Binding Stats.StatsCompare.RangedAttackDamageChange, StringFormat={}{0:+ve;-ve;0}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=deltaSign, Path=Text}" Value="+ve">
                <Setter TargetName="roll" Property="Text" Value="{Binding Stats.StatsCompare.RangedAttackDamageRoll}"/>
                <Setter TargetName="roll" Property="Foreground" Value="{StaticResource LS_PositiveDeltaColor}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=deltaSign, Path=Text}" Value="-ve">
                <Setter TargetName="roll" Property="Text" Value="{Binding Stats.StatsCompare.RangedAttackDamageRoll}"/>
                <Setter TargetName="roll" Property="Foreground" Value="{StaticResource LS_NegativeDeltaColor}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ArmorClassDisplay">
        <Grid>
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_AC.png" Stretch="None" VerticalAlignment="Top" Margin="0,24,0,0"/>
            <TextBlock x:Name="ac" Text="{Binding Stats.ArmorClass.Value}" Foreground="{StaticResource LS_PrimaryColor}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,80,0,0"/>
            <TextBlock x:Name="deltaSign" Visibility="Hidden" Text="{Binding Stats.StatsCompare.ArmorClassChange, StringFormat={}{0:+ve;-ve;0}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=deltaSign, Path=Text}" Value="+ve">
                <Setter TargetName="ac" Property="Text" Value="{Binding Stats.StatsCompare.ArmorClass}"/>
                <Setter TargetName="ac" Property="Foreground" Value="{StaticResource LS_PositiveDeltaColor}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=deltaSign, Path=Text}" Value="-ve">
                <Setter TargetName="ac" Property="Text" Value="{Binding Stats.StatsCompare.ArmorClass}"/>
                <Setter TargetName="ac" Property="Foreground" Value="{StaticResource LS_NegativeDeltaColor}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--===== REACTIONS TEMPLATE =====-->
    <ControlTemplate x:Key="InterruptPanelTemplate" TargetType="Control">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="QuestionMarkIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions_c/c_ico_reactionAsk_active.png"/>
        </ControlTemplate.Resources>
        <Grid x:Name="Interrupts">
            <Grid.IsEnabled>
                <MultiBinding Converter="{StaticResource EqualConverter}">
                    <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                    <Binding Path="OwnerUserID"/>
                </MultiBinding>
            </Grid.IsEnabled>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" HorizontalAlignment="Center" x:Name="Description" Text="{Binding Source=h4683b44fg5f66g4001gbc80gbcb307102d8d,Converter={StaticResource TranslatedStringConverter}}" TextAlignment="Center" TextWrapping="Wrap" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_accent100TxtColor}" Margin="440,24"/>

            <TextBlock Grid.Row="1" x:Name="NoReactionsMsg" Foreground="{StaticResource LS_baseTxtColor}" TextWrapping="Wrap" MaxWidth="600" IsHitTestVisible="False" HorizontalAlignment="Center" TextAlignment="Center" FontStyle="Italic" Visibility="Collapsed" Margin="20,368,40,20" noesis:Text.StrokeThickness="6">
                <noesis:Text.Stroke>
                    <SolidColorBrush Color="{DynamicResource TextOutlineColor}" />
                </noesis:Text.Stroke>
                <TextBlock.Text>
                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}" ConverterParameter="he8acd09ag2560g47f2gbbb2g29d01baa3cb9">
                        <Binding Path="Name" />
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
            
            <Grid Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,0,0,22">
                <Rectangle x:Name="DecorativeStroke" Width="{Binding ActualWidth, ElementName=ListSectionBackground}" Height="{Binding ActualHeight, ElementName=ListSectionBackground}" StrokeDashArray="5,3" StrokeThickness="2" Stroke="{StaticResource LS_PanelBorder}" RadiusX="{StaticResource CornerRadius}" RadiusY="{StaticResource CornerRadius}" Fill="{StaticResource ContentBGShade}"/>

                <ScrollViewer Template="{StaticResource NoForcedStyleScrollViewerTemplate}" Padding="{StaticResource ScrollOffset}" HorizontalAlignment="Left" Margin="30">
                    <ItemsControl x:Name="InterruptList" ItemsSource="{Binding Interrupts}" HorizontalAlignment="Left">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="ls:VMInterrupt">
                                <DataTemplate.Resources>
                                    <BitmapImage x:Key="ReactionCheckBoxBGImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkbox_d.png"/>
                                </DataTemplate.Resources>
                                <Grid>
                                    <ls:LSToggleButton x:Name="ToggleEnableButton" IsChecked="{Binding Enabled, Mode=OneWay}" Command="{Binding DataContext.InterruptToggleDisableCommand,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" CommandParameter="{Binding .}" Template="{StaticResource InterruptToggleBtnTemplate}" Content ="{Binding .}" IsEnabled="{Binding Available}"/>

                                    <ls:LSToggleButton x:Name="ToggleManagementButton" IsChecked="{Binding Ask, Mode=OneWay}" Command="{Binding DataContext.InterruptChangeAskCommand,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" CommandParameter="{Binding .}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,10,4">

                                        <ls:LSToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <StackPanel Orientation="Horizontal" Background="Transparent">
                                                    <StackPanel.ToolTip>
                                                        <ls:LSTooltip IsHitTestVisible="False">
                                                            <TextBlock  Text="{Binding Source='h4353cf8eg6bb3g46f5g92eage382a75f4338', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                                        </ls:LSTooltip>
                                                    </StackPanel.ToolTip>
                                                    <TextBlock x:Name="State" Text="{Binding Source=h0b717014gd250g44ccg9653g68b111f2fefb,Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_baseTxtColor}" VerticalAlignment="Center"/>
                                                    <Image Source="{StaticResource QuestionMarkIcon}" Stretch="Uniform" Margin="4,0,0,0" Height="36"/>
                                                    <Grid VerticalAlignment="Center">
                                                        <Image x:Name="bg" Source="{StaticResource ReactionCheckBoxBGImg}" Stretch="None"/>
                                                        <Image x:Name="CheckImg" Source="{StaticResource ReactionCheckImg}" Stretch="None" Visibility="Hidden" Margin="0,0,0,6"/>
                                                    </Grid>
                                                </StackPanel>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkbox_h.png"/>
                                                        <Setter TargetName="CheckImg" Property="Source" Value="{StaticResource ReactionCheckImgH}"/>
                                                        <Setter TargetName="State" Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="CheckImg" Property="Visibility" Value="Visible"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkbox_disabled.png"/>
                                                        <Setter TargetName="CheckImg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_disabled.png"/>
                                                        <Setter TargetName="State" Property="Foreground" Value="{StaticResource LS_accent00TxtColor}"/>
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding Enabled}" Value="False">
                                                        <Setter TargetName="State" Property="Foreground" Value="{StaticResource LS_accent25TxtColor}"/>
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </ls:LSToggleButton.Template>
                                    </ls:LSToggleButton>
                                </Grid>
                            </DataTemplate>

                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
            </Grid>

            <b:Interaction.Triggers>
                <b:DataTrigger Binding="{Binding IsVisible, ElementName=Interrupts}" Value="True">
                    <!-- Tutorial UI Event - Reactions Opened-->
                    <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="266efe77-4587-4b3f-9217-605923add7c5"/>
                </b:DataTrigger>
            </b:Interaction.Triggers>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Interrupts.Count}" Value="0">
                <Setter TargetName="NoReactionsMsg" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel">
                <Setter TargetName="Description" Property="Margin" Value="24"/>
                <Setter TargetName="DecorativeStroke" Property="Visibility" Value="Collapsed"/>

            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--INVENTORY FILTER TEMPLATE-->
    <!-- DataContext: VMCharacter or null | Tag: inventory or inventories to filter -->
    <ControlTemplate x:Key="FilterHolderTemplate" TargetType="ls:FilteringContainer">
        <StackPanel d:DataContext="{d:DesignInstance {x:Type ls:Character}, IsDesignTimeCreatable=True}">
            <Grid>
                <TextBlock x:Name="CategoryName" Visibility="Collapsed" Text="{Binding Source=hda234862gff1ag4acdgbc37gef3abaabd610, Converter={StaticResource TranslatedStringConverter}}"/>
                <TextBlock x:Name="AdditionalFilters" Visibility="Collapsed" Text=""/>
                <TextBlock x:Name="CurrentItemFilteredName" Visibility="Collapsed" Text="{Binding CurrentFilter.Item.Name, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <TextBlock x:Name="CurrentFilterName" Visibility="Collapsed" Text="{Binding CurrentFilter.Name, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/frame_filters.png" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_search.png" Margin="12,16,0,0" Stretch="None" VerticalAlignment="Top" HorizontalAlignment="Left"/>


                <ls:LSTextBox x:Name="PART_FilterSearchBox" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="60,12,0,0" Height="56" Width="400" TextAlignment="Left" FontSize="{DynamicResource ScaledMediumFontSize}" TextWrapping="NoWrap">
                    <noesis:Text.Placeholder>
                        <MultiBinding StringFormat="{}{0}{1}{2} {3}">
                            <Binding Path="Text" ElementName="CategoryName"/>
                            <Binding Path="Text" ElementName="CurrentItemFilteredName"/>
                            <Binding Path="Text" ElementName="CurrentFilterName"/>
                            <Binding Path="Text" ElementName="AdditionalFilters"/>
                        </MultiBinding>
                    </noesis:Text.Placeholder>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseEnter">
                            <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="PreviewMouseDown">
                            <ls:LSPlaySound Sound="UI_Shared_Press"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSTextBox>

                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/frame_filters_EQ.png" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding IsFocused, ElementName=PART_FilterSearchBox, Converter={StaticResource BoolToVisibleConverter}}" IsHitTestVisible="False"/>

                <ls:LSButton x:Name="ClearFilter" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,16,32,0" BoundEvent="UICancel" Command="ls:FilteringContainer.ClearFilterCommand">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Grid x:Name="BtnHolder">
                                <Image x:Name="bg" Source="{StaticResource BtnSmallRound}" Stretch="None"/>
                                <Image x:Name="icon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel.png" Stretch="None"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </ls:LSButton>
            </Grid>

            <Popup IsOpen="{TemplateBinding IsPopupVisible}">
                <ls:LSNineSliceImage x:Name="PopularFiltersHolder" Margin="0,-12,0,0"  HorizontalAlignment="Stretch" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/sorting_bg.png" Slices="60" Padding="10,40">
                    <StackPanel>
                        <TextBlock Foreground="{StaticResource LS_accent25TxtColor}" FontSize="{StaticResource SmallishFontSize}" Text="{Binding Source='hc0ed9c5ag8a2cg4167g8242g5076d73d695f',Converter={StaticResource TranslatedStringConverter}}" Margin="20,0" VerticalAlignment="Top"/>

                        <ListBox x:Name="FilterListHolder" ItemsSource="{TemplateBinding SuggestedFiltersList}" SelectedItem="{Binding CurrentFilterInternal,RelativeSource={RelativeSource TemplatedParent}}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="20,0,0,0" VerticalAlignment="Top">
                            <ListBox.Resources>
                                <DataTemplate DataType="{x:Type ls:VMEnumFilter}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Image Grid.Column="0" Grid.ColumnSpan="2" x:Name="BtnBorder" Stretch="None" Source="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_d.png"/>
                                        <Image Grid.Column="0" Stretch="None" Source="/GustavNoesisGUI;component/Assets/CharacterPanel/ico_filter.png" VerticalAlignment="Center" Margin="4,0,16,0"/>
                                        <TextBlock Grid.Column="1" x:Name="BtnText" Text="{Binding }" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Width="400"/>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="BtnBorder" Property="Source" Value="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_h.png"/>
                                            <Setter TargetName="BtnText" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                        </Trigger>

                                        <DataTrigger Binding="{Binding Enum, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                                            <Setter TargetName="BtnText" Property="Text" Value="{Binding Name}"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>

                                <DataTemplate DataType="{x:Type ls:VMInventorySlot}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Image Grid.Column="0" Grid.ColumnSpan="2" x:Name="BtnBorder" Stretch="None" Source="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_d.png"/>
                                        <Rectangle Grid.Column="0" Height="28" Width="28" Fill="{Binding Object.Icon}" VerticalAlignment="Center" Margin="4,0,16,0"/>
                                        <TextBlock Grid.Column="1" x:Name="BtnText" Text="{Binding Object.Name}" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Width="400"/>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="BtnBorder" Property="Source" Value="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_h.png"/>
                                            <Setter TargetName="BtnText" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                        </Trigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.Resources>

                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>
                    </StackPanel>
                </ls:LSNineSliceImage>
            </Popup>
        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CurrentFilter, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="False">
                <Setter TargetName="CategoryName" Property="Text" Value=""/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentFilter.AdditionalBoolProperty, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="AdditionalFilters" Property="Text" Value="{Binding Source='h038b1421g2efeg4283g9b88gcdd3b6e46f80',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsChecked, ElementName=ChangePartyContextButton}" Value="True">
                <Setter TargetName="AdditionalFilters" Property="Text" Value="{Binding Source='h582dd86fgb0f8g497dg963ag203dad565aef',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsChecked, ElementName=ChangePartyContextButton}" Value="True"/>
                    <Condition Binding="{Binding CurrentFilter.AdditionalBoolProperty, RelativeSource={RelativeSource Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="AdditionalFilters" Property="Text" Value="{Binding Source='h5626aa7cgbedfg4432gb542g164b65efccb2',Converter={StaticResource TranslatedStringConverter}}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding IsFocused, ElementName=PART_FilterSearchBox}" Value="True">
                <Setter TargetName="CategoryName" Property="Text" Value="{Binding Source='hdd323f92g1283g4e22g8aacg3d2dcea4b945',Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="AdditionalFilters" Property="Text" Value=""/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentFilter, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToBoolTrueConverter}}" Value="True"/>
                    <Condition Binding="{Binding IsPopupVisible,RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding Text, ElementName='PART_FilterSearchBox', Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ClearFilter" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--SPELLS FILTER TEMPLATE-->
    <ControlTemplate x:Key="SpellFilterCategoryTemplate" TargetType="Control">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Grid.ColumnSpan="2" x:Name="BtnBorder" Stretch="None" Source="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_d.png"/>
            <Image Grid.Column="0" Stretch="None" Source="/GustavNoesisGUI;component/Assets/CharacterPanel/ico_bullet_d.png" VerticalAlignment="Center" Margin="4,0,16,0"/>
            <TextBlock Grid.Column="1" x:Name="BtnText" Text="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self},Converter={StaticResource TranslatedStringConverter}, StringFormat={}{0}...}" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Width="400"/>

            <Popup x:Name="SubMenuPopup" IsOpen="False">
                <ls:LSNineSliceImage x:Name="FilterCategories" Margin="400,-100,0,0"  HorizontalAlignment="Left" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/sorting_bg.png" Slices="60" Padding="10,40">

                    <ListBox x:Name="FilterSpellListHolder" ItemsSource="{Binding .}" SelectedItem="{Binding CurrentFilterInternal,RelativeSource={RelativeSource AncestorType={x:Type ls:FilteringContainer}}}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="20,0,0,0" VerticalAlignment="Top">
                        <ListBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMEnumFilter}">
                                <TextBlock Grid.Column="1" x:Name="BtnText" Text="{Binding }" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Width="400">
                                    <b:Interaction.Behaviors>
                                        <ls:CollectionContainsItemBehavior x:Name="AvailabilityBehavior" ItemSource="{Binding .}" CollectionSource="{Binding AvailableEnumFilters, RelativeSource={RelativeSource AncestorType={x:Type ls:FilteringContainer}}}"/>
                                    </b:Interaction.Behaviors>
                                </TextBlock>

                                <DataTemplate.Triggers>
                                    <Trigger Property="IsMouseOver"  Value="True">
                                        <Setter TargetName="BtnText" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding Enum, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                                        <Setter TargetName="BtnText" Property="Text" Value="{Binding Name}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=(b:Interaction.Behaviors)[0].Result, ElementName=BtnText}" Value="False">
                                        <Setter TargetName="BtnText" Property="Foreground" Value="{StaticResource LS_accent25TxtColor}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ListBox.ItemTemplate>

                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">
                                            <Grid>
                                                <Image x:Name="BtnBorder" Stretch="None" Source="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_d.png">
                                                    <b:Interaction.Behaviors>
                                                        <ls:CollectionContainsItemBehavior x:Name="AvailabilityBehavior" ItemSource="{Binding .}" CollectionSource="{Binding AvailableEnumFilters, RelativeSource={RelativeSource AncestorType={x:Type ls:FilteringContainer}}}"/>
                                                    </b:Interaction.Behaviors>
                                                </Image>
                                                <ContentPresenter Margin="20,0"/>
                                            </Grid>

                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="BtnBorder" Property="Source" Value="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_h.png"/>
                                                </Trigger>
                                                <DataTrigger Binding="{Binding Path=(b:Interaction.Behaviors)[0].Result, ElementName=BtnBorder}" Value="False">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>

                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                    </ListBox>
                </ls:LSNineSliceImage>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="SubMenuPopup" Property="IsOpen" Value="True"/>
                <Setter TargetName="BtnBorder" Property="Source" Value="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_h.png"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--===== MULTICLASS SPELLBOOK TEMPLATE =====-->
    <ControlTemplate x:Key="MultiClassSpellbookTemplate">
        <!-- DataContext of this should be a VMCharacter -->
        <ControlTemplate.Resources>
            <BitmapImage x:Key="SpellbookBg_Small" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/spellbook_bg_small.png"/>

            <BitmapImage x:Key="SpellsBorder_Small" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/knownSpells_frame_small.png" />

            <BitmapImage x:Key="ClassBorder_Small" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/spellbookTop_frame_small.png" />
            <CroppedBitmap x:Key="ClassBorderEdges_Small" Source="{StaticResource ClassBorder_Small}" SourceRect="0,0,668,22"/>
            <CroppedBitmap x:Key="ClassBorderCenter_Small" Source="{StaticResource ClassBorder_Small}" SourceRect="0,22,668,28"/>

            <BitmapImage x:Key="PreparedSpellsTop_Small" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/preparedBoxTile_small_top.png" />
            <BitmapImage x:Key="PreparedSpellsCenter_Small" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/preparedBoxTile_small_middle.png" />
            <BitmapImage x:Key="PreparedSpellsBottom_Small" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/preparedBoxTile_small_bottom.png" />

            <System:Double x:Key="PageIconSize">200</System:Double>
            <System:Double x:Key="SpellCellSize">72</System:Double>
            <System:Double x:Key="SpellCellContentSize">68</System:Double>

            <System:Double x:Key="TopBarHeight">76</System:Double>
            <GridLength x:Key="TopBarHeightGridLength">76</GridLength>

            <System:Int32 x:Key="InitialTab">0</System:Int32>

            <BitmapImage x:Key="SpellbookBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/spellbook_bg.png"/>

            <BitmapImage x:Key="CantripsIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_classCantrip.png" />
            <BitmapImage x:Key="ClassActionIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_classAction.png" />
            <BitmapImage x:Key="TadpoleActionIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_illithid.png" />
            <BitmapImage x:Key="MetamagicIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_sorcerer.png" />
            <BitmapImage x:Key="AlwaysPreparedSpellsIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_alwaysPrepared.png" />
            <BitmapImage x:Key="PreparedSpellsIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_preparedList.png" />
            <BitmapImage x:Key="WarlockSpellsIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_warlock.png" />
            <BitmapImage x:Key="SpellsLv1Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_01.png" />
            <BitmapImage x:Key="SpellsLv2Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_02.png" />
            <BitmapImage x:Key="SpellsLv3Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_03.png" />
            <BitmapImage x:Key="SpellsLv4Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_04.png" />
            <BitmapImage x:Key="SpellsLv5Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_05.png" />
            <BitmapImage x:Key="SpellsLv6Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_06.png" />
            <BitmapImage x:Key="SpellsLv7Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_07.png" />
            <BitmapImage x:Key="SpellsLv8Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_08.png" />
            <BitmapImage x:Key="SpellsLv9Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_knownSpells_lvl_09.png" />
            <BitmapImage x:Key="CastSavingIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_cast_saving.png" />
            <BitmapImage x:Key="CastRollIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_cast_roll.png" />
            <BitmapImage x:Key="ProficientIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_proficient.png" />
            <BitmapImage x:Key="LongRestIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_d.png" />

            <BitmapImage x:Key="KnownSpellsBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/knownSpells_bgStrip.png" />

            <BitmapImage x:Key="MainIconBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/spellbook_classFrame.png" />
            <BitmapImage x:Key="HeaderEntryBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/spellbook_headerBox.png" />

            <BitmapImage x:Key="ClassBorder" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/spellbookTop_frame.png" />
            <CroppedBitmap x:Key="ClassBorderEdges" Source="{StaticResource ClassBorder}" SourceRect="0,0,1124,23"/>
            <CroppedBitmap x:Key="ClassBorderCenter" Source="{StaticResource ClassBorder}" SourceRect="0,23,1124,29"/>

            <BitmapImage x:Key="SpellsBorder" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/knownSpells_frame.png" />
            <BitmapImage x:Key="SpellsBorderHalf" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/dashedBox_full.png" />

            <BitmapImage x:Key="PreparedSpellsTop" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/preparedBoxTile_top.png" />
            <BitmapImage x:Key="PreparedSpellsCenter" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/preparedBoxTile_middle.png" />
            <BitmapImage x:Key="PreparedSpellsBottom" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/preparedBoxTile_bottom.png" />
            <BitmapImage x:Key="FreeSlotBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/preparedBox_OpenSlot.png" />

            <BitmapImage x:Key="SearchBarBg_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_body_d.png" />
            <BitmapImage x:Key="SearchBarBg_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_body_h.png" />
            <BitmapImage x:Key="SearchIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_search.png" />
            <BitmapImage x:Key="SearchSortingBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/sorting_bg.png" />
            <BitmapImage x:Key="SearchFilterIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_filter.png" />
            <BitmapImage x:Key="SearchSelector_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_d.png" />
            <BitmapImage x:Key="SearchSelector_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_h.png" />

            <BitmapImage x:Key="Tab_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_inactive_d.png" />
            <BitmapImage x:Key="Tab_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_inactive_h.png" />
            <BitmapImage x:Key="Tab_p" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_inactive_p.png" />
            <BitmapImage x:Key="TabSelected_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_active_d.png" />
            <BitmapImage x:Key="TabSelected_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_active_h.png" />
            <BitmapImage x:Key="TabSelected_p" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_active_p.png" />

            <BitmapImage x:Key="RemoveSpellIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/remover_spellslot.png" />
            <BitmapImage x:Key="PreparedSpellIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_prepared.png" />
            <BitmapImage x:Key="PreparedSpellBorder" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/frame_perpared.png" />

            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"/>
                <Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>

            <Style x:Key="ActionGroupTitleStyle" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                <Setter Property="FontSize" Value="{DynamicResource ScaledSmallFontSize}"/>
                <Setter Property="Visibility" Value="{Binding (ls:TextBlockFormatter.SourceText), RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}"/>
                <Setter Property="Margin" Value="0,22,0,0"/>
            </Style>

            <Style x:Key="CastInfoControlStyle" TargetType="ContentControl">
                <Setter Property="MinWidth" Value="150"/>
                <Setter Property="Margin" Value="2,0"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ls:LSNineSliceImage ImageSource="{StaticResource HeaderEntryBg}" Slices="16" Padding="20,10" Height="60" MinWidth="128" >
                                <ContentPresenter HorizontalAlignment="Center"/>
                            </ls:LSNineSliceImage>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel">
                        <Setter Property="MinWidth" Value="136"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <ItemsPanelTemplate x:Key="SpellbookItemsPanelTemplate">
                <WrapPanel HorizontalAlignment="Left"/>
            </ItemsPanelTemplate>

            <ControlTemplate x:Key="SpellbookActionGroup">
                <Grid x:Name="ActionGroupRoot">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="Column0" Width="120"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition x:Name="Column2" Width="120"/>
                    </Grid.ColumnDefinitions>

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <TextBlock x:Name="GroupName" Grid.Column="1" Grid.Row="0" ls:TextBlockFormatter.SourceText="" Style="{StaticResource ActionGroupTitleStyle}"/>

                    <Border x:Name="IconContainer" Grid.Column="0" Grid.Row="1" Height="48" VerticalAlignment="Top" Margin="0,12,0,0">
                        <Image x:Name="Icon" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None" />
                    </Border>

                    <Border x:Name="Actions" Grid.Column="1" Grid.Row="1">
                        <ItemsPresenter x:Name="Presenter" Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left">
                            <ItemsPresenter.Width>
                                <MultiBinding Converter="{StaticResource RoundDownMultiConverter}">
                                    <Binding Path="ActualWidth" ElementName="Actions"/>
                                    <Binding Source="{StaticResource SpellCellSize}"/>
                                </MultiBinding>
                            </ItemsPresenter.Width>
                        </ItemsPresenter>
                    </Border>

                    <ItemsControl x:Name="Resources" Grid.Column="2" Grid.Row="1"
                                                      ItemsSource="{Binding GroupResources}" 
                                                      VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,0,48,0" 
                                                      Visibility="{Binding GroupResources.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="ls:VMGroupResource">
                                <Grid x:Name="GroupResourceRoot" Visibility="{Binding MaxValue, Converter={StaticResource CountToVisibilityConverter}}">
                                    <ls:LSActionPointResources x:Name="ResourcePoints" 
                                                                               ToolTipService.Placement="Top" ToolTip="{StaticResource ManagedTooltip}" 
                                                                               VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,18,0,-18"
                                                                               MaxActionPoints="{Binding MaxValue}" 
                                                                               AvailableActionPoints="{Binding Value}"
                                                                               ActionPointSize="48" SmallActionPointSize="25" ActionPointGroupSize="50" 
                                                                               HighlightedActionPoints="0" 
                                                                               Style="{DynamicResource ActionResourcesTemplateSelector}"
                                                                               ls:AttachedProperties.InheritedTag="NoAnimation"/>

                                    <TextBlock x:Name="SpellSlotLevel" 
                                                               Text="{Binding Level, Converter={StaticResource DecimalToRomanConverter}}" 
                                                               Foreground="{StaticResource LS_tint100}" 
                                                               VerticalAlignment="Top" HorizontalAlignment="Center"
                                                               IsHitTestVisible="False" 
                                                               FontSize="{StaticResource MiniFontSize}" 
                                                               FontWeight="Bold" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="5"/>
                                </Grid>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>

                <ControlTemplate.Triggers>
                    <!-- MetaMagic -->
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="MetaMagic">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h007741f2ge0abg4842g99f1gcfa286352e4a', Converter={StaticResource TranslatedStringConverter}}"/>
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource MetamagicIcon}"/>
                        <Setter TargetName="GroupName" Property="Foreground" Value="{StaticResource Sorcerer.Metamagic}"/>
                    </DataTrigger>

                    <!-- Passives -->
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="Passives">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hccb74959ga789g46f6g8cc2g73edf1536b6a', Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="TadpolePassives">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb34891acg5c1dg4c00gbdffg28f4611d661a', Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>

                    <!-- Always prepared -->
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="AlwaysPrepared">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource AlwaysPreparedSpellsIcon}"/>
                    </DataTrigger>

                    <!-- Prepared -->
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="Prepared">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource PreparedSpellsIcon}"/>
                    </DataTrigger>

                    <!-- Feats -->
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="CharacterFeats">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source=h0903b2a0g1e63g4553ga7e5gb60812ee4364, Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="ClassFeats">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source=hf0ecb46dgcfb5g4979gbdf5g1c48ca834de8, Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="TadpoleFeats">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source=h97b3e255g3188g4739g9e16ge08349058868, Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>

                    <!-- Cantrips -->
                    <DataTrigger Binding="{Binding GroupType}" Value="Cantrip">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h85581f8bg866cg4da4g9d7agffb21a8cfade', Converter={StaticResource TranslatedStringConverter}}"/>
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource CantripsIcon}"/>
                        <Setter TargetName="Resources" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <!-- Spell levels -->
                    <DataTrigger Binding="{Binding GroupType}" Value="Level1">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv1Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level2">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv2Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level3">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv3Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level4">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv4Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level5">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv5Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level6">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv6Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level7">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv7Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level8">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv8Icon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="Level9">
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource SpellsLv9Icon}"/>
                    </DataTrigger>

                    <!-- Actions -->
                    <DataTrigger Binding="{Binding GroupType}" Value="SpecialActions">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h66448586g6071g4b12g8e48g27cd0d5715ab', Converter={StaticResource TranslatedStringConverter}}"/>
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource ClassActionIcon}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="WeaponActions">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h37cf9a7bge200g4d99g8cf8gaf035b189c60', Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GroupType}" Value="CommonActions">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb4d6c027ge6c2g4ebag8d04g6d5f7febd91d', Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="TadpoleActions">
                        <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source=hceaee723g15d8g47adg99edg436618d1e149, Converter={StaticResource TranslatedStringConverter}}"/>
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource TadpoleActionIcon}"/>
                    </DataTrigger>

                    <!-- Warlock spells -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding GroupResources[0].MaxValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0'}" Value="False"/>
                            <Condition Binding="{Binding GroupResources[1].MaxValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0'}" Value="True"/>
                            <Condition Binding="{Binding GroupResources[1].TypeId}" Value="WarlockSpellSlot"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Icon" Property="Source" Value="{StaticResource WarlockSpellsIcon}"/>
                    </MultiDataTrigger>

                    <!-- Compact View -->
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="HideResources">
                        <Setter TargetName="Column2" Property="Width" Value="0"/>
                        <Setter TargetName="Resources" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="HideFeatsAndResources">
                        <Setter TargetName="Column2" Property="Width" Value="0"/>
                        <Setter TargetName="Resources" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="CompactView">
                        <Setter TargetName="Column2" Property="Width" Value="0"/>
                        <Setter TargetName="GroupName" Property="Margin" Value="0"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="CompactView"/>
                            <Condition Binding="{Binding GroupType}" Value="Level1"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="GroupName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h062f5cf9gb2e5g4c0dgadc9g68898c250650', Converter={StaticResource TranslatedStringConverter}}"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="SpellCellTemplate">
                <Grid x:Name="Container" Background="Transparent" Width="{StaticResource SpellCellContentSize}" Height="{StaticResource SpellCellContentSize}" >
                    <Rectangle x:Name="Icon" Fill="{Binding Icon}" Width="{StaticResource SpellCellContentSize}" Height="{StaticResource SpellCellContentSize}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Rectangle x:Name="hover" Fill="{StaticResource LS_HoverColor}" Visibility="Hidden"/>
                    <Image x:Name="hoverIcon" Source="{StaticResource RemoveSpellIcon}" Stretch="Fill" VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Hidden"/>
                    <Image x:Name="Border" Source="{StaticResource PreparedSpellBorder}" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden" Width="{StaticResource SpellCellContentSize}" Height="{StaticResource SpellCellContentSize}"/>
                    <Image x:Name="Checkmark" Source="{StaticResource PreparedSpellIcon}" Stretch="None" VerticalAlignment="Bottom" HorizontalAlignment="Right" Visibility="Collapsed" Margin="0,0,-6,-6"/>
                </Grid>

                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding Datacontext, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource NullToBoolTrueConverter}}" Value="True">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            <Condition Binding="{Binding Datacontext, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="hover" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            <Condition Binding="{Binding Datacontext, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                            <Condition Binding="{Binding NeedsActivation}" Value="True"/>
                            <Condition Binding="{Binding Activated}" Value="True"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.AllowInteraction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="hoverIcon" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding SelectedItem.Class.MustPrepareSpells, ElementName=Tabs, FallbackValue=False}" Value="True"/>
                            <Condition Binding="{Binding SpellSlotLevel, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                            <Condition Binding="{Binding Activated}" Value="True"/>
                            <Condition Binding="{Binding NeedsActivation}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Checkmark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Border" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="PreparedSpell">
                        <Setter TargetName="Checkmark" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="Border" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="PreparedSpell"/>
                            <Condition Binding="{Binding Datacontext, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource NullToBoolTrueConverter}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Icon" Property="Fill">
                                <Setter.Value>
                                    <ImageBrush ImageSource="{StaticResource FreeSlotBg}" Stretch="None"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <DataTemplate x:Key="PreparedSpellCellTemplate" DataType="ls:VMCharacterAction">
                <ContentControl x:Name="Container" IsEnabled="{Binding DataContext.CurrentPlayer.UIData.AllowInteraction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ToolTipService.Placement="Right" ToolTipService.ShowOnDisabled="True" ls:DragAndDropProperties.DropTargetOwner="{Binding Path=(ls:TooltipExtender.Owner), RelativeSource={RelativeSource Mode=Self}}">
                    <ContentControl.ToolTip>
                        <ls:LSTooltip Content="{Binding DataContext, RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="False"/>
                    </ContentControl.ToolTip>

                    <b:Interaction.Behaviors>
                        <ls:DragGenericBehavior StartDragCommand="{Binding DataContext.DragCharacterActionCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        <ls:DropOnGenericBehavior DropCommand="{Binding DataContext.DropPrepareCharacterAction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    </b:Interaction.Behaviors>

                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding DataContext, ElementName=Container, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                            <b:ChangePropertyAction TargetName="SlotButton" PropertyName="IsEnabled" Value="True"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>

                    <Grid Width="{StaticResource SpellCellSize}" Height="{StaticResource SpellCellSize}">
                        <ls:LSButton x:Name="SlotButton" HorizontalAlignment="Center" VerticalAlignment="Center" Template="{StaticResource SpellCellTemplate}" ls:AttachedProperties.InheritedTag="PreparedSpell" Command="{Binding DataContext.ToggleCharacterAction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}">
                            <Image Source="{StaticResource RemoveSpellIcon}" Stretch="None"/>

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">
                                    <b:ChangePropertyAction TargetName="SlotButton" PropertyName="IsEnabled" Value="False"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <TextBlock x:Name="SpellSlotLevel" Text="{Binding SpellSlotLevel, Converter={StaticResource DecimalToRomanConverter}}" Foreground="{StaticResource LS_tint100}" VerticalAlignment="Bottom" HorizontalAlignment="Right" IsHitTestVisible="False" Margin="0,0,12,0" FontSize="{StaticResource SmallishFontSize}" FontWeight="Bold" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="5"/>
                    </Grid>
                </ContentControl>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding DataContext, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource NullToBoolTrueConverter}}" Value="True">
                        <Setter TargetName="Container" Property="ToolTip" Value="{x:Null}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <Style x:Key="SpellCellGridItemContainerStyle" TargetType="ContentPresenter">
                <Setter Property="Width" Value="{StaticResource SpellCellSize}"/>
                <Setter Property="Height" Value="{StaticResource SpellCellSize}"/>

                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.ComesFromFeat, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="HideFeats"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.ComesFromFeat, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="HideFeatsAndAlwaysPrepared"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.ComesFromFeat, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="HideFeatsAndResources"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.SpellSlotLevel, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                            <Condition Binding="{Binding DataContext.Activated, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            <Condition Binding="{Binding DataContext.NeedsActivation, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                            <Condition Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="HideFeatsAndAlwaysPrepared"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="PassiveCellItemsControlStyle" TargetType="ItemsControl">
                <Setter Property="Template" Value="{StaticResource SpellbookActionGroup}"/>
                <Setter Property="AlternationCount" Value="{Binding ItemsSource.Count, RelativeSource={RelativeSource Mode=Self}}"/>
                <Setter Property="ItemsPanel" Value="{StaticResource SpellbookItemsPanelTemplate}"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource SpellCellGridItemContainerStyle}"/>
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl x:Name="Container" ToolTipService.Placement="Right" Template="{StaticResource SpellCellTemplate}">
                                <ContentControl.ToolTip>
                                    <ls:LSTooltip Content="{TemplateBinding DataContext}" IsHitTestVisible="False"/>
                                </ContentControl.ToolTip>
                                <b:Interaction.Behaviors>
                                    <ls:DragGenericBehavior StartDragCommand="{Binding DataContext.DragPassiveCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                </b:Interaction.Behaviors>

                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="MouseEnter">
                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseDown">
                                        <ls:LSPlaySound Sound="UI_Shared_Press"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ContentControl.Clip>
                                    <EllipseGeometry Center="34,34" RadiusX="34" RadiusY="34" />
                                </ContentControl.Clip>
                            </ContentControl>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <DataTemplate x:Key="ActionGroupItemTemplate">
                <ls:LSButton x:Name="Container" Command="{Binding DataContext.ToggleCharacterAction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTipService.Placement="Right" Template="{StaticResource SpellCellTemplate}">
                    <ls:LSButton.ToolTip>
                        <ls:LSTooltip Content="{TemplateBinding DataContext}" IsHitTestVisible="False"/>
                    </ls:LSButton.ToolTip>
                    <b:Interaction.Behaviors>
                        <ls:DragGenericBehavior StartDragCommand="{Binding DataContext.DragCharacterActionCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    </b:Interaction.Behaviors>
                </ls:LSButton>
            </DataTemplate>

            <Style x:Key="ActionCellItemsControlStyle" TargetType="ItemsControl">
                <Setter Property="Template" Value="{StaticResource SpellbookActionGroup}"/>
                <Setter Property="AlternationCount" Value="{Binding ItemsSource.Count, RelativeSource={RelativeSource Mode=Self}}"/>
                <Setter Property="ItemsPanel" Value="{StaticResource SpellbookItemsPanelTemplate}"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource SpellCellGridItemContainerStyle}"/>
                <Setter Property="ItemTemplate" Value="{StaticResource ActionGroupItemTemplate}"/>
            </Style>

            <DataTemplate DataType="{x:Type ls:VMActionGroup}">
                <Grid>
                    <Image x:Name="AlternateBg" Source="{StaticResource KnownSpellsBg}" Stretch="Fill" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Visibility="Hidden" Margin="0,0,12,0"/>

                    <ItemsControl x:Name="ActionsControl" 
                                                  Style="{StaticResource ActionCellItemsControlStyle}" 
                                                  ItemsSource="{Binding Actions}" VerticalAlignment="Center"/>
                </Grid>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource ModuloConverter}, ConverterParameter='2'}" Value="1">
                        <Setter TargetName="AlternateBg" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <ControlTemplate x:Key="SpellSearchBarTemplate" TargetType="ls:FilteringContainer">
                <Grid>
                    <ls:LSNineSliceImage x:Name="SearchBarContainer" ImageSource="{StaticResource SearchBarBg_d}" Slices="36,34" Padding="20,10" Height="72" Margin="0,-6">
                        <Grid VerticalAlignment="Center">
                            <TextBlock x:Name="CategoryName" Visibility="Collapsed" Text="{Binding Source=hf4c636b5g41beg4369ga0aegfe58a3ab7cd3, Converter={StaticResource TranslatedStringConverter}}"/>
                            <TextBlock x:Name="AdditionalFilters" Visibility="Collapsed" Text=""/>

                            <Image Source="{StaticResource SearchIcon}" Stretch="None" VerticalAlignment="Top" HorizontalAlignment="Left"/>

                            <ls:LSTextBox x:Name="PART_FilterSearchBox" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="60,0,0,0" Height="56" TextAlignment="Left" FontSize="{DynamicResource ScaledMediumFontSize}" TextWrapping="NoWrap" Focusable="True" SelectTextOnFocus="True">
                                <noesis:Text.Placeholder>
                                    <MultiBinding StringFormat="{}{0}{1}{2}{3}">
                                        <Binding Path="Text" ElementName="CategoryName"/>
                                        <Binding Path="CurrentFilter" RelativeSource="{RelativeSource Mode=TemplatedParent}" FallbackValue=""/>
                                        <Binding Path="CurrentFilter.Name" RelativeSource="{RelativeSource Mode=TemplatedParent}" FallbackValue=""/>
                                        <Binding Path="Text" ElementName="AdditionalFilters"/>
                                    </MultiBinding>
                                </noesis:Text.Placeholder>
                            </ls:LSTextBox>
                        </Grid>
                    </ls:LSNineSliceImage>

                    <Popup x:Name="StringSuggestionPopup" IsOpen="False" >
                        <ls:LSNineSliceImage x:Name="FilterCategories" Margin="0,-12,0,0"  HorizontalAlignment="Left" ImageSource="{StaticResource SearchSortingBg}" Slices="60" Padding="10,40">
                            <StackPanel>
                                <TextBlock Foreground="{StaticResource LS_accent25TxtColor}" FontSize="{StaticResource SmallishFontSize}" Text="{Binding Source='hc0ed9c5ag8a2cg4167g8242g5076d73d695f',Converter={StaticResource TranslatedStringConverter}}" Margin="20,0" VerticalAlignment="Top"/>

                                <ListBox x:Name="FilterListHolder" ItemsSource="{TemplateBinding SuggestedFiltersList}" SelectedItem="{Binding CurrentFilterInternal,RelativeSource={RelativeSource TemplatedParent}}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="20,0,0,0" VerticalAlignment="Top">
                                    <ListBox.Resources>
                                        <DataTemplate DataType="{x:Type ls:VMEnumFilter}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Image Grid.Column="0" Grid.ColumnSpan="3" x:Name="BtnBorder" Stretch="None" Source="{StaticResource SearchSelector_d}"/>
                                                <Image Grid.Column="0" Stretch="None" Source="{StaticResource SearchFilterIcon}" VerticalAlignment="Center" Margin="4,0,16,0"/>
                                                <TextBlock Grid.Column="1" x:Name="BtnText" Text="{Binding Name}" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis"/>
                                                <TextBlock Grid.Column="2" x:Name="CategoryText" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Margin="0,0,20,0"/>
                                            </Grid>

                                            <DataTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="BtnBorder" Property="Source" Value="{StaticResource SearchSelector_h}"/>
                                                    <Setter TargetName="BtnText" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                                    <Setter TargetName="CategoryText" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                                </Trigger>

                                                <DataTrigger Value="True">
                                                    <DataTrigger.Binding>
                                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                                            <Binding Path="EnumName"/>
                                                            <Binding Source="ESpellSchool"/>
                                                        </MultiBinding>
                                                    </DataTrigger.Binding>
                                                    <Setter TargetName="CategoryText" Property="Text" Value="{Binding Source=he9daaf0fg24ecg49e2gaab5g36974104a8b6,Converter={StaticResource TranslatedStringConverter}, StringFormat=' ({0})'}"/>
                                                </DataTrigger>

                                                <DataTrigger Value="True">
                                                    <DataTrigger.Binding>
                                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                                            <Binding Path="EnumName"/>
                                                            <Binding Source="EDamageType"/>
                                                        </MultiBinding>
                                                    </DataTrigger.Binding>
                                                    <Setter TargetName="CategoryText" Property="Text" Value="{Binding Source=h476d8aabg45c5g4452ga4dbgf911f76351c7,Converter={StaticResource TranslatedStringConverter}, StringFormat=' ({0})'}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type ls:VMCharacterAction}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Image Grid.Column="0" Grid.ColumnSpan="2" x:Name="BtnBorder" Stretch="None" Source="{StaticResource SearchSelector_d}"/>
                                                <Rectangle Grid.Column="0" Width="28" Height="28" Fill="{Binding Icon}" VerticalAlignment="Center" Margin="4,0,16,0"/>
                                                <TextBlock Grid.Column="1" x:Name="BtnText" Text="{Binding Name}" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Width="400"/>
                                            </Grid>

                                            <DataTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="BtnBorder" Property="Source" Value="{StaticResource SearchSelector_h}"/>
                                                    <Setter TargetName="BtnText" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                                </Trigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ListBox.Resources>

                                    <ListBox.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Vertical"/>
                                        </ItemsPanelTemplate>
                                    </ListBox.ItemsPanel>
                                </ListBox>
                            </StackPanel>
                        </ls:LSNineSliceImage>
                    </Popup>

                    <Popup x:Name="EnumPopup" IsOpen="{TemplateBinding IsPopupVisible}" >
                        <ls:LSNineSliceImage Margin="0,-12,0,0"  HorizontalAlignment="Stretch" ImageSource="{StaticResource SearchSortingBg}" Slices="60" Padding="10,40">
                            <StackPanel Margin="20,0,0,0">
                                <Control x:Name="SpellSchoolCategory" Template="{StaticResource SpellFilterCategoryTemplate}" DataContext="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems, RelativeSource={RelativeSource Mode=Self}}" ls:AttachedProperties.InheritedTag="he9daaf0fg24ecg49e2gaab5g36974104a8b6">
                                    <b:Interaction.Behaviors>
                                        <ls:CollectionFilterBehavior x:Name="SpellSchoolEnumFilter" ItemsSource="{Binding Path=GeneratedEnumFilters,RelativeSource={RelativeSource AncestorType={x:Type ls:FilteringContainer}}}" Predicate="{Binding DataContext.Data.SpellSchoolEnumPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                    </b:Interaction.Behaviors>
                                </Control>

                                <Control x:Name="DamageTypeCategory" Template="{StaticResource SpellFilterCategoryTemplate}" DataContext="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems, RelativeSource={RelativeSource Mode=Self}}" ls:AttachedProperties.InheritedTag="h476d8aabg45c5g4452ga4dbgf911f76351c7">
                                    <b:Interaction.Behaviors>
                                        <ls:CollectionFilterBehavior x:Name="DamageTypeEnumFilter" ItemsSource="{Binding Path=GeneratedEnumFilters,RelativeSource={RelativeSource AncestorType={x:Type ls:FilteringContainer}}}" Predicate="{Binding DataContext.Data.DamageTypeEnumPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                    </b:Interaction.Behaviors>
                                </Control>
                            </StackPanel>
                        </ls:LSNineSliceImage>
                    </Popup>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Loaded">
                            <noesis:SetFocusAction TargetName="PART_FilterSearchBox" />
                            <b:ChangePropertyAction TargetName="PART_FilterSearchBox" PropertyName="Tag" Value="Loaded"/>
                        </b:EventTrigger>

                        <b:DataTrigger Binding="{Binding Path=IsVisible,ElementName=PART_FilterSearchBox}" Value="True">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Path=Tag,ElementName=PART_FilterSearchBox}" Operator="LessThanOrEqual" RightOperand="Loaded"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <noesis:SetFocusAction TargetName="PART_FilterSearchBox" />
                        </b:DataTrigger>
                    </b:Interaction.Triggers>
                </Grid>

                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding CurrentFilter, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="False">
                        <Setter TargetName="CategoryName" Property="Text" Value=""/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding CurrentFilter.AdditionalBoolProperty, RelativeSource={RelativeSource Self}}" Value="True">
                        <Setter TargetName="AdditionalFilters" Property="Text" Value="{Binding Source='h038b1421g2efeg4283g9b88gcdd3b6e46f80',Converter={StaticResource TranslatedStringConverter}}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding IsFocused, ElementName=PART_FilterSearchBox}" Value="True">
                        <Setter TargetName="CategoryName" Property="Text" Value="{Binding Source='hdd323f92g1283g4e22g8aacg3d2dcea4b945',Converter={StaticResource TranslatedStringConverter}}"/>
                        <Setter TargetName="AdditionalFilters" Property="Text" Value=""/>
                        <Setter TargetName="SearchBarContainer" Property="ImageSource" Value="{StaticResource SearchBarBg_h}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding Text, ElementName='PART_FilterSearchBox', Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="False">
                        <Setter TargetName="EnumPopup" Property="IsOpen" Value="False"/>
                        <Setter TargetName="StringSuggestionPopup" Property="IsOpen" Value="True"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding Path=IsPopupVisible, RelativeSource={RelativeSource Mode=Self}}" Value="False">
                        <Setter TargetName="EnumPopup" Property="IsOpen" Value="False"/>
                        <Setter TargetName="StringSuggestionPopup" Property="IsOpen" Value="False"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

        </ControlTemplate.Resources>

        <Grid x:Name="MultiClassSpellbookContainer">

            <b:Interaction.Behaviors>
                <ls:CollectionSortBehavior x:Name="SpellbooksSortBehavior" ItemsSource="{Binding SpellBooks}" Comparer="{Binding SpellBookComparer}" />

                <ls:CollectionFilterBehavior x:Name="PassivesFilter" ItemsSource="{Binding SelectedItem.Passives, ElementName=Tabs}" Predicate="{Binding TogglablePassivePredicate}"/>
                <ls:CollectionFilterBehavior x:Name="MetaMagicFilter" ItemsSource="{Binding SelectedItem.Passives, ElementName=Tabs}" Predicate="{Binding TogglableMetaMagicPassivePredicate}"/>
                <ls:CollectionFilterBehavior x:Name="CantripGroupFilter" ItemsSource="{Binding SelectedItem.ActionGroups, ElementName=Tabs}" Predicate="{Binding CantripGroupPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="SpellLevelsGroupFilter" ItemsSource="{Binding SelectedItem.ActionGroups, ElementName=Tabs}" Predicate="{Binding SpellLevelsGroupPredicate}" SortDirection="Descending"/>
                <ls:CollectionFilterBehavior x:Name="CharacterActionGroupFilter" ItemsSource="{Binding SelectedItem.ActionGroups, ElementName=Tabs}" Predicate="{Binding CharacterActionsGroupPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="ClassActionGroupFilter" ItemsSource="{Binding SelectedItem.ActionGroups, ElementName=Tabs}" Predicate="{Binding ClassActionsGroupPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="CharacterFeatsFilter" ItemsSource="{Binding SelectedItem.Passives, ElementName=Tabs}" Predicate="{Binding Stats.CharacterFeaturesPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="ClassFeatsFilter" ItemsSource="{Binding SelectedItem.Passives, ElementName=Tabs}" Predicate="{Binding Stats.ClassFeaturesPredicate}"/>


                <ls:CollectionFilterBehavior x:Name="NonFeatCantripGroupFilter" ItemsSource="{Binding FilteredItems, ElementName=CantripGroupFilter}" Predicate="{Binding NonFeatActionsGroupPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="NonNullAlwaysPreparedSpellsFilter" ItemsSource="{Binding SelectedItem.AlwaysPreparedActions, ElementName=Tabs}" Predicate="{Binding CharacterActionRemoveNullPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="NonAlwaysPreparedSpellLevelsGroupFilter" ItemsSource="{Binding FilteredItems, ElementName=SpellLevelsGroupFilter}" Predicate="{Binding NonAlwaysPreparedActionsGroupPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="NonFeatSpellLevelsGroupFilter" ItemsSource="{Binding FilteredItems, ElementName=SpellLevelsGroupFilter}" Predicate="{Binding NonFeatActionsGroupPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="NonFeatOrAlwaysPreparedSpellLevelsGroupFilter" ItemsSource="{Binding FilteredItems, ElementName=SpellLevelsGroupFilter}" Predicate="{Binding NonFeatOrAlwaysPreparedActionsGroupPredicate}"/>

                <ls:CollectionFilterBehavior x:Name="TadpolePassivesFilter" ItemsSource="{Binding TadpoleSpellBook.Passives}" Predicate="{Binding TogglablePassivePredicate}"/>
                <ls:CollectionFilterBehavior x:Name="TadpoleFeatsFilter" ItemsSource="{Binding TadpoleSpellBook.Passives}" Predicate="{Binding Stats.TadpoleFeaturesPredicate}"/>
                <ls:CollectionFilterBehavior x:Name="TadpoleActionsFilter" ItemsSource="{Binding TadpoleSpellBook.ActionGroups}" Predicate="{Binding AllActionsGroupPredicate}"/>
            </b:Interaction.Behaviors>

            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Unloaded">
                    <b:ChangePropertyAction TargetName="LearnSpellsButton" PropertyName="CommandParameter" Value="{x:Null}"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Image x:Name="Background" Source="{StaticResource SpellbookBg}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top"/>

            <!-- Spellbook -->
            <Grid x:Name="ClassPanelRoot">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <!-- Tabs -->
                <StackPanel Grid.Row="0" x:Name="TabsContainer" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Stretch" Margin="0,4,0,0">
                    <ls:LSButton x:Name="NavigationLeftButton" Template="{StaticResource IconButtonTemplate}" VerticalAlignment="Center"
                                             Visibility="{Binding SpellBooks.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='5'}"
                                             SoundID="UI_Shared_Panel_Select">
                        <ls:LSButton.Resources>
                            <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                            <BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_h.png"/>
                            <BitmapImage x:Key="ButtonPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                            <BitmapImage x:Key="ButtonDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                            <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                            <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                            <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                            <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                        </ls:LSButton.Resources>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="Loaded">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding ElementName=CharacterPanel,Path=Metadata}" Operator="Equal" RightOperand="ToggleInterrupts"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>

                                <b:ChangePropertyAction TargetName="Tabs" PropertyName="SelectedIndex" Value="{Binding SortedItems.Count, ElementName=SpellbooksSortBehavior, Converter={StaticResource AddConverter}, ConverterParameter=-1}"/>
                            </b:EventTrigger>

                            <b:DataTrigger Binding="{Binding ElementName=CharacterPanel,Path=Metadata}" Value="ToggleInterrupts">
                                <b:ChangePropertyAction TargetName="Tabs" PropertyName="SelectedIndex" Value="{Binding SortedItems.Count, ElementName=SpellbooksSortBehavior, Converter={StaticResource AddConverter}, ConverterParameter=-1}"/>
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding ElementName=CharacterPanel,Path=Metadata}" Value="ToggleSpells">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SelectedItem.SpellBookType, ElementName=Tabs}" Operator="Equal" RightOperand="TadPole"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="Tabs" PropertyName="SelectedIndex" Value="0"/>
                            </b:DataTrigger>

                            <b:EventTrigger EventName="LSButtonPressed">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=Tabs}" Operator="GreaterThan" RightOperand="0"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="Tabs" PropertyName="SelectedIndex" Value="{Binding SelectedIndex, ElementName=Tabs, Converter={StaticResource AddConverter}, ConverterParameter=-1}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSButton>

                    <ListBox x:Name="Tabs" ItemsSource="{Binding SortedItems, ElementName=SpellbooksSortBehavior}" HorizontalAlignment="Center" SelectedIndex="{StaticResource InitialTab}" VerticalAlignment="Bottom" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
                        <ListBox.MaxWidth>
                            <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                <Binding Path="ActualWidth" ElementName="MultiClassSpellbookContainer"/>
                                <Binding Path="ActualWidth" ElementName="NavigationLeftButton" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                <Binding Path="ActualWidth" ElementName="NavigationRightButton" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                            </MultiBinding>
                        </ListBox.MaxWidth>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SelectedIndex, ElementName=Tabs}" Operator="Equal" RightOperand="-1" />
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="Tabs" PropertyName="SelectedIndex" Value="{StaticResource InitialTab}"/>
                            </b:EventTrigger>

                            <b:PropertyChangedTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}">
                                <b:ChangePropertyAction TargetName="Tabs" PropertyName="SelectedIndex" Value="{StaticResource InitialTab}"/>
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Behaviors>
                            <ls:AutoScrollBehavior ScrollIntoView="{Binding SelectedIndex, ElementName=Tabs}" BringSelectionIntoView="True"/>
                        </b:Interaction.Behaviors>

                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem"  BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                <Setter Property="IsEnabled" Value="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource InvertBoolConverter}}"/>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>

                        <ListBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellBook}">
                                <Border x:Name="TabRoot" Background="Transparent">
                                    <ls:LSNineSliceImage x:Name="Container" ImageSource="{StaticResource Tab_d}" Slices="66,36,66, 52" IconWidth="16" Padding="66,10,66,0" Height="88" MinWidth="156">
                                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                            <TextBlock x:Name="Label" 
                                                                   Text="{Binding Source='h2d773583g5f0dg4737g93d5g324f4bcfe2ac', Converter={StaticResource TranslatedStringConverter}}"                                                            
                                                                   HorizontalAlignment="Center" 
                                                                   Foreground="{StaticResource LS_accent100TxtColor}"
                                                                   FontSize="{DynamicResource ScaledMediumFontSize}"/>

                                            <TextBlock x:Name="PreparableSpellsCount" Margin="8,0,0,0" 
                                                                   Foreground="{StaticResource LS_accent100TxtColor}"
                                                                   FontSize="{DynamicResource ScaledMediumFontSize}"
                                                                   Visibility="{Binding PreparedSpellsStat.Max, Converter={StaticResource CountToVisibilityConverter}}">
                                                <TextBlock.Text>
                                                    <MultiBinding StringFormat="{}({0}/{1})">
                                                        <Binding Path="PreparedSpellsStat.Value"/>
                                                        <Binding Path="PreparedSpellsStat.Max"/>
                                                    </MultiBinding>
                                                </TextBlock.Text>
                                            </TextBlock>
                                        </StackPanel>

                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="MouseLeftButtonUp">
                                                <ls:LSPlaySound Sound="UI_Shared_Click"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="MouseLeftButtonUp">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding SpellBookType}" Operator="NotEqual" RightOperand="TadPole"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:InvokeCommandAction Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="ToggleSpells"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="MouseLeftButtonUp">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding SpellBookType}" Operator="Equal" RightOperand="TadPole"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:InvokeCommandAction Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="ToggleInterrupts"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="MouseLeftButtonDown">
                                                <ls:LSPlaySound Sound="UI_Shared_Press"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="MouseEnter">
                                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                            </b:EventTrigger>

                                            <!-- Non-selected states -->
                                            <b:EventTrigger EventName="MouseLeftButtonUp">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="False"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource Tab_h}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="MouseLeftButtonDown">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="False"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource Tab_p}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="MouseEnter">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="False"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource Tab_h}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="MouseLeave">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="False"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource Tab_d}"/>
                                            </b:EventTrigger>

                                            <!-- Selected states -->
                                            <b:EventTrigger EventName="MouseLeftButtonUp">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource TabSelected_h}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="MouseLeftButtonDown">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource TabSelected_p}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="MouseEnter">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource TabSelected_h}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="MouseLeave">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource TabSelected_d}"/>
                                            </b:EventTrigger>

                                            <!-- State change -->
                                            <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource TabSelected_h}"/>
                                            </b:DataTrigger>

                                            <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="False"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource TabSelected_d}"/>
                                            </b:DataTrigger>

                                            <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
                                                <b:ChangePropertyAction TargetName="Container" PropertyName="ImageSource" Value="{StaticResource Tab_d}"/>
                                            </b:DataTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSNineSliceImage>
                                </Border>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding SpellBookType}" Value="Base">
                                        <Setter TargetName="Label" Property="Text" Value="{Binding Source=haf48b625gb2f0g449egb3aegfddfa1be81c2, Converter={StaticResource TranslatedStringConverter}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SpellBookType}" Value="Tadpole">
                                        <!-- In KBM, tadpole info is part of the Base tab, so we're reusing this tab to act as the reactions' one, which doesn't exist -->
                                        <Setter TargetName="Label" Property="Text" Value="{Binding Source=h2fda2a98g24aeg4745ga96fg486c04590c4e, Converter={StaticResource TranslatedStringConverter}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SpellBookType}" Value="Class">
                                        <Setter TargetName="Label" Property="Text" Value="{Binding Class.ClassDisplayName}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                    <ls:LSButton x:Name="NavigationRightButton" Template="{StaticResource IconButtonTemplate}" VerticalAlignment="Center" RenderTransformOrigin="0.5, 0.5"
                                             Visibility="{Binding SpellBooks.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='5'}"
                                             SoundID="UI_Shared_Panel_Select">
                        <ls:LSButton.Resources>
                            <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                            <BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_h.png"/>
                            <BitmapImage x:Key="ButtonPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                            <BitmapImage x:Key="ButtonDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                            <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                            <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                            <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                            <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                        </ls:LSButton.Resources>

                        <ls:LSButton.RenderTransform>
                            <ScaleTransform ScaleX="-1"/>
                        </ls:LSButton.RenderTransform>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSButtonPressed">
                                <b:ChangePropertyAction TargetName="Tabs" PropertyName="SelectedIndex" Value="{Binding SelectedIndex, ElementName=Tabs, Converter={StaticResource AddConverter}, ConverterParameter=1}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSButton>
                </StackPanel>

                <!-- Reactions -->
                <Control Grid.Row="1" x:Name="Reactions" Template="{StaticResource InterruptPanelTemplate}" Visibility="Collapsed" IsEnabled="{Binding DataContext.CurrentPlayer.UIData.AllowInteraction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>

                <!-- Panel -->
                <Grid Grid.Row="1" x:Name="ClassPanel" Margin="0,10,0,0" MaxHeight="1290" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="ClassPanelLeftColumn" Width="*"/>
                        <ColumnDefinition x:Name="ClassPanelCentralColumn" Width="1124"/>
                        <ColumnDefinition x:Name="ClassPanelRightColumn" Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Class image and info -->
                    <Grid x:Name="InfoPanel" Grid.Column="0" VerticalAlignment="Stretch" HorizontalAlignment="Right" Margin="0,20,0,0">

                        <Image HorizontalAlignment="Center" VerticalAlignment="Top" Stretch="None" Source="{StaticResource MainIconBg}"/>

                        <Image x:Name="PageIcon" HorizontalAlignment="Center" VerticalAlignment="Top" Stretch="Uniform" Width="{StaticResource PageIconSize}" Visibility="Collapsed" Margin="0,-34,0,0"/>

                        <Rectangle x:Name="RaceIcon" HorizontalAlignment="Center" VerticalAlignment="Top" Fill="{StaticResource LS_tint100}" DataContext="{Binding Stats.Race}" Style="{DynamicResource RaceIconStyle}" Width="{StaticResource PageIconSize}" Height="{StaticResource PageIconSize}" Stretch="Uniform" Visibility="Collapsed" Margin="-100,-24,-100,0"/>

                        <TextBlock x:Name="LevelText" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="8,170,0,0">
                            <TextBlock.Text>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
                                    <Binding Path="SelectedItem.Class.Level.Value" ElementName="Tabs"/>
                                    <Binding Source=""/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </Grid>

                    <!-- Class panel -->
                    <Grid x:Name="ClassPanelContent" Grid.Column="1" VerticalAlignment="Top">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <!-- Top bar -->
                        <Grid x:Name="TopBar" Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="{StaticResource TopBarHeightGridLength}"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <!-- Level -->
                            <ContentControl x:Name="BarLevelContainer" Grid.Column="0" Grid.Row="0" Style="{StaticResource CastInfoControlStyle}"
                                            Visibility="Collapsed">
                                <TextBlock x:Name="BarLevelText" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Text, ElementName=LevelText}"/>
                            </ContentControl>

                            <!-- Subclass/Subrace -->
                            <ContentControl x:Name="SubClassContainer" Grid.Column="1" Grid.Row="0" Style="{StaticResource CastInfoControlStyle}"
                                                            Visibility="{Binding Text, ElementName=SubClassName, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                <TextBlock x:Name="SubClassName" Text="{Binding SelectedItem.Class.SubclassDisplayName, ElementName=Tabs}" 
                                                           HorizontalAlignment="Center"/>
                            </ContentControl>

                            <!-- Class Resources -->
                            <ContentControl x:Name="ClassResourcesContainer" Grid.Column="2" Grid.Row="0" Style="{StaticResource CastInfoControlStyle}"
                                                            Visibility="{Binding ItemsSource.Count, ElementName=ClassResources, Converter={StaticResource CountToVisibilityConverter}}">

                                <ItemsControl x:Name="ClassResources" ItemsSource="{Binding SelectedItem.ActionResources, ElementName=Tabs}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="{x:Type ls:VMActionResource}">
                                            <StackPanel Orientation="Horizontal" ToolTip="{StaticResource ManagedTooltip}">
                                                <Image Stretch="Uniform" Style="{StaticResource SectionImageStyle}" VerticalAlignment="Center" Margin="0" MaxHeight="40"/>
                                                <TextBlock VerticalAlignment="Center" ls:TextBlockFormatter.SourceText="{Binding MaxValue, StringFormat='{}{0} '}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </ContentControl>

                            <!-- Caster stuff -->
                            <ContentControl x:Name="CastAbilityContainer" Grid.Column="3" Grid.Row="0" Style="{StaticResource CastInfoControlStyle}" Visibility="{Binding DataContext, ElementName=CastAbility, Converter={StaticResource NullToCollapsedConverter}}">
                                <StackPanel Orientation="Horizontal">
                                    <StackPanel.ToolTip>
                                        <ls:LSTooltip>
                                            <StackPanel>
                                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h3289692bg0388g4f68gad45g82b8fd0ffbf8, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>
                                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h91535f32g4f47g4d5bgbf59ge05726ecb96e, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}"/>
                                            </StackPanel>
                                        </ls:LSTooltip>
                                    </StackPanel.ToolTip>
                                    <Image x:Name="CastAbilityIcon" Source="{StaticResource ProficientIcon}" Stretch="None" VerticalAlignment="Center" Margin="-12,0,0,0"/>
                                    <Control x:Name="CastAbility" Template="{StaticResource AbilityShortDisplayName}" DataContext="{Binding SelectedItem.Class.SpellCastAbility, ElementName=Tabs}" VerticalAlignment="Center" Foreground="{StaticResource LS_tint100}" />
                                </StackPanel>
                            </ContentControl>

                            <ContentControl x:Name="SpellDCContainer" Grid.Column="4" Grid.Row="0" Style="{StaticResource CastInfoControlStyle}"
                                                            Visibility="{Binding Text, ElementName=SpellDC, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                <ContentControl.ToolTip>
                                    <ls:LSTooltip Content="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellDifficultyCheck, RelativeSource={RelativeSource Mode=Self}}"/>
                                </ContentControl.ToolTip>
                                <StackPanel Orientation="Horizontal">
                                    <Image x:Name="SpellDCIcon" 
                                                           Source="{StaticResource CastSavingIcon}" 
                                                           Stretch="None" 
                                                           VerticalAlignment="Center" 
                                                           Margin="-8,0,0,0"/>
                                    <TextBlock x:Name="SpellDC" 
                                                               Text="{Binding SelectedItem.Class.SpellDifficultyCheck.Value, ElementName=Tabs}" 
                                                               VerticalAlignment="Center"/>
                                </StackPanel>
                            </ContentControl>

                            <ContentControl x:Name="SpellAttackContainer" Grid.Column="5" Grid.Row="0" Style="{StaticResource CastInfoControlStyle}"
                                                            Visibility="{Binding Text, ElementName=SpellAttackBonus, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                <ContentControl.ToolTip>
                                    <ls:LSTooltip Content="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellAttackBonus, RelativeSource={RelativeSource Mode=Self}}"/>
                                </ContentControl.ToolTip>
                                <StackPanel Orientation="Horizontal">
                                    <Image x:Name="SpellAttackIcon"
                                                           Source="{StaticResource CastRollIcon}" 
                                                           Stretch="None" 
                                                           VerticalAlignment="Center" 
                                                           Margin="-10,0,0,0"/>
                                    <TextBlock x:Name="SpellAttackBonus" 
                                                               Text="{Binding SelectedItem.Class.SpellAttackBonus.Value, ElementName=Tabs, StringFormat={}{0:+#;-#;0}}" 
                                                               VerticalAlignment="Center"/>
                                </StackPanel>
                            </ContentControl>

                            <!-- Search bar -->
                            <ls:FilteringContainer x:Name="FilteringContainerHolder" Grid.Column="0" Grid.ColumnSpan="6" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Stretch" 
                                                                   FilterPredicate="{Binding DataContext.Data.SpellBookPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                                   Template="{StaticResource SpellSearchBarTemplate}" 
                                                                   ItemsList="{Binding SelectedItem.UngroupedSpellsAndActions, ElementName=Tabs}" 
                                                                   DefaultViewItemsList="{Binding SelectedItem.UngroupedSpellsAndActions, ElementName=Tabs}" 
                                                                   MaxDisplayedFilters="6" 
                                                                   Visibility="{Binding Path=IsChecked, ElementName=SearchToggle, Converter={StaticResource BoolToVisibleConverter}}">
                                <b:Interaction.Behaviors>
                                    <ls:CollectionFilterBehavior x:Name="ResultSpellsFilter" ItemsSource="{Binding Path=GeneratedItemsList, ElementName=FilteringContainerHolder}" Predicate="{Binding DataContext.Data.CharacterActionSpellsPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                    <ls:CollectionFilterBehavior x:Name="ResultNoSpellsFilter" ItemsSource="{Binding Path=GeneratedItemsList, ElementName=FilteringContainerHolder}" Predicate="{Binding DataContext.Data.CharacterActionNoSpellsPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                </b:Interaction.Behaviors>

                                <ls:FilteringContainer.EnumFiltersList>
                                    <ls:EnumFilterItem EnumId="ESpellSchool" Label="hec34e9b7g5b4ag4d58gb8f2gd1601a3f5b8b" AlwaysVisible="False" StartIndex="1" EndIndex="8"/>
                                    <ls:EnumFilterItem EnumId="EDamageType" Label="hc3cd9b4eg4ea4g4438gbfbbg493c0abb6dd7" AlwaysVisible="False" StartIndex="1" EndIndex="13"/>
                                </ls:FilteringContainer.EnumFiltersList>
                            </ls:FilteringContainer>

                            <!-- Search inner button -->
                            <ls:LSToggleButton x:Name="InnerSearchToggle" Grid.Column="6" Grid.Row="0" 
                                                   VerticalAlignment="Center" HorizontalAlignment="Left"
                                                   Template="{StaticResource ToggleIconButtonTemplate}" 
                                                   IsChecked="False" 
                                                   Command="ls:FilteringContainer.ClearFilterCommand" CommandTarget="{Binding ElementName=FilteringContainerHolder}"
                                                   Height="{StaticResource TopBarHeight}"
                                                   Visibility="Collapsed">
                                <ls:LSToggleButton.Resources>
                                    <ImageSource x:Key="ButtonUncheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_d.png</ImageSource>
                                    <ImageSource x:Key="ButtonUncheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_h.png</ImageSource>
                                    <ImageSource x:Key="ButtonUncheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_p.png</ImageSource>
                                    <ImageSource x:Key="ButtonUncheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_disabled.png</ImageSource>
                                    <ImageSource x:Key="ButtonCheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_d.png</ImageSource>
                                    <ImageSource x:Key="ButtonCheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_h.png</ImageSource>
                                    <ImageSource x:Key="ButtonCheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_p.png</ImageSource>
                                    <ImageSource x:Key="ButtonCheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_disabled.png</ImageSource>
                                    <ImageSource x:Key="IconUncheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_d.png</ImageSource>
                                    <ImageSource x:Key="IconUncheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_h.png</ImageSource>
                                    <ImageSource x:Key="IconUncheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_h.png</ImageSource>
                                    <ImageSource x:Key="IconUncheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_d.png</ImageSource>
                                    <ImageSource x:Key="IconCheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel.png</ImageSource>
                                    <ImageSource x:Key="IconCheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel_h.png</ImageSource>
                                    <ImageSource x:Key="IconCheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel_h.png</ImageSource>
                                    <ImageSource x:Key="IconCheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel.png</ImageSource>
                                    <System:Double x:Key="IconWidth">36</System:Double>
                                    <System:Double x:Key="IconHeight">36</System:Double>
                                </ls:LSToggleButton.Resources>
                            </ls:LSToggleButton>
                        </Grid>

                        <!-- Class panel content -->
                        <ScrollViewer x:Name="WholePanelScrollViewer" Grid.Row="1" VerticalScrollBarVisibility="Auto" Margin="50,0,-50,0" Padding="-50,0,50,0">
                            <Grid x:Name="WholePanelScrollViewerRoot">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <StackPanel x:Name="ClassPanelFixedContent" Grid.Row="0" VerticalAlignment="Top">
                                    <!-- Class section -->
                                    <Image x:Name="ClassSectionOpening" Source="{StaticResource ClassBorderEdges}" Stretch="None" Margin="6,0,0,0"/>

                                    <StackPanel x:Name="ClassSection" Margin="{Binding Margin, ElementName=ClassSectionOpening}" Width="{Binding Source.Width, ElementName=ClassSectionOpening}">
                                        <StackPanel.Background>
                                            <ImageBrush ImageSource="{StaticResource ClassBorderCenter}" Stretch="Fill" TileMode="Tile" AlignmentY="Top" ViewportUnits="Absolute">
                                                <ImageBrush.Viewport>
                                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                                        <Binding Source="0"/>
                                                        <Binding Source="0"/>
                                                        <Binding Path="ImageSource.Width" RelativeSource="{RelativeSource Self}"/>
                                                        <Binding Path="ImageSource.Height" RelativeSource="{RelativeSource Self}"/>
                                                    </MultiBinding>
                                                </ImageBrush.Viewport>
                                            </ImageBrush>
                                        </StackPanel.Background>

                                        <!-- Cantrips and actions -->
                                        <Grid x:Name="CantripsAndActions" Margin="0,-22,0,0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <!-- Cantrips -->
                                            <ItemsControl x:Name="CantripList" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" VerticalAlignment="Top" HorizontalAlignment="Stretch" 
                                                          ItemsSource="{Binding FilteredItems, ElementName=CantripGroupFilter}" 
                                                          Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}" 
                                                          ls:AttachedProperties.InheritedTag="HideFeats"/>

                                            <!-- Class Actions -->
                                            <ItemsControl x:Name="ClassActionsList" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" HorizontalAlignment="Stretch" 
                                                          ItemsSource="{Binding FilteredItems, ElementName=ClassActionGroupFilter}" 
                                                          Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"/>
                                        </Grid>

                                        <!-- Tadpole Actions -->
                                        <ItemsControl x:Name="TadpoleActionsList" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                          ItemsSource="{Binding FilteredItems, ElementName=TadpoleActionsFilter}" 
                                                          Visibility="Collapsed"
                                                          ls:AttachedProperties.InheritedTag="TadpoleActions"/>

                                        <!-- Metamagic -->
                                        <ItemsControl x:Name="MetamagicList" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                          Style="{StaticResource PassiveCellItemsControlStyle}"
                                                          ItemsSource="{Binding FilteredItems, ElementName=MetaMagicFilter}" 
                                                          ls:AttachedProperties.InheritedTag="MetaMagic" 
                                                          Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"/>

                                        <!-- Spells -->
                                        <Grid x:Name="SpellsTitle" Visibility="Collapsed" HorizontalAlignment="Stretch">
                                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h062f5cf9gb2e5g4c0dgadc9g68898c250650',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource ActionGroupTitleStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="120,22,0,0"/>

                                            <ls:LSButton x:Name="LearnSpellsButton" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="Collapsed" Margin="0,0,26,0" Command="{Binding DataContext.OpenLearnSpellsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" MinWidth="150">
                                                <ls:LSButton.Template>
                                                    <ControlTemplate TargetType="ls:LSButton">
                                                        <ControlTemplate.Resources>
                                                            <BitmapImage x:Key="Icon_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_learnSpells_d.png" />
                                                            <BitmapImage x:Key="Icon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_learnSpells_h.png" />
                                                            <BitmapImage x:Key="Icon_p" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_learnSpells_p.png" />
                                                            <BitmapImage x:Key="Icon_disabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_learnSpells_disabled.png" />
                                                        </ControlTemplate.Resources>

                                                        <ls:LSNineSliceImage x:Name="SearchBarContainer" ImageSource="{StaticResource SearchBarBg_d}" Slices="36,34" Padding="20,10" Height="72">
                                                            <Image x:Name="Icon" Source="{StaticResource Icon_d}" Stretch="None" VerticalAlignment="Center"/>
                                                        </ls:LSNineSliceImage>

                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="SearchBarContainer" Property="ImageSource" Value="{StaticResource SearchBarBg_h}"/>
                                                                <Setter TargetName="Icon" Property="Source" Value="{StaticResource Icon_h}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter TargetName="SearchBarContainer" Property="ImageSource" Value="{StaticResource SearchBarBg_h}"/>
                                                                <Setter TargetName="Icon" Property="Source" Value="{StaticResource Icon_p}"/>
                                                                <Setter TargetName="Icon" Property="Margin" Value="0,4,0,-4"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter TargetName="SearchBarContainer" Property="ImageSource" Value="{StaticResource SearchBarBg_d}"/>
                                                                <Setter TargetName="Icon" Property="Source" Value="{StaticResource Icon_disabled}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </ls:LSButton.Template>
                                                <ls:LSButton.CommandParameter>
                                                    <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                        <Binding ElementName="ClassPanelRoot"/>
                                                        <Binding Path="ActualWidth" ElementName="ClassPanelRoot" Converter="{StaticResource MultiplierConverter}" ConverterParameter="0.8"/>
                                                    </MultiBinding>
                                                </ls:LSButton.CommandParameter>
                                                <ls:LSButton.ToolTip>
                                                    <ls:LSTooltip DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}">
                                                        <ls:LSTooltip.ContentTemplate>
                                                            <DataTemplate>
                                                                <StackPanel Orientation="Vertical" MaxWidth="{StaticResource MaxTooltipContentWidth}">
                                                                    <StackPanel.Resources>
                                                                        <Style TargetType="TextBlock">
                                                                            <Setter Property="TextWrapping" Value="Wrap"/>
                                                                            <Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
                                                                            <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                                                                        </Style>
                                                                    </StackPanel.Resources>

                                                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h9784a948g9d80g41d8gbb18ga9c838b90edd',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>

                                                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h1be7e965gcf8dg4a81gb85dga1fbc01a9f08',Converter={StaticResource TranslatedStringConverter}}"/>
                                                                </StackPanel>
                                                            </DataTemplate>
                                                        </ls:LSTooltip.ContentTemplate>
                                                    </ls:LSTooltip>
                                                </ls:LSButton.ToolTip>
                                            </ls:LSButton>
                                        </Grid>

                                        <ItemsControl x:Name="AlwaysPreparedList" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                          Style="{StaticResource ActionCellItemsControlStyle}"
                                                          ItemsSource="{Binding FilteredItems, ElementName=NonNullAlwaysPreparedSpellsFilter}"
                                                          Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"
                                                          ls:AttachedProperties.InheritedTag="AlwaysPrepared" />

                                        <ItemsControl x:Name="NonPreparableSpellsCategories" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                                  ItemsSource="{Binding FilteredItems, ElementName=SpellLevelsGroupFilter}" 
                                                                  AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}"
                                                                  ls:AttachedProperties.InheritedTag="HideFeats"
                                                                  Visibility="Collapsed"/>

                                        <TextBlock x:Name="NonPreparableReplaceableSpellsNote" Style="{StaticResource ActionGroupTitleStyle}" HorizontalAlignment="Center" Visibility="Collapsed" FontStyle="Italic" Margin="0,-10,0,0"/>
                                    </StackPanel>

                                    <Image x:Name="ClassSectionClosure" Source="{StaticResource ClassBorderEdges}" Stretch="None" RenderTransformOrigin="0.5, 0.5" Visibility="{Binding Visibility, ElementName=PreparedSpellsSection, Converter={StaticResource InvertVisibilityConverter}}" Margin="{Binding Margin, ElementName=ClassSectionOpening}">
                                        <Image.RenderTransform>
                                            <ScaleTransform ScaleY="-1"/>
                                        </Image.RenderTransform>
                                    </Image>

                                    <!-- Prepared spells section -->
                                    <Image x:Name="PreparedSpellsSectionOpening" Source="{StaticResource PreparedSpellsTop}" Stretch="None" Visibility="{Binding Visibility, ElementName=PreparedSpellsSection}" Margin="0,6,0,0"/>

                                    <Border x:Name="PreparedSpellsSection" Visibility="Collapsed" Width="{Binding Source.Width, ElementName=PreparedSpellsSectionOpening}">
                                        <Border.Background>
                                            <ImageBrush ImageSource="{StaticResource PreparedSpellsCenter}" Stretch="Fill" TileMode="Tile" AlignmentY="Top" ViewportUnits="Absolute">
                                                <ImageBrush.Viewport>
                                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                                        <Binding Source="0"/>
                                                        <Binding Source="0"/>
                                                        <Binding Path="ImageSource.Width" RelativeSource="{RelativeSource Self}"/>
                                                        <Binding Path="ImageSource.Height" RelativeSource="{RelativeSource Self}"/>
                                                    </MultiBinding>
                                                </ImageBrush.Viewport>
                                            </ImageBrush>
                                        </Border.Background>

                                        <ItemsControl x:Name="ManuallyPreparedList" VerticalAlignment="Top" HorizontalAlignment="Stretch" 
                                                          Style="{StaticResource ActionCellItemsControlStyle}"
                                                          ItemsSource="{Binding SelectedItem.ManuallyPreparedActions, ElementName=Tabs}" 
                                                          ls:AttachedProperties.InheritedTag="Prepared"
                                                          ItemTemplate="{StaticResource PreparedSpellCellTemplate}"/>
                                    </Border>

                                    <Image x:Name="PreparedSpellsSectionClosure" Source="{StaticResource PreparedSpellsBottom}" Stretch="None" Visibility="{Binding Visibility, ElementName=PreparedSpellsSection}"/>
                                </StackPanel>

                                <ls:LSScrollViewer x:Name="ClassPanelScrollableContent" Grid.Row="2" VerticalScrollBarVisibility="Auto" Margin="50,0,-50,0" Padding="-50,0,50,0">
                                    <StackPanel>
                                        <!-- Known spells section -->
                                        <ls:LSNineSliceImage x:Name="KnownSpellSection" ImageSource="{StaticResource SpellsBorder}" Slices="22,10,22,42" IconWidth="70" Padding="6,2,6,40" Visibility="{Binding Path=ItemsSource.Count, ElementName=SpellsCategories, Converter={StaticResource CountToVisibilityConverter}}">
                                            <StackPanel>
                                                <TextBlock x:Name="InnerSpellsTitle" ls:TextBlockFormatter.SourceText="{Binding Source='h062f5cf9gb2e5g4c0dgadc9g68898c250650',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource ActionGroupTitleStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="120,22,0,0" Visibility="Collapsed"/>

                                                <ItemsControl x:Name="SpellsCategories" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                                      ItemsSource="{Binding FilteredItems, ElementName=NonAlwaysPreparedSpellLevelsGroupFilter}" 
                                                                      AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}"
                                                                      ls:AttachedProperties.InheritedTag="HideFeatsAndAlwaysPrepared"/>

                                                <!-- Spells level up note -->
                                                <TextBlock x:Name="ReplaceableSpellsNote" ls:TextBlockFormatter.SourceText="{Binding Source=h6cbb2d29g46c1g4b0agb271gcb95f4e4b3f0, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource ActionGroupTitleStyle}" HorizontalAlignment="Center" Visibility="Collapsed" FontStyle="Italic" Margin="0,-10,0,0"/>
                                            </StackPanel>
                                        </ls:LSNineSliceImage>

                                        <!-- Feats -->
                                        <ItemsControl x:Name="FeatsList" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                          Style="{StaticResource PassiveCellItemsControlStyle}"
                                                          ItemsSource="{Binding FilteredItems, ElementName=ClassFeatsFilter}" 
                                                          ls:AttachedProperties.InheritedTag="ClassFeats" 
                                                          Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"/>

                                        <ItemsControl x:Name="TadpoleFeatsList" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                          Style="{StaticResource PassiveCellItemsControlStyle}"
                                                          ItemsSource="{Binding FilteredItems, ElementName=TadpoleFeatsFilter}" 
                                                          ls:AttachedProperties.InheritedTag="TadpoleFeats" 
                                                          Visibility="Collapsed"/>

                                        <!-- Initiations -->
                                        <ItemsControl x:Name="InitiationsList" 
                                                              ItemsSource="{Binding Initiations}" 
                                                              Visibility="Collapsed"
                                                              AlternationCount="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}}"
                                                              VerticalAlignment="Center" Margin="0,10,0,10">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>

                                            <ItemsControl.ItemContainerStyle>
                                                <Style TargetType="ContentPresenter">
                                                    <Setter Property="Width" Value="{Binding ActualWidth, ElementName=ClassPanelContent, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.5}"/>

                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel">
                                                            <Setter Property="Width" Value="Auto"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ItemsControl.ItemContainerStyle>

                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate>
                                                    <StackPanel x:Name="InitiationRoot" Width="{Binding ActualWidth, ElementName=ClassPanelContent, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.48}" HorizontalAlignment="Center">
                                                        <b:Interaction.Behaviors>
                                                            <ls:CollectionFilterBehavior x:Name="CantripGroupFilter" ItemsSource="{Binding ActionGroups}" Predicate="{Binding DataContext.CurrentPlayer.SelectedCharacter.CantripGroupPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                                            <ls:CollectionFilterBehavior x:Name="SpellLevelsGroupFilter" ItemsSource="{Binding ActionGroups}" Predicate="{Binding DataContext.CurrentPlayer.SelectedCharacter.SpellLevelsGroupPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                                        </b:Interaction.Behaviors>

                                                        <TextBlock Text="{Binding ClassName}" Margin="6,0,0,0" Foreground="{StaticResource LS_accent100TxtColor}"/>
                                                        <TextBlock Text="{Binding Source=h721ec81ag27c5g4744g8904g807a2248b782, Converter={StaticResource TranslatedStringConverter}}" FontSize="{DynamicResource ScaledSmallFontSize}" Margin="6,0,0,0" Foreground="{StaticResource LS_baseTxtColor}"/>

                                                        <Grid x:Name="InitiationCastInfo" Margin="0,10">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="*"/>
                                                                <ColumnDefinition Width="*"/>
                                                                <ColumnDefinition Width="*"/>
                                                            </Grid.ColumnDefinitions>

                                                            <ContentControl x:Name="CastAbilityContainer" Grid.Column="0" Style="{StaticResource CastInfoControlStyle}"
                                                            Visibility="{Binding DataContext, ElementName=CastAbility, Converter={StaticResource NullToCollapsedConverter}}">
                                                                <ContentControl.ToolTip>
                                                                    <ls:LSTooltip>
                                                                        <StackPanel>
                                                                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h3289692bg0388g4f68gad45g82b8fd0ffbf8, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>
                                                                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h91535f32g4f47g4d5bgbf59ge05726ecb96e, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}"/>
                                                                        </StackPanel>
                                                                    </ls:LSTooltip>
                                                                </ContentControl.ToolTip>
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Image x:Name="CastAbilityIcon" 
                                                                                   Source="{StaticResource ProficientIcon}" 
                                                                                   Stretch="None" 
                                                                                   VerticalAlignment="Center" 
                                                                                   Margin="-12,0,0,0"/>
                                                                    <Control x:Name="CastAbility" Template="{StaticResource AbilityShortDisplayName}" DataContext="{Binding Stats.SpellCastAbility}" VerticalAlignment="Center" Foreground="{StaticResource LS_tint100}" />
                                                                </StackPanel>
                                                            </ContentControl>

                                                            <ContentControl x:Name="SpellDCContainer" Grid.Column="1" Style="{StaticResource CastInfoControlStyle}"
                                                            Visibility="{Binding Text, ElementName=SpellDC, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                                                <ContentControl.ToolTip>
                                                                    <ls:LSTooltip Content="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellDifficultyCheck, RelativeSource={RelativeSource Mode=Self}}"/>
                                                                </ContentControl.ToolTip>
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Image x:Name="SpellDCIcon" 
                                                                                   Source="{StaticResource CastSavingIcon}" 
                                                                                   Stretch="None" 
                                                                                   VerticalAlignment="Center" 
                                                                                   Margin="-8,0,0,0"/>
                                                                    <TextBlock x:Name="SpellDC" 
                                                                                       Text="{Binding SpellDifficultyCheck.Value}" 
                                                                                       VerticalAlignment="Center"/>
                                                                </StackPanel>
                                                            </ContentControl>

                                                            <ContentControl x:Name="SpellAttackContainer" Grid.Column="2" Style="{StaticResource CastInfoControlStyle}"
                                                            Visibility="{Binding Text, ElementName=SpellAttackBonus, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                                                <ContentControl.ToolTip>
                                                                    <ls:LSTooltip Content="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellAttackBonus, RelativeSource={RelativeSource Mode=Self}}"/>
                                                                </ContentControl.ToolTip>
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Image x:Name="SpellAttackIcon"
                                                                                   Source="{StaticResource CastRollIcon}" 
                                                                                   Stretch="None" 
                                                                                   VerticalAlignment="Center" 
                                                                                   Margin="-10,0,0,0"/>
                                                                    <TextBlock x:Name="SpellAttackBonus" 
                                                                                       Text="{Binding SpellAttackBonus.Value, StringFormat={}{0:+#;-#;0}}" 
                                                                                       VerticalAlignment="Center"/>
                                                                </StackPanel>
                                                            </ContentControl>
                                                        </Grid>

                                                        <Grid x:Name="CantripsAndSpells" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                            <Image Source="{StaticResource SpellsBorderHalf}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top"/>

                                                            <StackPanel Orientation="Horizontal">
                                                                <ItemsControl x:Name="CantripList" VerticalAlignment="Center" Margin="-12,-8,0,8"
                                                                                      ItemsSource="{Binding FilteredItems, ElementName=CantripGroupFilter}" 
                                                                                      Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}" 
                                                                                      ls:AttachedProperties.InheritedTag="CompactView"
                                                                                      MaxWidth="264"/>

                                                                <ItemsControl x:Name="SpellsList" VerticalAlignment="Center" Margin="0,-8,0,8"
                                                                                      ItemsSource="{Binding FilteredItems, ElementName=SpellLevelsGroupFilter}" 
                                                                                      Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"
                                                                                      ls:AttachedProperties.InheritedTag="CompactView"
                                                                                      MaxWidth="200"/>

                                                                <Image x:Name="LongRestImage" Source="{StaticResource LongRestIcon}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" Margin="0,12,0,-12"/>
                                                            </StackPanel>
                                                        </Grid>
                                                    </StackPanel>

                                                    <DataTemplate.Triggers>
                                                        <DataTrigger Binding="{Binding FilteredItems[0].Actions[0].CooldownType, ElementName=SpellLevelsGroupFilter}" Value="UntilRest">
                                                            <Setter TargetName="LongRestImage" Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel">
                                                            <Setter TargetName="InitiationRoot" Property="Width" Value="Auto"/>
                                                        </DataTrigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>

                                        <!-- Actions -->
                                        <ItemsControl x:Name="ActionsList" HorizontalAlignment="Stretch" 
                                                              ItemsSource="{Binding FilteredItems, ElementName=CharacterActionGroupFilter}" 
                                                              Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"/>

                                        <!-- Class passives -->
                                        <ItemsControl x:Name="PassivesList" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                      Style="{StaticResource PassiveCellItemsControlStyle}"
                                                      ItemsSource="{Binding FilteredItems, ElementName=PassivesFilter}" 
                                                      ls:AttachedProperties.InheritedTag="Passives" 
                                                      Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"/>

                                        <ItemsControl x:Name="TadpolePassivesList" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                      Style="{StaticResource PassiveCellItemsControlStyle}"
                                                      ItemsSource="{Binding FilteredItems, ElementName=TadpolePassivesFilter}" 
                                                      ls:AttachedProperties.InheritedTag="TadpolePassives" 
                                                      Visibility="Collapsed"/>

                                        <!-- Search results -->
                                        <Image x:Name="SearchResultsSectionOpening" Source="{StaticResource ClassBorderEdges}" Stretch="None" Visibility="Collapsed" Margin="6,0,0,0"/>

                                        <Border x:Name="SearchResultsSection" Visibility="Collapsed" Margin="{Binding Margin, ElementName=SearchResultsSectionOpening}" Width="{Binding Source.Width, ElementName=SearchResultsSectionOpening}">
                                            <Border.Background>
                                                <ImageBrush ImageSource="{StaticResource ClassBorderCenter}" Stretch="Fill" TileMode="Tile" AlignmentY="Top" ViewportUnits="Absolute">
                                                    <ImageBrush.Viewport>
                                                        <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                                            <Binding Source="0"/>
                                                            <Binding Source="0"/>
                                                            <Binding Path="ImageSource.Width" RelativeSource="{RelativeSource Self}"/>
                                                            <Binding Path="ImageSource.Height" RelativeSource="{RelativeSource Self}"/>
                                                        </MultiBinding>
                                                    </ImageBrush.Viewport>
                                                </ImageBrush>
                                            </Border.Background>

                                            <StackPanel x:Name="SearchResults">
                                                <TextBlock x:Name="ResultsTitle" 
                                                               ls:TextBlockFormatter.SourceText="{Binding Source=hd3ed8394g34a6g4e76g9a43gcaf52ddb2dd4, Converter={StaticResource TranslatedStringConverter}}" 
                                                               Style="{StaticResource ActionGroupTitleStyle}" 
                                                               HorizontalAlignment="Left" VerticalAlignment="Center"
                                                               Visibility="{Binding Visibility, ElementName=Results}"
                                                               Margin="120,22,0,0"/>

                                                <ItemsControl x:Name="Results" VerticalAlignment="Top" HorizontalAlignment="Stretch" 
                                                                  Template="{StaticResource SpellbookActionGroup}" 
                                                                  ItemsSource="{Binding GeneratedItemsList, ElementName=FilteringContainerHolder}" 
                                                                  AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}"
                                                                  ItemsPanel="{StaticResource SpellbookItemsPanelTemplate}" 
                                                                  ItemContainerStyle="{StaticResource SpellCellGridItemContainerStyle}" 
                                                                  ItemTemplate="{StaticResource ActionGroupItemTemplate}"
                                                                  Visibility="{Binding Path=ItemsSource.Count, RelativeSource={RelativeSource Self}, Converter={StaticResource CountToVisibilityConverter}}"/>

                                                <Control x:Name="NoItemsFoundOverlay" Template="{StaticResource NoResultsFoundTemplate}" Visibility="Collapsed" Margin="0,40,0,0"/>

                                                <ls:LSButton x:Name="ClearFilter" HorizontalAlignment="Center" BoundEvent="UICancel" Command="ls:FilteringContainer.ClearFilterCommand" CommandTarget="{Binding ElementName=FilteringContainerHolder}" Margin="0,40,0,0">
                                                    <Button.Template>
                                                        <ControlTemplate TargetType="{x:Type ls:LSButton}">
                                                            <ControlTemplate.Resources>
                                                                <BitmapImage x:Key="ButtonBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_small_brown_d.png" />
                                                                <BitmapImage x:Key="ButtonPressedBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_small_brown_p.png" />
                                                                <BitmapImage x:Key="ButtonHoveredBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_small_brown_h.png" />
                                                            </ControlTemplate.Resources>
                                                            <Grid Background="Transparent">
                                                                <Image x:Name="bg" Source="{StaticResource ButtonBg}" Stretch="None"/>
                                                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h9b2ac696gf0c7g4cddg968bg364c67af8757, Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Source" Value="{StaticResource ButtonHoveredBg}" TargetName="bg"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Source" Value="{StaticResource ButtonPressedBg}" TargetName="bg"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Button.Template>
                                                </ls:LSButton>
                                            </StackPanel>
                                        </Border>

                                        <Image x:Name="SearchResultsSectionClosure" Source="{StaticResource ClassBorderEdges}" Stretch="None" RenderTransformOrigin="0.5, 0.5" Visibility="Collapsed" Margin="{Binding Margin, ElementName=SearchResultsSectionOpening}">
                                            <Image.RenderTransform>
                                                <ScaleTransform ScaleY="-1"/>
                                            </Image.RenderTransform>
                                        </Image>
                                    </StackPanel>
                                </ls:LSScrollViewer>
                            </Grid>
                        </ScrollViewer>
                    </Grid>

                    <!-- Search button -->
                    <ls:LSToggleButton x:Name="SearchToggle" Grid.Column="2" 
                                                   VerticalAlignment="Top" HorizontalAlignment="Left"
                                                   Template="{StaticResource ToggleIconButtonTemplate}" 
                                                   IsChecked="False" 
                                                   Margin="0,0,30,0"
                                                   Command="ls:FilteringContainer.ClearFilterCommand" CommandTarget="{Binding ElementName=FilteringContainerHolder}"
                                                   Height="{StaticResource TopBarHeight}">
                        <ls:LSToggleButton.Resources>
                            <ImageSource x:Key="ButtonUncheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_d.png</ImageSource>
                            <ImageSource x:Key="ButtonUncheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_h.png</ImageSource>
                            <ImageSource x:Key="ButtonUncheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_p.png</ImageSource>
                            <ImageSource x:Key="ButtonUncheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_disabled.png</ImageSource>
                            <ImageSource x:Key="ButtonCheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_d.png</ImageSource>
                            <ImageSource x:Key="ButtonCheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_h.png</ImageSource>
                            <ImageSource x:Key="ButtonCheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_p.png</ImageSource>
                            <ImageSource x:Key="ButtonCheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterSheet/btn_round_medium_disabled.png</ImageSource>
                            <ImageSource x:Key="IconUncheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_d.png</ImageSource>
                            <ImageSource x:Key="IconUncheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_h.png</ImageSource>
                            <ImageSource x:Key="IconUncheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_h.png</ImageSource>
                            <ImageSource x:Key="IconUncheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_magnifier_d.png</ImageSource>
                            <ImageSource x:Key="IconCheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel.png</ImageSource>
                            <ImageSource x:Key="IconCheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel_h.png</ImageSource>
                            <ImageSource x:Key="IconCheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel_h.png</ImageSource>
                            <ImageSource x:Key="IconCheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_cancel.png</ImageSource>
                            <System:Double x:Key="IconWidth">36</System:Double>
                            <System:Double x:Key="IconHeight">36</System:Double>
                        </ls:LSToggleButton.Resources>
                    </ls:LSToggleButton>
                </Grid>
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedItem.SpellBookType, ElementName=Tabs}" Value="Base">
                <Setter TargetName="RaceIcon" Property="Visibility" Value="Visible"/>
                <Setter TargetName="LevelText" Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
                            <Binding Path="Stats.Level.Value" />
                            <Binding Source=""/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>

                <Setter TargetName="SubClassName" Property="Text" Value="{Binding DataContext.CurrentPlayer.SelectedCharacter.Stats.Race.DisplayName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>

                <Setter TargetName="FeatsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=CharacterFeatsFilter}"/>
                <Setter TargetName="FeatsList" Property="ls:AttachedProperties.InheritedTag" Value="CharacterFeats"/>

                <Setter TargetName="InitiationsList" Property="Visibility" Value="{Binding Path=ItemsSource.Count, ElementName=InitiationsList, Converter={StaticResource CountToVisibilityConverter}}"/>
                <Setter TargetName="TadpoleActionsList" Property="Visibility" Value="{Binding Path=ItemsSource.Count, ElementName=TadpoleActionsList, Converter={StaticResource CountToVisibilityConverter}}"/>
                <Setter TargetName="TadpoleFeatsList" Property="Visibility" Value="{Binding Path=ItemsSource.Count, ElementName=TadpoleFeatsList, Converter={StaticResource CountToVisibilityConverter}}"/>
                <Setter TargetName="TadpolePassivesList" Property="Visibility" Value="{Binding Path=ItemsSource.Count, ElementName=TadpolePassivesList, Converter={StaticResource CountToVisibilityConverter}}"/>

                <Setter TargetName="CantripList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=NonFeatCantripGroupFilter}"/>
                <Setter TargetName="SpellsCategories" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=NonFeatOrAlwaysPreparedSpellLevelsGroupFilter}"/>
                <Setter TargetName="NonPreparableSpellsCategories" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=NonFeatSpellLevelsGroupFilter}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedItem.Class, ElementName=Tabs, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                <Setter TargetName="PageIcon" Property="DataContext" Value="{Binding SelectedItem.Class, ElementName=Tabs}"/>
                <Setter TargetName="PageIcon" Property="Style" Value="{DynamicResource ClassIconStyle}"/>
                <Setter TargetName="PageIcon" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedItem.SpellBookType, ElementName=Tabs}" Value="Tadpole">
                <!-- In KBM, tadpole info is part of the Base tab, so we're reusing this tab to act as the reactions' one, which doesn't exist -->
                <Setter TargetName="Reactions" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ClassPanel" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsChecked, ElementName=SearchToggle}" Value="True">
                <Setter TargetName="SubClassContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ClassResourcesContainer" Property="Visibility" Value="Collapsed"/>

                <Setter TargetName="ClassSectionOpening" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ClassSection" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ClassSectionClosure" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="KnownSpellSection" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FeatsList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="TadpoleFeatsList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="PassivesList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="InitiationsList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ActionsList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="TadpoleActionsList" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentFilter, ElementName=FilteringContainerHolder, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                <Setter TargetName="SearchResultsSectionOpening" Property="Visibility" Value="Visible"/>
                <Setter TargetName="SearchResultsSection" Property="Visibility" Value="Visible"/>
                <Setter TargetName="SearchResultsSectionClosure" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentFilter, ElementName=FilteringContainerHolder, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                    <Condition Binding="{Binding GeneratedItemsList.Count, ElementName=FilteringContainerHolder}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="NoItemsFoundOverlay" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding Visibility, ElementName=ClassActionsList}" Value="Visible"/>
                    <Condition Binding="{Binding Visibility, ElementName=CantripList}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CantripList" Property="Grid.ColumnSpan" Value="1"/>
                <Setter TargetName="ClassActionsList" Property="Grid.ColumnSpan" Value="1"/>
                <Setter TargetName="ClassActionsList" Property="Grid.Column" Value="1"/>
                <Setter TargetName="ClassActionsList" Property="Grid.Row" Value="0"/>

                <Setter TargetName="CantripList" Property="ls:AttachedProperties.InheritedTag" Value="HideFeatsAndResources"/>
                <Setter TargetName="ClassActionsList" Property="ls:AttachedProperties.InheritedTag" Value="HideResources"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem.Class, ElementName=Tabs, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                    <Condition Binding="{Binding SelectedItem.Class.CanLearnSpells, ElementName=Tabs}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="LearnSpellsButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="SpellsTitle" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding SelectedItem.Class.MustPrepareSpells, ElementName=Tabs, FallbackValue=False}" Value="False">
                <Setter TargetName="KnownSpellSection" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="NonPreparableSpellsCategories" Property="Visibility" Value="{Binding Path=ItemsSource.Count, ElementName=NonPreparableSpellsCategories, Converter={StaticResource CountToVisibilityConverter}, FallbackValue=Collapsed}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Visibility, ElementName=AlwaysPreparedList}" Value="Visible">
                <Setter TargetName="SpellsTitle" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Visibility, ElementName=PreparedSpellsSection}" Value="Visible">
                <Setter TargetName="SpellsTitle" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Visibility, ElementName=NonPreparableSpellsCategories}" Value="Visible">
                <Setter TargetName="SpellsTitle" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=PreparedSpellsSection}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=KnownSpellSection}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="InnerSpellsTitle" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Visibility, ElementName=KnownSpellSection}" Value="Visible">
                <Setter TargetName="ClassSectionClosure" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Visibility, ElementName=PreparedSpellsSectionClosure}" Value="Visible">
                <Setter TargetName="SearchResultsSectionOpening" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=CantripList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=ClassActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=TadpoleActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=MetamagicList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=SpellsTitle}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=AlwaysPreparedList}" Value="Collapsed"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ClassSectionOpening" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ClassSection" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ClassSectionClosure" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ItemsSource.Count, ElementName=SpellsCategories, Converter={StaticResource GreaterThanConverter},ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding Path=ItemsSource.Count, ElementName=ManuallyPreparedList, Converter={StaticResource GreaterThanConverter},ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PreparedSpellsSection" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <!-- In case cantrips and actions section is collapsed, we need to propagate the margin to make sure elements will be set in the proper position -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=ClassActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=CantripList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=TadpoleActionsList}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TadpoleActionsList" Property="Margin" Value="{Binding Margin, ElementName=CantripsAndActions}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=ClassActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=CantripList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=TadpoleActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=MetamagicList}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MetamagicList" Property="Margin" Value="{Binding Margin, ElementName=CantripsAndActions}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=ClassActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=CantripList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=TadpoleActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=MetamagicList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=SpellsTitle}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="SpellsTitle" Property="Margin" Value="{Binding Margin, ElementName=CantripsAndActions}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=ClassActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=CantripList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=TadpoleActionsList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=MetamagicList}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=SpellsTitle}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=AlwaysPreparedList}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="AlwaysPreparedList" Property="Margin" Value="{Binding Margin, ElementName=CantripsAndActions}"/>
            </MultiDataTrigger>

            <!-- Scrolling: If there're spells to prepare, scroll only from the prepared spells section -->
            <DataTrigger Binding="{Binding SelectedItem.Class.MustPrepareSpells, ElementName=Tabs, FallbackValue=False}" Value="True">
                <Setter TargetName="WholePanelScrollViewerRoot" Property="MaxHeight" Value="1200"/>
            </DataTrigger>

            <!-- Scrolling: If there's no spell to prepare, scroll the whole content instead -->
            <DataTrigger Binding="{Binding SelectedItem.Class.MustPrepareSpells, ElementName=Tabs, FallbackValue=False}" Value="False">
                <Setter TargetName="ClassPanelScrollableContent" Property="Grid.Row" Value="1"/>
                <Setter TargetName="ClassPanelScrollableContent" Property="ScrollWheelEnabled" Value="False"/>
            </DataTrigger>

            <!-- Replaceable spells message -->
            <DataTrigger Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Bard">
                <Setter TargetName="ReplaceableSpellsNote" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Warlock">
                <Setter TargetName="ReplaceableSpellsNote" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ReplaceableSpellsNote" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source=h4e8ccd4cgd056g41e3g95a5g29b78126e9a2, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Ranger">
                <Setter TargetName="ReplaceableSpellsNote" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Sorcerer">
                <Setter TargetName="ReplaceableSpellsNote" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=KnownSpellSection}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=ReplaceableSpellsNote}" Value="Visible"/>
                    <Condition Binding="{Binding Visibility, ElementName=NonPreparableSpellsCategories}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="NonPreparableReplaceableSpellsNote" Property="Visibility" Value="Visible"/>
                <Setter TargetName="NonPreparableReplaceableSpellsNote" Property="ls:TextBlockFormatter.SourceText" Value="{Binding (ls:TextBlockFormatter.SourceText), ElementName=ReplaceableSpellsNote}"/>
            </MultiDataTrigger>

            <!-- Non-caster classes -->
            <DataTrigger Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Monk">
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Barbarian">
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Rogue"/>
                    <Condition Binding="{Binding SelectedItem.Class.SubclassIDString, ElementName=Tabs}" Value=""/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Rogue"/>
                    <Condition Binding="{Binding SelectedItem.Class.SubclassIDString, ElementName=Tabs}" Value="Thief"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Rogue"/>
                    <Condition Binding="{Binding SelectedItem.Class.SubclassIDString, ElementName=Tabs}" Value="Assassin"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Fighter"/>
                    <Condition Binding="{Binding SelectedItem.Class.SubclassIDString, ElementName=Tabs}" Value=""/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Fighter"/>
                    <Condition Binding="{Binding SelectedItem.Class.SubclassIDString, ElementName=Tabs}" Value="BattleMaster"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem.Class.IDString, ElementName=Tabs}" Value="Fighter"/>
                    <Condition Binding="{Binding SelectedItem.Class.SubclassIDString, ElementName=Tabs}" Value="Champion"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CastAbilityContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellDCContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellAttackContainer" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <!-- Party Panel view -->
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel">
                <Setter TargetName="MultiClassSpellbookContainer" Property="Margin" Value="0,0,0,0"/>

                <Setter TargetName="NavigationLeftButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="NavigationRightButton" Property="Visibility" Value="Visible"/>

                <Setter TargetName="TopBar" Property="Margin" Value="0,0,0,20"/>

                <Setter TargetName="ClassPanelCentralColumn" Property="Width" Value="684"/>
                <Setter TargetName="SubClassContainer" Property="Grid.ColumnSpan" Value="5"/>
                <Setter TargetName="BarLevelContainer" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ClassResourcesContainer" Property="Grid.Row" Value="1"/>
                <Setter TargetName="ClassResourcesContainer" Property="Grid.Column" Value="0"/>
                <Setter TargetName="ClassResourcesContainer" Property="Grid.ColumnSpan" Value="3"/>
                <Setter TargetName="CastAbilityContainer" Property="Grid.Row" Value="1"/>
                <Setter TargetName="SpellDCContainer" Property="Grid.Row" Value="1"/>
                <Setter TargetName="SpellAttackContainer" Property="Grid.Row" Value="1"/>

                <Setter TargetName="InfoPanel" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SearchToggle" Property="Visibility" Value="Collapsed"/>

                <Setter TargetName="InnerSearchToggle" Property="Visibility" Value="Visible"/>
                <Setter TargetName="SearchToggle" Property="IsChecked" Value="{Binding IsChecked, ElementName=InnerSearchToggle}"/>

                <Setter TargetName="InitiationsList" Property="HorizontalAlignment" Value="Center"/>

                <Setter TargetName="Background" Property="Source" Value="{StaticResource SpellbookBg_Small}"/>
                <Setter TargetName="Background" Property="Stretch" Value="Fill"/>
                <Setter TargetName="Background" Property="Margin" Value="-8,-94,-8,-8"/>

                <Setter TargetName="ClassPanel" Property="MaxHeight" Value="1476"/>

                <Setter TargetName="ClassSectionOpening" Property="Source" Value="{StaticResource ClassBorderEdges_Small}"/>
                <Setter TargetName="ClassSectionOpening" Property="Margin" Value="-6 ,0,6,0"/>
                <Setter TargetName="ClassSection" Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="{StaticResource ClassBorderCenter_Small}" Stretch="Fill" TileMode="Tile" AlignmentY="Top" ViewportUnits="Absolute">
                            <ImageBrush.Viewport>
                                <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                    <Binding Source="0"/>
                                    <Binding Source="0"/>
                                    <Binding Path="ImageSource.Width" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ImageSource.Height" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </ImageBrush.Viewport>
                        </ImageBrush>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="ClassSectionClosure" Property="Source" Value="{StaticResource ClassBorderEdges_Small}"/>

                <Setter TargetName="PreparedSpellsSectionOpening" Property="Source" Value="{StaticResource PreparedSpellsTop_Small}"/>
                <Setter TargetName="PreparedSpellsSection" Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="{StaticResource PreparedSpellsCenter_Small}" Stretch="Fill" TileMode="Tile" AlignmentY="Top" ViewportUnits="Absolute">
                            <ImageBrush.Viewport>
                                <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                    <Binding Source="0"/>
                                    <Binding Source="0"/>
                                    <Binding Path="ImageSource.Width" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ImageSource.Height" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </ImageBrush.Viewport>
                        </ImageBrush>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="PreparedSpellsSectionClosure" Property="Source" Value="{StaticResource PreparedSpellsBottom_Small}"/>

                <Setter TargetName="KnownSpellSection" Property="ImageSource" Value="{StaticResource SpellsBorder_Small}"/>
                <Setter TargetName="KnownSpellSection" Property="Slices" Value="24,20,44,44"/>
                <Setter TargetName="KnownSpellSection" Property="Width" Value="690"/>
                <Setter TargetName="KnownSpellSection" Property="Margin" Value="-6,0,6,0"/>

                <Setter TargetName="SearchResultsSectionOpening" Property="Source" Value="{StaticResource ClassBorderEdges_Small}"/>
                <Setter TargetName="SearchResultsSectionOpening" Property="Margin" Value="0"/>
                <Setter TargetName="SearchResultsSection" Property="Background" Value="{x:Null}"/>
                <Setter TargetName="SearchResultsSection" Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="{StaticResource ClassBorderCenter_Small}" Stretch="Fill" TileMode="Tile" AlignmentY="Top" ViewportUnits="Absolute">
                            <ImageBrush.Viewport>
                                <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                    <Binding Source="0"/>
                                    <Binding Source="0"/>
                                    <Binding Path="ImageSource.Width" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ImageSource.Height" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </ImageBrush.Viewport>
                        </ImageBrush>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="SearchResultsSectionClosure" Property="Source" Value="{StaticResource ClassBorderEdges_Small}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel"/>
                    <Condition Binding="{Binding Visibility, ElementName=SubClassContainer}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=ClassResourcesContainer}" Value="Collapsed"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CastAbilityContainer" Property="Grid.Row" Value="0"/>
                <Setter TargetName="SpellDCContainer" Property="Grid.Row" Value="0"/>
                <Setter TargetName="SpellAttackContainer" Property="Grid.Row" Value="0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel"/>
                    <Condition Binding="{Binding Visibility, ElementName=SubClassContainer}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=CastAbilityContainer}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=SpellDCContainer}" Value="Collapsed"/>
                    <Condition Binding="{Binding Visibility, ElementName=SpellAttackContainer}" Value="Collapsed"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ClassResourcesContainer" Property="Grid.Row" Value="0"/>
                <Setter TargetName="ClassResourcesContainer" Property="Grid.Column" Value="1"/>
            </MultiDataTrigger>

            <!-- JMoya: We still don't know if feats will make it or not, so design asked to hide them for now while they decide -->
            <DataTrigger Binding="{Binding Source='True'}" Value="True">
                <Setter TargetName="FeatsList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="TadpoleFeatsList" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ============================================================================ -->
    <!-- ===================== CHARACTER INFORMATION TEMPLATES ====================== -->
    <!-- ============================================================================ -->



    <!--HEADER LABEL STYLES-->
    <ControlTemplate x:Key="decoratedHeader">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <StackPanel.Resources>
                <BitmapImage x:Key="decor_header">pack://application:,,,/GustavNoesisGUI;component/Assets/CC/decor_header.png</BitmapImage>
            </StackPanel.Resources>
            <Image Source="{StaticResource decor_header}" Stretch="None"/>
            <ContentPresenter Margin="30,0,30,0"/>
            <Image Source="{StaticResource decor_header}" Stretch="None">
                <Image.RenderTransform>
                    <ScaleTransform ScaleX="-1" CenterX="42"/>
                </Image.RenderTransform>
            </Image>
        </StackPanel>
    </ControlTemplate>
    
    <Style x:Key="BaseTitleStyle" TargetType="ContentControl">
        <Style.Resources>
            <Style TargetType="TextBlock" >
                <Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
                <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
            </Style>
        </Style.Resources>
        <Setter Property="Margin" Value="0,20,0,10"/>
        <Setter Property="Template" Value="{StaticResource decoratedHeader}"/>
    </Style>

    <!--=== ABILITIES TEMPLATE ===-->
    <Style x:Key="AbilitiesGridStyle" TargetType="ItemsControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>

                <DataTemplate DataType="ls:VMAbility">
                    <Grid x:Name="base" Background="Transparent" Width="76" Height="124" ToolTip="{StaticResource ManagedTooltip}">
                        <Image x:Name="SavingThrowIcon" Visibility="{Binding HasSavingThrowProficiency, Converter={StaticResource BoolToVisibleConverter}}" HorizontalAlignment="Center" VerticalAlignment="Bottom"
Source="{StaticResource SavingThrowDice}" Opacity="1" Margin="0,52,0,0">
                            <Image.Effect>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                            </Image.Effect>
                        </Image>
                        <StackPanel>
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontSize" Value="{DynamicResource ScaledDefaultFontSize}"/>
                                </Style>
                            </StackPanel.Resources>
                            <Image x:Name="PrimaryAbillity" Visibility="Hidden" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/proficient_ability.png" Stretch="None" Margin="0,0,0,-8">
                                <Image.ToolTip>
                                    <ls:LSTooltip IsHitTestVisible="False" ContentTemplate="{StaticResource PrimaryAbilityTooltipContentTemplate}" Style="{StaticResource ManagedTooltipStyle}"/>
                                </Image.ToolTip>
                            </Image>
                            <Control x:Name="attrName" Template="{StaticResource AbilityShortDisplayName}"  FontSize="{DynamicResource ScaledSmallishFontSize}" Foreground="{StaticResource LS_baseTxtColor}" HorizontalAlignment="Center"/>

                            <TextBlock x:Name="value" ls:TextBlockFormatter.SourceText="{Binding Value}" FontSize="{DynamicResource ScaledDefaultFontSize}" HorizontalAlignment="Center" Foreground="{StaticResource LS_tint100}"/>
                        </StackPanel>

                    </Grid>
                    <DataTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="base">
                            <Setter TargetName="base" Property="Background" Value="{StaticResource RowBG_h}"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding IsPrimary}" Value="True">
                            <Setter TargetName="PrimaryAbillity" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ===== INFOTIP TEMPLATE=====-->

    <ControlTemplate x:Key="CharacterSheetInfotipTemplate" TargetType="Control">
        <Grid>
            <Image x:Name="bg" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/btn_diamond_d.png"/>
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="i" FontSize="{StaticResource SmallFontSize}" FontStyle="Italic" Foreground="{StaticResource LS_tint100}" IsHitTestVisible="False"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/btn_diamond_h.png"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ===== SORTLIST TEMPLATE=====-->
    <ControlTemplate x:Key="SortListTemplate" TargetType="Control">
        <Grid x:Name="SortListRoot">
            <Image x:Name="bg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/sorting_bg.png" Stretch="None"/>
            <TextBlock Text="{Binding Source='h9414328dgbabeg4602g82c1g4c947c1c8e34',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_accent25TxtColor}" FontSize="{StaticResource SmallishFontSize}" Margin="40,20,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <ItemsControl ItemsSource="{Binding InventorySortOptions}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="40,80,0,0">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <ls:LSButton x:Name="SortButton" Command="{Binding DataContext.SelectSortCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Padding="0" IsEnabled="{Binding IsEnabled}">
                            <ls:LSButton.CommandParameter>
                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                    <Binding Path="."/>
                                    <Binding Path="DataContext" ElementName="SortListRoot"/>
                                    <Binding Path="IsChecked" ElementName="ChangePartyContextButton" FallbackValue="False"/>
                                </MultiBinding>
                            </ls:LSButton.CommandParameter>

                            <ls:LSButton.Template>
                                <ControlTemplate TargetType="ls:LSButton">
                                    <Grid x:Name="Entry">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Image x:Name="bg" Grid.Column="0" Grid.ColumnSpan="2" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_d.png" Stretch="None"/>
                                        <Image x:Name="icon" Grid.Column="0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_bullet_d.png" Stretch="None" Margin="20,0,0,0"/>
                                        <TextBlock x:Name="text" Grid.Column="1" Text="{Binding Name}" FontSize="{StaticResource MediumFontSize}" Foreground="{StaticResource LS_accent25TxtColor}" Margin="20,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="bg" Property="Source" Value="/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_h.png"/>
                                            <Setter TargetName="icon" Property="Source" Value="/GustavNoesisGUI;component/Assets/CharacterPanel/ico_bullet_h.png"/>
                                            <Setter TargetName="text" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="Entry" Property="Opacity" Value="0.85"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ls:LSButton.Template>

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">
                                    <b:ChangePropertyAction TargetName="SortToggleButton" PropertyName="IsChecked" Value="False"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Grid>
    </ControlTemplate>

    <!--===== EXTEND INVENTORY BUTTON TEMPLATE =====-->
    <ControlTemplate x:Key="ExtendInventoryButtonTemplate" TargetType="ToggleButton">
        <Grid ToolTipService.Placement="Top">
            <Grid.ToolTip>
                <ls:LSTooltip>
                    <TextBlock x:Name="TooltipContent" Text="{Binding Source='ha2778a7bg070fg47bag9dd0gc81a8b236863', Converter={StaticResource TranslatedStringConverter}}"/>
                </ls:LSTooltip>
            </Grid.ToolTip>

            <Image x:Name="btn" Source="{StaticResource btnRoundImg}" Stretch="None"/>
            <Image x:Name="icon" Width="60" Height="60" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_expand.png" Stretch="Uniform"/>

            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseEnter">
                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="btn" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/btn_round_h.png"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="btn" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/btn_round_p.png"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_contract.png"/>
                <Setter TargetName="TooltipContent" Property="Text" Value="{Binding Source='h09158b7dg24c7g4144ga77fg11363585d7b4', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- ===== ACHOLDER TEMPLATE=====-->
    <ControlTemplate x:Key="ACHolder">
        <Grid Name="root" DataContext="{Binding Stats.ArmorClass}" Background="Transparent">
            <Grid.Resources>
                <BitmapImage x:Key="ACShield">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EQSlots_AC.png</BitmapImage>
            </Grid.Resources>
            <Grid.ToolTip>
                <ls:LSTooltip Content="{Binding Path=DataContext, ElementName=root}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=root}"/>
            </Grid.ToolTip>
            <Image Stretch="None" Source="{StaticResource ACShield}">
                <Image.Effect>
                    <DropShadowEffect BlurRadius="20" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                </Image.Effect>
            </Image>
            <StackPanel VerticalAlignment="Center" Margin="0,-18,0,0">
                <TextBlock Text="{Binding Source='hc2ca2d88gc99cg4361g801fgd34ecdb85f19',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_tint100}" FontSize="{StaticResource SmallFontSize}" HorizontalAlignment="Center"/>
                <TextBlock Foreground="{StaticResource LS_tint100}" FontSize="{StaticResource ScaledTitleFontSize}" Text="{Binding Value}" HorizontalAlignment="Center" Margin="0,-16"/>
            </StackPanel>
        </Grid>
    </ControlTemplate>

    <!-- ===== CONDITIONS LIST TEMPLATE =====-->
    <DataTemplate x:Key="StatusListItemTemplate" DataType="{x:Type ls:VMStatus}">
        <DataTemplate.Resources>
            <BitmapImage x:Key="statusBG" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/statusBG.png"/>
            <BitmapImage x:Key="statusBG_fill" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/statusBG_fill.png"/>
        </DataTemplate.Resources>
        <Border Name="root" Style="{StaticResource RowBG_d}" ToolTip="{StaticResource ManagedTooltip}">
            <Grid Height="56">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid Margin="8,4,8,4">
                    <Image Source="{StaticResource statusBG}" Stretch="Uniform" VerticalAlignment="Center"/>

                    <ls:LSPie Value="{Binding RemainingPercentage}" SweepDirection="Clockwise">
                        <Image Source="{StaticResource statusBG_fill}" Stretch="Uniform"/>
                    </ls:LSPie>

                    <Rectangle Style="{StaticResource SummaryRoundIcons}" Fill="{Binding Icon}"/>

                    <TextBlock Text="{Binding Duration}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,-12" Foreground="{StaticResource LS_PrimaryColor}"
                               noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="6" Style="{StaticResource NarrowTooltipModifierText}"
                               Visibility="{Binding Duration, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=0}" FontSize="{DynamicResource ScaledSmallFontSize}"/>
                </Grid>
                <TextBlock x:Name="NameLabel" Grid.Column="1" Text="{Binding Name}" Style="{StaticResource SummaryListText}" TextTrimming="CharacterEllipsis"/>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" SourceName="root" Value="True">
                <Setter TargetName="root" Property="Background" Value="{StaticResource RowBG_h}"/>
                <Setter TargetName="NameLabel" Property="Foreground" Value="{StaticResource LS_tint100}"/>
            </Trigger>
        </DataTemplate.Triggers>

    </DataTemplate>

    <!-- ===== RESISTANCES ICONS =====-->
    <ControlTemplate x:Key="ResistanceIcon" TargetType="Control">
        <Image x:Name="Icon" Stretch="None" Source="{x:Null}"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DamageType}" Value="Slashing">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_slashing.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Piercing">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_piercing.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Bludgeoning">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_blunt.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Acid">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_acid.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Thunder">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_thunder.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Necrotic">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_necrotic.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Fire">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_fire.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Lightning">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_lightning.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Cold">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_cold.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Psychic">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_psychic.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Poison">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_poison.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Radiant">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_radiant.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Force">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_force.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DamageType}" Value="Spell">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resistance_spell.png"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ===== RESISTANCES GRID TEMPLATE=====-->
    <ControlTemplate x:Key="ResistancesGridTemplate">
        <Grid>
            <ItemsControl x:Name="Resistances" HorizontalAlignment="Center" ItemsSource="{Binding Stats.Resistances}" Visibility="{Binding Stats.NumActiveResistances, Converter={StaticResource CountToVisibilityConverter}}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <DataTemplate.Resources>
                            <BitmapImage x:Key="hourglass" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_resistance_hourglass.png"/>
                        </DataTemplate.Resources>

                        <Grid x:Name="Object" Tag="Immune" ToolTip="{StaticResource ManagedTooltip}" Background="Transparent">
                            <Grid HorizontalAlignment="Center" Margin="0,10,0,0">
                                <Image x:Name="ImmuneShield" Source="{StaticResource ImmuneShield}" Stretch="None" Visibility="Hidden"/>
                                <Control x:Name="TypIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Template="{StaticResource ResistanceIcon}" />
                            </Grid>

                            <Image x:Name="NonMagicalArrow" HorizontalAlignment="Center" VerticalAlignment="Top" Source="{StaticResource ResistantNonMagical}" Stretch="None" Margin="0,-2,0,0" Visibility="Collapsed"/>
                            <Image x:Name="MagicalArrow" HorizontalAlignment="Center" VerticalAlignment="Top" Source="{StaticResource ResistantMagical}" Stretch="None" Margin="0,-14,0,0" Visibility="Collapsed"/>

                            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Bottom" Orientation="Horizontal" Visibility="{Binding Duration, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,-10" IsHitTestVisible="False">
                                <Image Stretch="None" Source="{StaticResource hourglass}" VerticalAlignment="Center" Margin="0,0,-4,0"/>
                                <TextBlock Text="{Binding Duration}" Foreground="{StaticResource LS_tint100}" FontFamily="{StaticResource DefaultFont}" FontSize="{StaticResource SmallishFontSize}" VerticalAlignment="Center"/>
                            </StackPanel>
                        </Grid>

                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Full}" Value="Immune">
                                <Setter TargetName="ImmuneShield" Property="Visibility" Value="Visible"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding NonMagical}" Value="Resistant">
                                <Setter TargetName="NonMagicalArrow" Property="Visibility" Value="Visible"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding Magical}" Value="Resistant">
                                <Setter TargetName="MagicalArrow" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MagicalArrow" Property="Margin" Value="0,-2,0,0"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding Full}" Value="Resistant">
                                <Setter TargetName="MagicalArrow" Property="Margin" Value="0,-14,0,0"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding Full}" Value="Vulnerable">
                                <Setter TargetName="NonMagicalArrow" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="NonMagicalArrow" Property="Source" Value="{StaticResource Vulnerable}"/>
                            </DataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Full}" Value="None"/>
                                    <Condition Binding="{Binding NonMagical}" Value="None"/>
                                    <Condition Binding="{Binding Magical}" Value="None"/>
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="Object" Property="Visibility" Value="Collapsed"/>
                            </MultiDataTrigger>

                            <DataTrigger Binding="{Binding Duration}" Value="1">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard x:Name="StatusEndingStoryboard">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Object" Storyboard.TargetProperty="Opacity" AutoReverse="True" RepeatBehavior="Forever">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>

                                                <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="1"/>

                                                <EasingDoubleKeyFrame KeyTime="0:0:1.25" Value="0.6">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>

                                                <EasingDoubleKeyFrame KeyTime="0:0:1.75" Value="0.6"/>

                                                <EasingDoubleKeyFrame KeyTime="0:0:2.25" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>

                                                <EasingDoubleKeyFrame KeyTime="0:0:2.75" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="StatusEndingStoryboard"/>
                                </DataTrigger.ExitActions>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>

            <Grid Name="ResistanceEmpty" Visibility="{Binding Visibility, ElementName=Resistances, Converter={StaticResource InvertVisibilityConverter}}">
                <Image HorizontalAlignment="Center" Stretch="None" Source="{StaticResource NoResistanceIcon}"/>
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource LS_accent100TxtColor}" Text="{Binding Source='h529efdfdgda98g4ed3g8d1eg46cbf1d0a5e3', Converter={StaticResource TranslatedStringConverter}}"/>
            </Grid>
        </Grid>
    </ControlTemplate>

    <!-- ===== RESISTANCES LIST TEMPLATE=====-->
    <ControlTemplate x:Key="ResistanceListTemplate">
        <Grid>
            <Grid Name="ResistanceIcoList"  Visibility="{Binding Stats.NumActiveResistances, Converter={StaticResource CountToVisibilityConverter}}">
                <ItemsControl ItemsSource="{Binding Stats.Resistances}" Margin="0,0">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid x:Name="ResistanceRow" Visibility="Collapsed" ToolTip="{StaticResource ManagedTooltip}" Height="58">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <Image Grid.Column="0" Style="{DynamicResource ResistanceImage}"/>

                                <TextBlock x:Name="ResistanceName" Foreground="{StaticResource LS_baseTxtColor}" Style="{DynamicResource DamageTypeNameStyle}" Grid.Column="1" VerticalAlignment="Center" TextAlignment="Left" Margin="8,0,0,0" FontSize="{DynamicResource ScaledSmallFontSize}" TextTrimming="CharacterEllipsis"/>

                                <TextBlock x:Name="ResistanceType" Foreground="{StaticResource LS_baseTxtColor}" Text="- -" Grid.Column="2" VerticalAlignment="Center" TextAlignment="Right" Margin="0,0,8,0" FontSize="{DynamicResource ScaledSmallFontSize}" TextTrimming="CharacterEllipsis"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding Full}" Value="Immune">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='h1198786dg4063g4010g83d9g8cbd36553077',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                    <Setter TargetName="ResistanceName" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding NonMagical}" Value="Immune">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='h1198786dg4063g4010g83d9g8cbd36553077',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                    <Setter TargetName="ResistanceName" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Magical}" Value="Immune">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='h1198786dg4063g4010g83d9g8cbd36553077',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                    <Setter TargetName="ResistanceName" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Full}" Value="Resistant">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='h27558299g1099g485eg95f0g4a319139f8f2',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_bonusTxtColor}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding NonMagical}" Value="Resistant">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='h27558299g1099g485eg95f0g4a319139f8f2',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_bonusTxtColor}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Magical}" Value="Resistant">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='h27558299g1099g485eg95f0g4a319139f8f2',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_bonusTxtColor}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Full}" Value="Vulnerable">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='hb710bce5g9017g4c1bg9330g20a891ce14f6',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding NonMagical}" Value="Vulnerable">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='hb710bce5g9017g4c1bg9330g20a891ce14f6',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Magical}" Value="Vulnerable">
                                    <Setter TargetName="ResistanceRow" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ResistanceType" Property="Text" Value="{Binding Source='hb710bce5g9017g4c1bg9330g20a891ce14f6',Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Setter TargetName="ResistanceType" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>

                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Vertical"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </Grid>
            <Grid Name="ResistanceEmpty" Visibility="{Binding Visibility, ElementName=ResistanceIcoList, Converter={StaticResource InvertVisibilityConverter}}">
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Source='h529efdfdgda98g4ed3g8d1eg46cbf1d0a5e3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource DetailedListText}"/>
            </Grid>
        </Grid>
    </ControlTemplate>

    <!-- ===== PASSIVE FEATURES TEMPLATE=====-->
    <DataTemplate x:Key="FeaturesListItemTemplate" DataType="{x:Type ls:VMPassive}">
        <Border Name="root" Style="{StaticResource RowBG_d}" ToolTip="{StaticResource ManagedTooltip}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="Icon" Grid.Column="0" Fill="{Binding Icon}" Style="{StaticResource SummaryRoundIcons}" Margin="8,4,8,4"/>
                <TextBlock x:Name="NameLabel" Grid.Column="1" Text="{Binding Name}" Style="{StaticResource SummaryListText}" TextTrimming="CharacterEllipsis"/>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" SourceName="root" Value="True">
                <Setter TargetName="root" Property="Background" Value="{StaticResource RowBG_h}"/>
                <Setter TargetName="NameLabel" Property="Foreground" Value="{StaticResource LS_tint100}"/>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--===== PLAYER MULTICLASS TEMPLATE =====-->
    <ControlTemplate x:Key="PlayerMultiClass">
        <ItemsControl ItemsSource="{Binding Stats.ClassList}" AlternationCount="{Binding Stats.ClassList.Count}" HorizontalAlignment="Center">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True" MaxWidth="{StaticResource ExaminePanelWidth}"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="ls:VMClass">
                    <StackPanel x:Name="class" Orientation="Horizontal" >
                        <StackPanel.Resources>
                            <Style TargetType="TextBlock">
                                <Setter Property="FontSize" Value="{DynamicResource ScaledDefaultFontSize}"/>
                            </Style>
                        </StackPanel.Resources>
                        <StackPanel.Tag>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
                                <Binding Path="AlternationCount" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}"/>
                            </MultiBinding>
                        </StackPanel.Tag>

                        <TextBlock x:Name="classInfo">
                            <TextBlock.ToolTip>
                                <ls:LSTooltip IsHitTestVisible="False" Content="{Binding Path=DataContext.ClassDescription, RelativeSource={RelativeSource TemplatedParent}}" ls:AttachedProperties.InheritedTag="{Binding Path=DataContext.ClassDisplayName, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource HeaderBodyLocaStringTemplate}"/>
                            </TextBlock.ToolTip>
                            <TextBlock.Text>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                                    <Binding Path="DataContext.Level.Value" RelativeSource="{RelativeSource Mode=Self}"/>
                                    <Binding Path="DataContext.ClassDisplayName" RelativeSource="{RelativeSource Mode=Self}"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                        <TextBlock x:Name="separator" Text="{Binding Source='hd64bfe4cgadadg4468g8b0ag70330ffc717c', Converter={StaticResource TranslatedStringConverter}}"/>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Tag, ElementName=class}" Value="True">
                            <Setter TargetName="separator" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </ControlTemplate>

    <!--===== WEAPON PROFICIENCY ICONS =====-->
    <Style x:Key="EquipmentProficiencyIconStyle" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_shortSword.png"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Battleaxes">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_battleAxe.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Clubs">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_club.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Daggers">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_dagger.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Darts">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_dart.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Flails">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_flail.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Glaives">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_glaive.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Greataxes">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_greatAxe.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Greatclubs">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_greatClub.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Greatswords">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_greatSword.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Halberds">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_halbard.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Handaxes">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_handAxe.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="HandCrossbows">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_handCrossbow.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="HeavyArmor">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_heavyArmour.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="HeavyCrossbows">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_heavyCrossbow.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Javelins">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_javelin.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="LightArmor">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_lightArmour.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="LightCrossbows">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_lightCrossbow.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="LightHammers">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_lightHammer.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Longbows">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_longBow.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Longswords">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_longSword.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Maces">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_mace.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Mauls">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_maul.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="MediumArmor">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_mediumArmour.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Morningstars">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_morningStar.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Pikes">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_pike.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Quarterstaffs">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_quarterstaff.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Rapiers">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_rapier.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Scimitars">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_scimitar.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Shields">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_shield.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Shortbows">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_shortBow.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Shortswords">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_shortSword.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Sickles">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_sickle.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Slings">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_sling.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Spears">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_spear.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Tridents">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_trident.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Warhammers">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_warhammer.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Warpicks">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ProficiencyIcons/ico_proficiency_warPick.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--===== WEAPON PROFICIENCY TEXT BLOCK =====-->
    <Style x:Key="EquipmentProficiencyNameStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="{Binding Source='h0715431fge95eg434dga34eg313e58a76bee',Converter={StaticResource TranslatedStringConverter}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ProficiencyType}" Value="Battleaxes">
                <Setter Property="Text" Value="{Binding Source='h0987de21g7f18g46bdg96b6g251f0d886fd8',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Clubs">
                <Setter Property="Text" Value="{Binding Source='hf7ee4cf2g8054g4cecgaf42g00e26e4c6301',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Daggers">
                <Setter Property="Text" Value="{Binding Source='ha9bc5c71gf7fdg4f77gad7eg14da6c8ecfc2',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Darts">
                <Setter Property="Text" Value="{Binding Source='hf8205efdgf1f5g4581g8391g829af9b98138',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Flails">
                <Setter Property="Text" Value="{Binding Source='hf61bb53cg6987g4c34gbaf3g008e491dd1bd',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Glaives">
                <Setter Property="Text" Value="{Binding Source='h899d4afbgabdag433ag924ag1aa328117d8a',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Greataxes">
                <Setter Property="Text" Value="{Binding Source='h9430a867gd49ag48c8g9900gc945e3326765',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Greatclubs">
                <Setter Property="Text" Value="{Binding Source='hec8a15degd33fg4fdagaf70gf0f1c9dd53e9',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Greatswords">
                <Setter Property="Text" Value="{Binding Source='h8d8817a2gf20dg4eb8gbcd0gfd1bc5428004',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Halberds">
                <Setter Property="Text" Value="{Binding Source='ha9d067e1g28dfg4fa3gbdabg0c3fa133279d',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="HandCrossbows">
                <Setter Property="Text" Value="{Binding Source='h23613b92g02b0g4b9cg9b7fg937f0d83f7d8',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Handaxes">
                <Setter Property="Text" Value="{Binding Source='h35568a26gee03g4dfagb3d0g35db1faec364',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="HeavyArmor">
                <Setter Property="Text" Value="{Binding Source='h71d00b00g56dcg4e21g8662g060ced42c3dc',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="HeavyCrossbows">
                <Setter Property="Text" Value="{Binding Source='h5b736f1eg9895g4263gb76dg76c06c1038ae',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Javelins">
                <Setter Property="Text" Value="{Binding Source='hbfcb8bcbg561ag473bga1a0g4e184d2b2692',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="LightArmor">
                <Setter Property="Text" Value="{Binding Source='h2eebdf9ag6c29g43d2g80d8g3371b7d65cdf',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="LightCrossbows">
                <Setter Property="Text" Value="{Binding Source='h210d748egfceeg4e76gabe5g9080c902693f',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="LightHammers">
                <Setter Property="Text" Value="{Binding Source='ha0df64f6gae3cg4dd4gaee6g8aa988bfde8f',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Longbows">
                <Setter Property="Text" Value="{Binding Source='h68720f95gd2c6g4b0ega150geece5a885719',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Longswords">
                <Setter Property="Text" Value="{Binding Source='h23d056e9g6d0cg47d1g9603g873752123142',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Maces">
                <Setter Property="Text" Value="{Binding Source='h6718875ag0e2eg46eag98f0gb8d626d5ec13',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="MartialWeapons">
                <Setter Property="Text" Value="{Binding Source='h93cf8a7dgf14dg4f68g816fgdbf4de0dae41',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Mauls">
                <Setter Property="Text" Value="{Binding Source='h1332cd56g203fg4919gac2dg2d2443302a31',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="MediumArmor">
                <Setter Property="Text" Value="{Binding Source='hbd44c0e2g6a6eg4c8ag8ef4gbe1b95e4bf49',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Morningstars">
                <Setter Property="Text" Value="{Binding Source='hc622f5a9gf7cag4b6ag8e99g792d3831fdfc',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Pikes">
                <Setter Property="Text" Value="{Binding Source='he28bbadcgf4fdg48f8gb59bg89d5895d1267',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Quarterstaffs">
                <Setter Property="Text" Value="{Binding Source='h3fcd9f76g0dcfg4038g9a56g06353c1c0cea',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Rapiers">
                <Setter Property="Text" Value="{Binding Source='h3c574faagd3dbg4b38gbca9g2a71750dfcf0',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Scimitars">
                <Setter Property="Text" Value="{Binding Source='h4caa96c2g100fg4292ga543g740f93ad59ca',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Shields">
                <Setter Property="Text" Value="{Binding Source='h7a819a15g5129g48bagafc1g1c73cc6634ab',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Shortbows">
                <Setter Property="Text" Value="{Binding Source='h931161d1ge54ag480agb3d1gdaf3ed47004c',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Shortswords">
                <Setter Property="Text" Value="{Binding Source='h2529ddf4gb846g4940g9b1dg9969718fe87d',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Sickles">
                <Setter Property="Text" Value="{Binding Source='h28d04d64ge35dg4469g956bg27d715d6e9b1',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="SimpleWeapons">
                <Setter Property="Text" Value="{Binding Source='hd0ea839ag4be2g455bgbff6g71446c4f1355',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Slings">
                <Setter Property="Text" Value="{Binding Source='hc5bd4565g187cg49e2ga99eg43b33c5b8142',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Spears">
                <Setter Property="Text" Value="{Binding Source='h45a6183ag755ag4fdagb147gae8c86ceec57',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Tridents">
                <Setter Property="Text" Value="{Binding Source='hf2542d79gdedfg4a37gb9d2g2238be0f9f4c',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Warhammers">
                <Setter Property="Text" Value="{Binding Source='h4e50a96bg2c2bg41daga27eg623eeae44daf',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Warpicks">
                <Setter Property="Text" Value="{Binding Source='h2914d6ecg0f4ag4452ga88cg59a2f075a69f',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="MusicalInstrument">
                <Setter Property="Text" Value="{Binding Source='hd29bbe68g0a7fg4861g8e94gf6e9ee63804d',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProficiencyType}" Value="Armors">
                <Setter Property="Text" Value="{Binding Source='h9ac79039g668bg4b3cg9a34g3688c34d084b',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--===== WEAPON PROFICIENCY TOOLTIP =====-->
    <DataTemplate x:Key="ExtendedEquipmentProficiencyTemplate">
        <StackPanel x:Name="Object" Background="Transparent" Orientation="Horizontal" VerticalAlignment="Top" Margin="0,0,0,2">
            <Image Style="{StaticResource EquipmentProficiencyIconStyle}" VerticalAlignment="Center" Stretch="Fill" Width="48" Height="48"/>
            <TextBlock Style="{StaticResource EquipmentProficiencyNameStyle}" FontSize="{StaticResource MediumFontSize}" Foreground="{StaticResource TooltipColor.Primary}" Margin="8,0,0,0" TextAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center"/>
        </StackPanel>
    </DataTemplate>

    <!--===== WEAPON PROFICIENCY TEMPLATE =====-->
    <ControlTemplate x:Key="WeaponProficienciesTemplate">
        <Grid x:Name="Proficiencies" HorizontalAlignment="Stretch" >
            <Grid.Resources>

                <DataTemplate x:Key="ProficiencyTooltipTemplate">
                    <StackPanel MaxWidth="800" Margin="12">
                        <StackPanel.Resources>
                            <Style TargetType="ls:LSSpan" BasedOn="{StaticResource {x:Type ls:LSSpan}}">
                                <Style.Triggers>
                                    <Trigger Property="TagType" Value="hl">
                                        <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Resources>

                        <TextBlock x:Name="title" Style="{StaticResource TooltipTitleStyle}"/>
                        <TextBlock x:Name="desc" Style="{StaticResource TooltipBaseTextStyle}"/>
                        <ItemsControl x:Name="list" ItemTemplate="{StaticResource ExtendedEquipmentProficiencyTemplate}"/>
                    </StackPanel>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource Self}}" Value="Armour">
                            <Setter TargetName="title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb677b3f7g5cf6g49c3g84fag2f773ef50dd6',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="h6352fd8fg07b1g4c3agab89g4ec0a2b479e6"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="list" Property="ItemsSource" Value="{Binding (ls:TooltipExtender.Owner).Stats.ProtectionProficiencies, RelativeSource={RelativeSource Self}}"/>
                        </DataTrigger>


                        <!-- Armour part -->
                        <DataTrigger Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource TemplatedParent}}" Value="Armour">
                            <Setter TargetName="title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb677b3f7g5cf6g49c3g84fag2f773ef50dd6',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="h6352fd8fg07b1g4c3agab89g4ec0a2b479e6"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="list" Property="ItemsSource" Value="{Binding (ls:TooltipExtender.Owner).Stats.ProtectionProficiencies, RelativeSource={RelativeSource Self}}"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="Armour"/>
                                <Condition Binding="{Binding (ls:TooltipExtender.Owner).Stats.ProtectionProficiencies.Count, RelativeSource={RelativeSource Self}}" Value="0"/>
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="h3f2a13d0g43dfg45c3g9054gac4435262f3b"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!-- Simple weapons part -->
                        <DataTrigger Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource TemplatedParent}}" Value="SimpleWeapons">
                            <Setter TargetName="title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hd0ea839ag4be2g455bgbff6g71446c4f1355',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="haa84e19cg142fg4128g97b3g4bbed0390545"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="list" Property="ItemsSource" Value="{Binding (ls:TooltipExtender.Owner).Stats.SimpleWeaponProficiencies, RelativeSource={RelativeSource Self}}"/>
                        </DataTrigger>

                        <!-- Martial weapons part -->
                        <DataTrigger Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource TemplatedParent}}" Value="MartialWeapons">
                            <Setter TargetName="title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h93cf8a7dgf14dg4f68g816fgdbf4de0dae41',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="haa84e19cg142fg4128g97b3g4bbed0390545"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="list" Property="ItemsSource" Value="{Binding (ls:TooltipExtender.Owner).Stats.MartialWeaponProficiencies, RelativeSource={RelativeSource Self}}"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource TemplatedParent}}" Value="MartialWeapons"/>
                                <Condition Binding="{Binding (ls:TooltipExtender.Owner).Stats.MartialWeaponProficiencies.Count, RelativeSource={RelativeSource Self}}" Value="0"/>
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="h8ad022f5g5e8eg409eg8577gb83095463181"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!-- Musical instruments part -->
                        <DataTrigger Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource TemplatedParent}}" Value="MusicalInstrument">
                            <Setter TargetName="title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hd29bbe68g0a7fg4861g8e94gf6e9ee63804d',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="h8f9f545dg237eg49fcg9f12g84f1cff2218d"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (ls:TooltipExtender.Context), RelativeSource={RelativeSource Self}}" Value="MusicalInstrument"/>
                                <Condition Binding="{Binding (ls:TooltipExtender.Owner).Stats.MusicalInstrumentProficiency, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="desc" Property="ls:TextBlockFormatter.SourceText">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="hb9eb8424gbd5eg483bg9ce6g783cad20513d"/>
                                        <Binding Path="(ls:TooltipExtender.Owner).Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>

                <ControlTemplate x:Key="ProficiencyBox" TargetType="ContentControl">
                    <Border Name="ProficiencyBoxBorder" Style="{StaticResource RowBG_d}">
                        <Border.ToolTip>
                            <ls:LSTooltip x:Name="ProficiencyTooltip" Content="{Binding Path=DataContext,ElementName=ProficiencyBoxBorder}" ContentTemplate="{StaticResource ProficiencyTooltipTemplate}" ls:TooltipExtender.Context="Armour" ToolTipService.Placement="Right"/>
                        </Border.ToolTip>
                        <Grid Height="52">
                            <Grid.Resources>
                                <BitmapImage x:Key="check">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_btn_check.png</BitmapImage>
                                <BitmapImage x:Key="prof_armour">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_prof_armour.png</BitmapImage>

                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="60"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image x:Name="BooleanIcon" Grid.Column="0" Source="{StaticResource check}" VerticalAlignment="Center" Height="36" HorizontalAlignment="Right" Visibility="Collapsed"/>
                            <TextBlock x:Name="Count" Style="{StaticResource DetailedListValue}" Grid.Column="0" Text="{Binding Stats.ProtectionProficiencies.Count, StringFormat='x{0}'}"  HorizontalAlignment="Right" VerticalAlignment="Center"/>
                            <Image x:Name="Icon" Grid.Column="1" Source="{StaticResource prof_armour}" VerticalAlignment="Center" Height="36" Margin="12,0"/>
                            <TextBlock x:Name="Label" Style="{StaticResource DetailedListText}" Grid.Column="2" Text="{Binding Source='hb677b3f7g5cf6g49c3g84fag2f773ef50dd6',Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ProficiencyBoxBorder" Property="Background" Value="{StaticResource RowBG_h}"/>
                        </Trigger>
                        <Trigger Property="Content" Value="SimpleWeapons">
                            <Setter TargetName="Count" Property="Text" Value="{Binding Stats.SimpleWeaponProficiencies.Count, StringFormat='x{0}'}"/>
                            <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_prof_simple.png"/>
                            <Setter TargetName="Label" Property="Text" Value="{Binding Source='hd0ea839ag4be2g455bgbff6g71446c4f1355',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="ProficiencyTooltip" Property="ls:TooltipExtender.Context" Value="SimpleWeapons"/>
                        </Trigger>
                        <Trigger Property="Content" Value="MartialWeapons">
                            <Setter TargetName="Count" Property="Text" Value="{Binding Stats.MartialWeaponProficiencies.Count, StringFormat='x{0}'}"/>
                            <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_prof_martial.png"/>
                            <Setter TargetName="Label" Property="Text" Value="{Binding Source='h93cf8a7dgf14dg4f68g816fgdbf4de0dae41',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="ProficiencyTooltip" Property="ls:TooltipExtender.Context" Value="MartialWeapons"/>
                        </Trigger>
                        <Trigger Property="Content" Value="MusicalInstrument">
                            <Setter TargetName="BooleanIcon" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Count" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_prof_music.png"/>
                            <Setter TargetName="Label" Property="Text" Value="{Binding Source='hd29bbe68g0a7fg4861g8e94gf6e9ee63804d',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="ProficiencyTooltip" Property="ls:TooltipExtender.Context" Value="MusicalInstrument"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Content, RelativeSource={RelativeSource Mode=Self}}" Value="MusicalInstrument"/>
                                <Condition Binding="{Binding Stats.MusicalInstrumentProficiency}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BooleanIcon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_btn_cross_d.png"/>
                            <Setter TargetName="BooleanIcon" Property="Opacity" Value="0.4"/>
                            <Setter TargetName="ProficiencyBoxBorder" Property="BorderBrush" Value="{StaticResource LS_accent00TxtColor}"/>
                            <Setter TargetName="Label" Property="Foreground" Value="{StaticResource LS_accent00TxtColor}"/>
                            <Setter TargetName="Icon" Property="Opacity" Value="0.4"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Grid.Resources>

            <Border Style="{StaticResource ListSectionBackground}">
                <StackPanel >
                    <ContentControl Template="{StaticResource ProficiencyBox}" Content="Armour"/>
                    <ContentControl Template="{StaticResource ProficiencyBox}" Content="SimpleWeapons"/>
                    <ContentControl Template="{StaticResource ProficiencyBox}" Content="MartialWeapons"/>
                    <ContentControl Template="{StaticResource ProficiencyBox}" Content="MusicalInstrument"/>
                </StackPanel>
            </Border>
        </Grid>


    </ControlTemplate>

    <!--===== SAVING THROW PROFICIENCY TEMPLATE =====-->
    <Style x:Key="SavingThrowGridStyle" TargetType="ItemsControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="ls:VMAbility">
                    <Grid x:Name="base" Background="Transparent" Height="88" Width="88" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right" ToolTipService.HorizontalOffset="50">
                        
                        <Image x:Name="SavingThrowIcon" HorizontalAlignment="Center" VerticalAlignment="Bottom" Source="{StaticResource SavingThrowDice}" Opacity="0.6">
                        </Image>
                        <StackPanel>
                            <Control x:Name="attrName" Template="{StaticResource AbilityShortDisplayName}"  HorizontalAlignment="Center" Margin="0,16,0,0">
                                <Control.Resources>
                                    <Style TargetType="TextBlock"  BasedOn="{StaticResource DetailedListText}"></Style>
                                </Control.Resources>
                            </Control>
                            <TextBlock x:Name="value" Text="{Binding SavingThrow.AdditionalValue, StringFormat={}{0: +#; -#; 0}}" Style="{StaticResource DetailedListValue}" HorizontalAlignment="Center" Margin="0,-12,0,0"/>
                        </StackPanel>
                    </Grid>
                    <DataTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="base">
                            <Setter TargetName="base" Property="Background" Value="{StaticResource RowBG_h}"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--===== SKILLS VIEW TEMPLATE =====-->
    <ControlTemplate x:Key="SkillsTemplate">
        <Grid x:Name="SkillsPanelContent">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!--SkillsList-->
            <ScrollViewer Template="{StaticResource NoForcedStyleScrollViewerTemplate}" Grid.Row="1" Padding="{StaticResource ScrollOffset}">
                <Grid x:Name="CharacterSkills">
                    <Grid.Resources>
                        <Style x:Key="SkillTextStyle" TargetType="TextBlock">
                            <Setter Property="FontSize" Value="{DynamicResource ScaledSmallFontSize}"/>
                            <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                        </Style>

                        <Style x:Key="SkillTitleTextStyle" TargetType="TextBlock" BasedOn="{StaticResource SkillTextStyle}">
                            <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="ToolTipService.Placement" Value="Right"/>
                            <Setter Property="ToolTipService.HorizontalOffset" Value="188"/>
                        </Style>
                    </Grid.Resources>

                    <ItemsControl ItemsSource="{Binding Stats.Abilities}" >
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Vertical" Visibility="{Binding Skills.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=0}">
                                    <Border Margin="0,12,0,0" ToolTip="{StaticResource ManagedTooltip}" Background="Transparent" ToolTipService.Placement="Right">

                                        <StackPanel Orientation="Horizontal"  HorizontalAlignment="Center">
                                            <TextBlock x:Name="TitleName" Text="{Binding AbilityValue, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='hec30ce0dgb76bg45cagaf40gad771ff7902b'}" Style="{StaticResource SkillTitleTextStyle}"/>
                                            <TextBlock Style="{StaticResource SkillTitleTextStyle}" Text="{Binding Modifier, StringFormat=' ({0:+#;-#;0})'}"/>
                                        </StackPanel>
                                    </Border>
                                    <ItemsControl ItemsSource="{Binding Skills}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate DataType="ls:VMSkill">
                                                <Border Name="GridRow" Style="{StaticResource RowBG_d}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
                                                    <Grid HorizontalAlignment="Stretch" Height="56" >
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition Width="5*"/>
                                                            <ColumnDefinition Width="*"/>
                                                        </Grid.ColumnDefinitions>
                                                        <Image x:Name="ExpertiseIcon" Grid.Column="0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_expertiseDice.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden"/>
                                                        <Image x:Name="ProficiencyIcon" Grid.Column="0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_proficientDice.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0,0,0"/>
                                                        <TextBlock x:Name="SkillName" Text="{Binding SkillValue, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h65e11968gf9b6g4c47g9efcg03fb60fb923c'}" Style="{StaticResource SkillTextStyle}" Grid.Column="1" VerticalAlignment="Center" TextAlignment="Left" Margin="8,0,0,0"/>

                                                        <TextBlock x:Name="SkillModifier" Style="{StaticResource SkillTextStyle}" Text="{Binding Value, StringFormat={}{0:+#;-#;0}}" Grid.Column="2" VerticalAlignment="Center" TextAlignment="Right" Margin="0,0,18,0" Foreground="{StaticResource LS_accent100TxtColor}"/>
                                                        <b:Interaction.Triggers>
                                                            <b:EventTrigger EventName="MouseEnter">
                                                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                                            </b:EventTrigger>
                                                        </b:Interaction.Triggers>
                                                    </Grid>
                                                </Border>
                                                <DataTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="GridRow" Property="Background" Value="{StaticResource RowBG_h}"/>
                                                        <Setter TargetName="SkillName" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                                        <Setter TargetName="SkillModifier" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding ProficiencyType}" Value="None">
                                                        <Setter TargetName="ProficiencyIcon" Property="Visibility" Value="Hidden"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsExpert}" Value="True">
                                                        <Setter TargetName="ProficiencyIcon" Property="Visibility" Value="Hidden"/>
                                                        <Setter TargetName="ExpertiseIcon" Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Vertical"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>

                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </Grid>
            </ScrollViewer>
        </Grid>
    </ControlTemplate>

    <!--===== DETAILSVIEW TEMPLATE =====-->
    <DataTemplate x:Key="CharacterSheetDetailedTemplate" DataType="{x:Type ls:Character}">
        <DataTemplate.Resources>
            <ControlTemplate x:Key="DetailedEntry">
                <ControlTemplate.Resources>
                    <Style TargetType="DockPanel">
                        <Setter Property="Margin" Value="8,0"/>
                    </Style>
                </ControlTemplate.Resources>
                <Border x:Name="Entry" Style="{StaticResource RowBG_d}" MinHeight="48">
                    <ContentPresenter/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="Entry" Property="Background" Value="{StaticResource RowBG_h}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--APPROVAL LIST TEMPLATE-->
            <DataTemplate x:Key="ApprovalDataTemplate" DataType="{x:Type ls:VMApprovalRating}">
                <ContentControl x:Name="entry" ToolTip="{StaticResource ManagedTooltip}" Template="{StaticResource DetailedEntry}">
                    <Grid Margin="16,0">
                        <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource DetailedListText}" Text="{Binding Character.Name}"/>
                        <TextBlock HorizontalAlignment="Right" VerticalAlignment="Center" Style="{StaticResource DetailedListValue}">
                                <Run Text="{Binding Rating, Converter={StaticResource ApprovalRatingToStringConverter}}"/>
                                <Run Text="{Binding Rating, StringFormat='({0})'}"/>
                        </TextBlock>
                    </Grid>
                </ContentControl>
            </DataTemplate>

            <ControlTemplate x:Key="ApprovalRatingTemplate" TargetType="ContentControl">
                <StackPanel x:Name="ApprovalHolder">
                    <ContentControl Name="ApprovalTitle" Style="{StaticResource BaseTitleStyle}" Grid.Row="0">
                        <TextBlock Text="{Binding Source='hab8d8423g3797g4f2ega601g18f13af5add6', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ItemsControl x:Name="RatingsList" ItemsSource="{Binding ApprovalRatings}" ItemTemplate="{StaticResource ApprovalDataTemplate}"/>
                </StackPanel>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding ApprovalRatings.Count, FallbackValue=0}" Value="0">
                        <Setter TargetName="ApprovalHolder" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </DataTemplate.Resources>
        <Grid x:Name="DetailedPanelContent">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <ScrollViewer Grid.Row="1" Template="{StaticResource NoForcedStyleScrollViewerTemplate}" Padding="{StaticResource ScrollOffset}">
                <StackPanel>
                    <!--Health-->
                    <ContentControl Template="{StaticResource DetailedEntry}" DataContext="{Binding Stats.Health}" ToolTip="{StaticResource PlacementParentDCTooltip}">
                        <DockPanel>
                            <Control Template="{StaticResource StatsDisplayName}" Style="{StaticResource StatsNameStyle}"/>
                            <TextBlock Text="{Binding Max, StringFormat='/{0}'}" Style="{StaticResource SkillTitleTextStyle}"/>
                            <TextBlock Text="{Binding Value}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>
                    <!--TempHealth-->
                    <ContentControl Template="{StaticResource DetailedEntry}" DataContext="{Binding Stats.TemporaryHealth}" ToolTip="{StaticResource PlacementParentDCTooltip}" Visibility="{Binding Value, Converter={StaticResource CountToVisibilityConverter}}">
                        <DockPanel>
                            <Control Template="{StaticResource StatsDisplayName}" Style="{StaticResource StatsNameStyle}"/>
                            <TextBlock Text="{Binding Max, StringFormat='/{0}'}" Style="{StaticResource SkillTitleTextStyle}"/>
                            <TextBlock Text="{Binding Value}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>
                    <!--Armour Class-->
                    <ContentControl Template="{StaticResource DetailedEntry}" DataContext="{Binding Stats.ArmorClass}" ToolTip="{StaticResource PlacementParentDCTooltip}">
                        <DockPanel>
                            <Control Template="{StaticResource StatsDisplayName}" Style="{StaticResource StatsNameStyle}"/>
                            <TextBlock Style="{StaticResource SkillTitleTextStyle}">
                                                <Run Text="{Binding Value}"/><Run Text="{Binding Max, StringFormat='/{0}'}"/>
                            </TextBlock>
                        </DockPanel>
                    </ContentControl>
                    <!--Class-->
                    <ItemsControl ItemsSource="{Binding Stats.ClassList}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <ContentControl Template="{StaticResource DetailedEntry}">
                                    <ContentControl.ToolTip>
                                        <ls:LSTooltip IsHitTestVisible="False" Content="{Binding Path=DataContext.ClassDescription, RelativeSource={RelativeSource TemplatedParent}}" ls:AttachedProperties.InheritedTag="{Binding Path=DataContext.ClassDisplayName, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource HeaderBodyLocaStringTemplate}"/>
                                    </ContentControl.ToolTip>
                                    <DockPanel>
                                        <TextBlock Text="{Binding Source='h3f540c7ag325cg447egadbdgb30b8c580fa4', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillTextStyle}"/>
                                        <StackPanel DockPanel.Dock="Right">
                                            <TextBlock Style="{StaticResource SkillTitleTextStyle}" TextAlignment="Right">
                                                <TextBlock.Text>
                                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                        <Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
                                                        <Binding Path="DataContext.Level.Value" RelativeSource="{RelativeSource Mode=Self}"/>
                                                        <Binding Path="DataContext.ClassDisplayName" RelativeSource="{RelativeSource Mode=Self}"/>
                                                    </MultiBinding>
                                                </TextBlock.Text>
                                            </TextBlock>
                                            <TextBlock Text="{Binding SubclassDisplayName}" Visibility="{Binding SubclassDisplayName, Converter={StaticResource StringToVisibilityConverter}}" Style="{StaticResource SkillTitleTextStyle}"/>
                                        </StackPanel>
                                    </DockPanel>
                                </ContentControl>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!--Race-->
                    <ContentControl Template="{StaticResource DetailedEntry}">
                        <ContentControl.ToolTip>
                            <ls:LSTooltip IsHitTestVisible="False" Content="{Binding DataContext.Stats.Race.Description, ElementName=DetailedView}" ls:AttachedProperties.InheritedTag="{Binding DataContext.Stats.Race.DisplayName, ElementName=DetailedView}" ContentTemplate="{StaticResource HeaderBodyLocaStringTemplate}"/>
                        </ContentControl.ToolTip>
                        <DockPanel>
                            <TextBlock Text="{Binding Source='h4810b5bag5482g4b47ga5b7ge7c1156969d9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillTextStyle}"/>
                            <TextBlock Text="{Binding Stats.Race.DisplayName}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <!--Background-->
                    <ContentControl Template="{StaticResource DetailedEntry}" Visibility="{Binding Stats.Background, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                        <ContentControl.ToolTip>
                            <ls:LSTooltip IsHitTestVisible="False" Content="{Binding DataContext.Stats.BackgroundDescription, ElementName=DetailedView}" ls:AttachedProperties.InheritedTag="{Binding DataContext.Stats.Background, ElementName=DetailedView}" ContentTemplate="{StaticResource HeaderBodyLocaStringTemplate}"/>
                        </ContentControl.ToolTip>
                        <DockPanel>
                            <TextBlock Text="{Binding Source='hd020153fg6a95g4ebegb6c3g043bb05c7bba', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillTextStyle}"/>
                            <TextBlock Text="{Binding Stats.Background}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <!--Diety-->
                    <ContentControl Name="DietyRowHolder" Template="{StaticResource DetailedEntry}" Visibility="{Binding DataContext.Stats.God, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, Converter={StaticResource StringToVisibilityConverter}}">
                        <DockPanel>
                            <TextBlock Text="{Binding Source='h5238a9c6gb90fg40bbg9335gfb37d6e91b94', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillTextStyle}"/>
                            <TextBlock Text="{Binding Stats.God}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <!--Attributes-->
                    <ContentControl Name="AttributesTitle" Style="{StaticResource BaseTitleStyle}" Grid.Row="0">
                        <TextBlock Text="{Binding Source='h6f7a7018gd5f6g4c32g9386g6df0744d7ecd', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>

                    <ContentControl Template="{StaticResource DetailedEntry}" DataContext="{Binding Stats.Initiative}" ToolTip="{StaticResource PlacementParentDCTooltip}">
                        <DockPanel>
                            <Control Template="{StaticResource StatsDisplayName}" Style="{StaticResource StatsNameStyle}"/>
                            <TextBlock Text="{Binding Value, StringFormat={}{0:+#;-#;+0}}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <ContentControl Template="{StaticResource DetailedEntry}" DataContext="{Binding Stats.MovementResource}" ToolTip="{StaticResource PlacementParentDCTooltip}">
                        <DockPanel>
                            <TextBlock Text="{Binding Name}" Style="{StaticResource SkillTextStyle}"/>
                            <TextBlock Text="{Binding MaxValue, Converter={StaticResource UnitConverter}, ConverterParameter='Distance Short'}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <ContentControl Template="{StaticResource DetailedEntry}" Visibility="{Binding IsPlayableCharacter, Converter={StaticResource BoolToVisibleConverter}}">
                        <DockPanel>
                            <Control x:Name="DarkVisionRangeName" Template="{StaticResource StatsDisplayName}" DataContext="{Binding Stats.DarkVisionRange}" Style="{StaticResource StatsNameStyle}"/>
                            <TextBlock Text="{Binding Stats.DarkVisionRange.Value, Converter={StaticResource UnitConverter}, ConverterParameter='Distance Short'}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <ContentControl x:Name="BodyType" Template="{StaticResource DetailedEntry}">
                        <DockPanel>
                            <TextBlock Text="{Binding Source='h83fee0c7g1777g4fddga60dg6a31e2320de2', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillTextStyle}"/>
                            <TextBlock Text="{Binding Stats.Race.Type}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <ContentControl Template="{StaticResource DetailedEntry}">
                        <DockPanel>
                            <TextBlock Text="{Binding Source='hfc7ce51bga5d6g4711g8e19g3fcebf236de0', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillTextStyle}"/>
                            <Control Template="{StaticResource ObjectSizeTextTemplate}">
                                <Control.Resources>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource SkillTitleTextStyle}"/>
                                </Control.Resources>
                            </Control>
                        </DockPanel>
                    </ContentControl>

                    <ContentControl x:Name="weightStat" Template="{StaticResource DetailedEntry}" DataContext="{Binding Stats.Weight}" >
                        <ContentControl.ToolTip>
                            <ls:LSTooltip Content="{Binding ElementName=weightStat,Path=DataContext}"/>
                        </ContentControl.ToolTip>
                        <DockPanel>
                            <Control Template="{StaticResource StatsDisplayName}" Style="{StaticResource StatsNameStyle}"/>
                            <TextBlock Text="{Binding Value, Converter={StaticResource UnitConverter}, ConverterParameter='Weight Short'}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <ContentControl Template="{StaticResource DetailedEntry}" Visibility="{Binding IsPlayableCharacter, Converter={StaticResource BoolToVisibleConverter}}">
                        <ContentControl.ToolTip>
                            <ls:LSTooltip Content="{Binding Source='h97226633g565ag44c0gbd64g89e70c886cba',Converter={StaticResource TranslatedStringConverter}}"/>
                        </ContentControl.ToolTip>
                        <DockPanel>
                            <TextBlock Text="{Binding Source='h3faf5e3cg719dg4b1cgb21egf2afeafb0eea', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillTextStyle}"/>
                            <TextBlock Text="{Binding EncumbranceStats.WeightMaximum, Converter={StaticResource UnitConverter}, ConverterParameter='Weight Short'}" Style="{StaticResource SkillTitleTextStyle}"/>
                        </DockPanel>
                    </ContentControl>

                    <StackPanel Visibility="{Binding IsPlayableCharacter, Converter={StaticResource BoolToVisibleConverter}}">
                        <!-- Proficiency Bonus-->
                        <ContentControl Style="{StaticResource BaseTitleStyle}" ToolTip="{StaticResource PlacementParentDCTooltip}" DataContext="{Binding Stats.ProficiencyBonus}" Margin="0,12">
                            <TextBlock>
                                <Run Text="{Binding Source='h65b46ad4g2eacg47d5gb4b4g124ca3b8aaef', Converter={StaticResource TranslatedStringConverter}}"/>
                                <Run Text="{Binding Value, StringFormat='(+{0})'}"/>
                            </TextBlock>
                        </ContentControl>
                        <!--Equipment Proficiency-->
                        <Control x:Name="EquipmentProficienciesBody" Template="{StaticResource WeaponProficienciesTemplate}"/>

                        <!-- SavingThrow Bonus-->
                        <ContentControl Style="{StaticResource BaseTitleStyle}">
                            <TextBlock Text="{Binding Source='ha1262989ge5e8g47aegb0begd830dd1a946f', Converter={StaticResource TranslatedStringConverter}}">
                                <TextBlock.ToolTip>
                                    <ls:LSTooltip IsHitTestVisible="False" Content="hb4ebc93egdb2dg4489g9386ga0b39c71b536" ls:AttachedProperties.InheritedTag="h20f2c1b6g2815g402ag8549gd6042c56c6db" Style="{StaticResource InlineTagTooltip}"/>
                                </TextBlock.ToolTip>
                            </TextBlock>
                        </ContentControl>
                        <Border Style="{StaticResource ListSectionBackground}">
                            <ItemsControl x:Name="SavingThrow" ItemsSource="{Binding Stats.Abilities}" VerticalAlignment="Center" Style="{StaticResource SavingThrowGridStyle}" Margin="0,8"/>
                        </Border>

                    </StackPanel>


                    <!--Approval-->
                    <ContentControl x:Name="approvalRatings" Template="{StaticResource ApprovalRatingTemplate}"/>

                    <!--TAGS-->
                    <StackPanel Visibility="{Binding Tags.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <ContentControl Name="TagTitle" Style="{StaticResource BaseTitleStyle}">
                            <TextBlock Text="{Binding Source='hd0bb8a34g4e48g4816g8ca0g234f3f99c934', Converter={StaticResource TranslatedStringConverter}}"/>
                        </ContentControl>

                        <ContentControl Template="{StaticResource DetailedEntry}">
                            <StackPanel>
                                <TextBlock Style="{StaticResource DetailedListText}" Text="{Binding Tags, Converter={StaticResource ListConcatenationConverter}, ConverterParameter='h2519408dg5fd7g4cbcg840cg14370239edf8'}" TextWrapping="Wrap" HorizontalAlignment="Center" TextAlignment="Center"/>
                            </StackPanel>
                        </ContentControl>
                    </StackPanel>



                </StackPanel>
            </ScrollViewer>
        </Grid>
        
        <DataTemplate.Triggers>
            <!--Hide Diety on Examine Panel-->
            <DataTrigger Binding="{Binding Name, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Examine" >
                <Setter TargetName="DietyRowHolder" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
        

    </DataTemplate>

    <!--===== TABINATION =====-->
    <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type HeaderedContentControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <ControlTemplate.Resources>
                        <BitmapImage x:Key="TabBG_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_inactive_d.png"/>
                        <BitmapImage x:Key="TabBG_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_inactive_h.png"/>
                        <BitmapImage x:Key="TabBGSelected_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/tab_body_active_d.png"/>
                    </ControlTemplate.Resources>

                    <Grid x:Name="TabRoot" ToolTipService.Placement="Left" >
                        <ls:LSNineSliceImage x:Name="tab" ImageSource="{StaticResource TabBG_d}" Slices="66,36,66, 52" IconWidth="16" Padding="66,10,66,0" Height="88" Width="{Binding ActualWidth, ElementName=SummaryPanelContent, Converter={StaticResource DivideConverter}, ConverterParameter=3}"/>
                        <ContentPresenter ContentSource="Header" Margin="40,12"  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseEnter">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabItem}}, Path=IsSelected}" Operator="NotEqual" RightOperand="True"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseDown">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabItem}}, Path=IsSelected}" Operator="NotEqual" RightOperand="True"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSPlaySound Sound="UI_Shared_Panel_Select"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="tab" Property="ImageSource" Value="{StaticResource TabBG_h}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="tab" Property="ImageSource" Value="{StaticResource TabBGSelected_d}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{StaticResource Style.Focus.Inner.Uniform}"/>
    </Style>

    <Style x:Name="ColumnTemplate" TargetType="TabControl" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" IsItemsHost="True" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" Grid.Row="0" HorizontalAlignment="Center" Margin="0,0,0,-16" />
                        <Grid Grid.Row="1">
                            <ls:LSNineSliceImage x:Name="InfoBGpanel" Style="{StaticResource InnerPanelWithDecor}"/>
                            <ContentPresenter ContentSource="SelectedContent" Margin="{StaticResource CSInfoMargin}"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TAB CONTENT-->
    <ControlTemplate x:Key="CharSheetTabController" TargetType="Control">
        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <TabControl>

                <!-- ====== SUMMARY TAB =======-->
                <TabItem IsSelected="True" >
                    <TabItem.Header>
                        <Border>
                            <Border.ToolTip>
                                <ls:LSTooltip Content="{Binding Source='h890f4cddg2bdcg4bb2gb73eg43fe16b11b08',Converter={StaticResource TranslatedStringConverter}}"/>
                            </Border.ToolTip>
                            <Image Width="60" Height="60" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/ico_class.png" Stretch="Uniform"/>
                            
                        </Border>
                    </TabItem.Header>

                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollViewer Grid.Row="0" Template="{StaticResource NoForcedStyleScrollViewerTemplate}" Padding="{StaticResource ScrollOffset}">

                            <Grid x:Name="SummaryPanelContent">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <StackPanel Grid.Row="0">
                                    <!-- ======== NAME Stack For NPC ======== -->
                                    <Grid x:Name="NamePanelNPC" Visibility="{Binding IsPlayableCharacter, Converter={StaticResource BoolToCollapsedConverter}}">
                                        <StackPanel Grid.Row="0">
                                            <TextBlock x:Name="NPCType" Text="{Binding Stats.Race.Type}" HorizontalAlignment="Center" Style="{StaticResource DetailedListText}" TextAlignment="Center" TextWrapping="Wrap"/>
                                            <TextBlock x:Name="NPCRace" HorizontalAlignment="Center" FontSize="{DynamicResource ScaledSmallishFontSize}" TextAlignment="Center" TextWrapping="Wrap">
                                                <TextBlock.Text>
                                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                        <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                                                        <Binding Path="Stats.Level.Value"/>
                                                        <Binding Path="Stats.Race.DisplayName"/>
                                                    </MultiBinding>
                                                </TextBlock.Text>
                                                <TextBlock.ToolTip>
                                                    <ls:LSTooltip IsHitTestVisible="False" Content="{Binding DataContext.Stats.Race.Description, ElementName=NPCRace}" ls:AttachedProperties.InheritedTag="{Binding DataContext.Stats.Race.DisplayName, ElementName=NPCRace}" ContentTemplate="{StaticResource HeaderBodyLocaStringTemplate}"/>
                                                </TextBlock.ToolTip>
                                            </TextBlock>
                                            <Grid x:Name="HealthbarPortrait">
                                                <Grid.Resources>
                                                    <BitmapImage x:Key="frame">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/character_image_frame.png</BitmapImage>

                                                </Grid.Resources>

                                                <ContentPresenter x:Name="portrait" ContentTemplate="{StaticResource CharacterPortraitTemplate}" HorizontalAlignment="Center" Content="{Binding}"/>

                                                <Path x:Name="HealthBar" Visibility="{Binding Stats.IsAlive, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter='True'}" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" Width="134" Height="200">
                                                    <Path.Data>
                                                        <RectangleGeometry Rect="0,0,134,200" RadiusX="30" RadiusY="30" />
                                                    </Path.Data>
                                                    <Path.Fill>
                                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" Opacity="1">
                                                            <GradientStop Color="Transparent" Offset="0"/>
                                                            <GradientStop Color="Transparent" Offset="{Binding Stats.Health.PercentValue, Mode=OneWay}"/>
                                                            <GradientStop Color="{StaticResource HBCol1}" Offset="{Binding Stats.Health.PercentValue, Mode=OneWay}"/>
                                                            <GradientStop Color="{StaticResource HBCol2}" Offset="{Binding Stats.Health.PercentValue, Mode=OneWay, Converter={StaticResource AddConverter}, ConverterParameter=0.16}"/>
                                                            <GradientStop Color="{StaticResource HBCol3}" Offset="1.0"/>
                                                        </LinearGradientBrush>
                                                    </Path.Fill>
                                                </Path>

                                               <Image x:Name="Frame" Source="{StaticResource frame}" Stretch="None"/>
                                                <Control x:Name="HealthText" Template="{StaticResource PortraitHealth}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,12" Background="Transparent">
                                                    <Control.ToolTip>
                                                        <ls:LSTooltip IsHitTestVisible="False" Content="{Binding Path=DataContext.Stats.Health ,ElementName=HealthText}" />
                                                    </Control.ToolTip>
                                                </Control>

                                                <Control Template="{StaticResource ACHolder}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,36,0"/>

                                            </Grid>
                                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="{DynamicResource ScaledBigFontSize}" TextAlignment="Center" TextWrapping="Wrap"/>
                                            <TextBlock Text="{Binding Title}" Style="{StaticResource DetailedListText}" HorizontalAlignment="Center" TextWrapping="Wrap" TextAlignment="Center" Visibility="{Binding Title, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}"/>
                                        </StackPanel>
                                    </Grid>

                                    <!-- ======== NAME Stack For Party ======== -->
                                    <Grid x:Name="NamePanelParty" Grid.Row="0" Visibility="{Binding IsPlayableCharacter, Converter={StaticResource BoolToVisibleConverter}}" DataContext="{Binding}">
                                        <StackPanel HorizontalAlignment="Center">
                                            <TextBlock Text="{Binding Stats.Race.DisplayName}" Style="{StaticResource SummaryListText}" TextWrapping="Wrap" TextAlignment="Center">
                                                <TextBlock.ToolTip>
                                                    <ls:LSTooltip IsHitTestVisible="False" Content="{Binding DataContext.Stats.Race.Description, ElementName=DetailedView}" ls:AttachedProperties.InheritedTag="{Binding DataContext.Stats.Race.DisplayName, ElementName=DetailedView}" ContentTemplate="{StaticResource HeaderBodyLocaStringTemplate}"/>
                                                </TextBlock.ToolTip>
                                            </TextBlock>
                                            <Image DataContext="{Binding Stats.ClassList[0]}" Style="{DynamicResource MainClassIconStyle}" Stretch="UniformToFill" Width="200" Margin="0,-6,0,-6">
                                                <Image.Effect>
                                                    <DropShadowEffect BlurRadius="20" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                                                </Image.Effect>
                                            </Image>
                                            <TextBlock x:Name="SubclassLabel" HorizontalAlignment="Center" TextWrapping="Wrap" TextAlignment="Center" Text="{Binding Stats.ClassList[0].SubclassDisplayName}" Style="{StaticResource SummaryListText}" Visibility="{Binding Text, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                                <TextBlock.ToolTip>
                                                    <ls:LSTooltip IsHitTestVisible="False" Content="{Binding Path=DataContext.Stats.ClassList[0].SubclassDescription, ElementName=SubclassLabel}" ls:AttachedProperties.InheritedTag="{Binding DataContext.Stats.ClassList[0].SubclassDisplayName, ElementName=SubclassLabel}" ContentTemplate="{StaticResource HeaderBodyLocaStringTemplate}"/>

                                                </TextBlock.ToolTip>
                                            </TextBlock>

                                            <Control Template="{StaticResource PlayerMultiClass}" DataContext="{Binding}" />
                                        </StackPanel>
                                    </Grid>

                                    <!-- ======== ABILITIES INFO ======== -->
                                    <ItemsControl x:Name="Abilities" ItemsSource="{Binding Stats.Abilities}" VerticalAlignment="Center" Style="{StaticResource AbilitiesGridStyle}"/>

                                    <!-- ======== CONDITIONS ======== -->
                                    <StackPanel Visibility="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                        <ContentControl Style="{StaticResource BaseTitleStyle}">
                                            <TextBlock Text="{Binding Source='h3baf1fe2g7d16g4d77gbc35gc17a90fb27d6', Converter={StaticResource TranslatedStringConverter}}"/>
                                        </ContentControl>
                                        <Border Style="{StaticResource ListSectionBackground}" Visibility="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                            <ItemsControl x:Name="StatusHolder" ItemsSource="{Binding StatusEffects}" ItemTemplate="{StaticResource StatusListItemTemplate}" Background="Transparent" Margin="12"/>
                                        </Border>
                                    </StackPanel>

                                    <!-- ======== RESISTANCES ======== -->
                                    <StackPanel Name="ResistancesSection">
                                        <Grid>
                                            <ContentControl Style="{StaticResource BaseTitleStyle}">
                                                <TextBlock Text="{Binding Source='h98a4ccfbg20f4g4294g9bf7g624c95711539', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </ContentControl>
                                        </Grid>
                                        <Control x:Name="ResistanceContainer" HorizontalAlignment="Center" Template="{StaticResource ResistancesGridTemplate}"/>
                                    </StackPanel>

                                    <!-- ======== FEATURES ======== -->

                                    <ContentControl Style="{StaticResource BaseTitleStyle}">
                                        <TextBlock Text="{Binding Source='h9f9bfc7dgf4cdg4198g83e3gcb974dd2e949', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </ContentControl>

                                </StackPanel>
                                <Grid Name="FeaturesList" Grid.Row="1">
                                    <Border Style="{StaticResource ListSectionBackground}">
                                        <Grid VerticalAlignment="stretch">
                                            <b:Interaction.Behaviors>
                                                <ls:CollectionFilterBehavior x:Name="AllCharacterFeaturesPredicate" ItemsSource="{Binding Stats.Passives}" Predicate="{Binding Stats.AllCharacterFeaturesPredicate}"/>
                                                <ls:CollectionFilterBehavior x:Name="FullList" ItemsSource="{Binding Stats.Passives}"/>
                                                <ls:CollectionSortBehavior x:Name="AllCharacterFeaturesSorted" ItemsSource="{Binding FilteredItems, ElementName=AllCharacterFeaturesPredicate}" Comparer="{Binding Stats.PassivesSortComparer}"/>
                                                <ls:CollectionSortBehavior x:Name="FullListSorted" ItemsSource="{Binding FilteredItems, ElementName=FullList}" Comparer="{Binding Stats.PassivesSortComparer}"/>
                                            </b:Interaction.Behaviors>
                                            <ItemsControl x:Name="FeaturesHolder" ItemsSource="{Binding SortedItems, ElementName=AllCharacterFeaturesSorted}" ItemTemplate="{StaticResource FeaturesListItemTemplate}" Margin="12" Visibility="Visible"/>
                                        </Grid>
                                    </Border>
                                </Grid>

                            </Grid>
                        </ScrollViewer>
                        
                        <!-- ======== APPROVAL BAR ======== -->

                        <Grid Grid.Row="1" x:Name="ApprovalHolder" Margin="0,8,0,0" Visibility="{Binding ApprovalRatings.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=0, FallbackValue={x:Static Visibility.Collapsed}}">
                            <StackPanel Orientation="Vertical">
                                <TextBlock Style="{StaticResource DetailedListText}" HorizontalAlignment="Center" Text="{Binding Source='hab8d8423g3797g4f2ega601g18f13af5add6',Converter={StaticResource TranslatedStringConverter}}"/>
                                <Grid HorizontalAlignment="Center">
                                    <Image VerticalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter.png" Stretch="None"/>
                                    <Rectangle Width="448" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,16">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush>
                                                <GradientStop Color="{StaticResource AP_Negative}" Offset="0"/>
                                                <GradientStop Color="{StaticResource AP_Neutral}" Offset="0.33"/>
                                                <GradientStop Color="{StaticResource AP_Positive}" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Image HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,16" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter_overlay.png" Stretch="None"/>

                                    <ItemsControl Width="448" Margin="0,0,0,16" ItemsSource="{Binding ApprovalRatings}" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <Grid/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Grid x:Name="BarRoot">
                                                    <Grid.Tag>
                                                        <Binding Path="Rating" Converter="{StaticResource AddConverter}" ConverterParameter="50"/>
                                                    </Grid.Tag>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>

                                                    <Rectangle Grid.Column="0" Fill="Transparent" Width="{Binding Tag, ElementName=Icon, Converter={StaticResource MultiplierConverter}, ConverterParameter=388}" MaxWidth="388"/>

                                                    <Ellipse x:Name="Icon" Grid.Column="1" Stroke="{StaticResource LS_disabledPadTxtColor}" StrokeThickness="3" Fill="{Binding Character.Icon}" Width="60" Height="60" VerticalAlignment="Center" Margin="0,0,-30,0" ToolTipService.Placement="Top" ToolTip="{StaticResource ManagedTooltip}">
                                                        <Ellipse.Tag>
                                                            <Binding Path="Tag" ElementName="BarRoot" Converter="{StaticResource DivideConverter}" ConverterParameter="150"/>
                                                        </Ellipse.Tag>
                                                        <Ellipse.Effect>
                                                            <DropShadowEffect BlurRadius="10" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                                                        </Ellipse.Effect>
                                                    </Ellipse>
                                                </Grid>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </Grid>
                            </StackPanel>
                        </Grid>
                    </Grid>
              
                </TabItem>

                <!-- ====== SKILLS TAB =======-->
                <TabItem Visibility="{Binding IsPlayableCharacter, Converter={StaticResource BoolToVisibleConverter}}">
                    <TabItem.Header>
                        <Border>
                            <Border.ToolTip>
                                <ls:LSTooltip Content="{Binding Source='h12abe296ga0fbg44feg9451gb10a0bf92acb',Converter={StaticResource TranslatedStringConverter}}"/>
                            </Border.ToolTip>
                            <Image Width="60" Height="60" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/ico_skills.png" Stretch="Uniform"/>
                        </Border>
                    </TabItem.Header>
                    <Control x:Name="SkillsList" Template="{StaticResource SkillsTemplate}"/>
                </TabItem>

                <!-- ====== DETAILS TAB ======-->
                <TabItem >
                    <TabItem.Header>
                        <Border>
                            <Border.ToolTip>
                                <ls:LSTooltip Content="{Binding Source='he8e3236cgbf7eg4975gb5d8g3f4e3c0663f5',Converter={StaticResource TranslatedStringConverter}}"/>
                            </Border.ToolTip>
                            <Image Width="60" Height="60" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_identity_d.png" Stretch="Uniform"/>
                        </Border>
                    </TabItem.Header>
                    <ContentControl x:Name="DetailedView" Content="{Binding .}" ContentTemplate="{StaticResource CharacterSheetDetailedTemplate}" />
                </TabItem>

            </TabControl>
        </Grid>
        
        <ControlTemplate.Triggers>

            <!--Use NPC view for Summons-->
            <DataTrigger Binding="{Binding CharacterType}" Value="Summon">
                <Setter TargetName="NamePanelNPC" Property="Visibility" Value="Visible"/>
                <Setter TargetName="NamePanelParty" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!--Use NPC view for Followers-->
            <DataTrigger Binding="{Binding CharacterType}" Value="Follower">
                <Setter TargetName="NamePanelNPC" Property="Visibility" Value="Visible"/>
                <Setter TargetName="NamePanelParty" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!--Use unfiltered Features list for Examine Panel-->
            <DataTrigger Binding="{Binding Name, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Examine" >
                <Setter TargetName="FeaturesHolder" Property="ItemsSource" Value="{Binding SortedItems, ElementName=FullListSorted}"/>
            </DataTrigger>

            <!--show subclass when not multiclassing-->
            <DataTrigger Binding="{Binding stats.ClassList.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True" >
                <Setter TargetName="SubclassLabel" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- ===== ALCHEMY PAGE TEMPLATE ===== -->
    <ControlTemplate x:Key="AlchemyPanelTemplate">
        <ControlTemplate.Resources>
            <System:Double x:Key="IconSize">88</System:Double>
            <System:Double x:Key="ListIconSize">60</System:Double>


            <BitmapImage x:Key="NewRecipeIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_exclamation.png"/>

            <BitmapImage x:Key="ExtractBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_extract.png"/>
            <BitmapImage x:Key="CombineBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_combine.png"/>

            <BitmapImage x:Key="ExtractFlowPartialActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/extract_flowLines_partial.png"/>

            <BitmapImage x:Key="OrbDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_button_disabled.png"/>
            <BitmapImage x:Key="OrbEnabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_button_d.png"/>
            <BitmapImage x:Key="OrbEnabled_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_button_h.png"/>
            <BitmapImage x:Key="OrbActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_button_working_d.png"/>
            <BitmapImage x:Key="OrbActive_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_button_working_h.png"/>
            <BitmapImage x:Key="OrbButtonIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_button_ico_d.png"/>
            <BitmapImage x:Key="OrbButtonIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_bg_circle_button_ico_h.png"/>

            <BitmapImage x:Key="SortBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/sorting_bg.png"/>

            <BitmapImage x:Key="AmountInputBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_input_d.png"/>
            <BitmapImage x:Key="AmountInputBg_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_input_h.png"/>

            <Style TargetType="TextBlock">
                <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
            </Style>

            <Style x:Key="AlchemyAnimationStyle" TargetType="ls:AnimatedImage">
                <Setter Property="Template" Value="{StaticResource BaseAnimatedImage}"/>
                <Setter Property="Time" Value="0:0:0.033"/>
                <Setter Property="ClipSize" Value="216,240"/>
                <Setter Property="RepeatBehavior" Value="1x"/>
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/popExplosion.png"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Visibility" Value="Hidden"/>
            </Style>

            <DataTemplate x:Key="AlchemySlotTemplate" DataType="{x:Type ls:VMItem}">
                <Grid x:Name="AlchemySlotRoot" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <Image x:Name="SlotBg" Source="{DynamicResource SlotEnabled}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Rectangle x:Name="Icon" Fill="{Binding Icon}" Width="{StaticResource IconSize}" Height="{StaticResource IconSize}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Rectangle x:Name="GrayedIcon" Width="{StaticResource IconSize}" Height="{StaticResource IconSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding Visibility, ElementName=Icon, Converter={StaticResource InvertVisibilityConverter}}" Opacity="0.5">
                        <Rectangle.Fill>
                            <ImageBrush ImageSource="{Binding Icon.ImageSource}" Viewbox="{Binding Icon.Viewbox}" ViewboxUnits="{Binding Icon.ViewboxUnits}">
                                <noesis:Brush.Shader>
                                    <ls:MonochromeBrushShader/>
                                </noesis:Brush.Shader>
                            </ImageBrush>
                        </Rectangle.Fill>
                    </Rectangle>

                    <ls:AnimatedImage x:Name="VFX" Style="{StaticResource AlchemyAnimationStyle}" Margin="-64,-76" RenderTransformOrigin="0.5,0.5" ls:AttachedProperties.InheritedNumber="{Binding Source=0, Converter={StaticResource RandomConverter}, ConverterParameter=10}">
                        <ls:AnimatedImage.RenderTransform>
                            <TransformGroup>
                                <RotateTransform>
                                    <RotateTransform.Angle>
                                        <MultiBinding Converter="{StaticResource MultiplierMultiConverter}">
                                            <Binding Path="(ls:AttachedProperties.InheritedNumber)" ElementName="VFX"/>
                                            <Binding Source="134"/>
                                        </MultiBinding>
                                    </RotateTransform.Angle>
                                </RotateTransform>
                            </TransformGroup>
                        </ls:AnimatedImage.RenderTransform>
                    </ls:AnimatedImage>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseEnter">
                            <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                        </b:EventTrigger>

                        <b:DataTrigger Binding="{Binding (ls:AnimatedImage.AnimationEnded), ElementName=VFX}" Value="True">
                            <b:InvokeCommandAction Command="{Binding DataContext.EndCreationProcess, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>
                </Grid>

                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.IsCreatingItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                            <Condition Binding="{Binding IsVisible, ElementName=ExtractAndCrafting}" Value="True"/>
                            <Condition Binding="{Binding IsVisible, ElementName=AlchemySlotRoot}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="VFX" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                        <Setter TargetName="SlotBg" Property="Source" Value="{DynamicResource SlotEnabled_h}"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.IsCreatingItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding Count}" Value="0"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="SlotBg" Property="Source" Value="{DynamicResource SlotDisabled}"/>
                        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.IsCreatingItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding Count}" Value="0"/>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="SlotBg" Property="Source" Value="{DynamicResource SlotDisabled_h}"/>
                        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.IsCreatingItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Self}}" Value="CustomCount"/>
                            <Condition Value="False">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource LessThanOrEqualMultiConverter}">
                                        <Binding Path="(ls:AttachedProperties.InheritedNumber)" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="Count"/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="SlotBg" Property="Source" Value="{DynamicResource SlotDisabled}"/>
                        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.IsCreatingItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Self}}" Value="CustomCount"/>
                            <Condition Value="False">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource LessThanOrEqualMultiConverter}">
                                        <Binding Path="(ls:AttachedProperties.InheritedNumber)" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="Count"/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="SlotBg" Property="Source" Value="{DynamicResource SlotDisabled_h}"/>
                        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- RECIPES -->
            <ControlTemplate x:Key="ListEntryTemplate" TargetType="ContentControl">
                <Grid x:Name="RecipeEntryRoot">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Border x:Name="Background" Grid.Column="0" Grid.ColumnSpan="2" Background="{StaticResource LS_accent100TxtColor}" Opacity="0" CornerRadius="12" />
                    <ContentPresenter x:Name="Content" Grid.Column="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    <Image x:Name="IsNewIcon" Grid.Column="1" Source="{StaticResource NewRecipeIcon}" Stretch="None" VerticalAlignment="Center" Visibility="{Binding IsNew, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter={StaticResource TrueValue}}"/>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseEnter">
                            <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Grid>

                <ControlTemplate.Triggers>
                    <Trigger Property="Tag" Value="Disabled">
                        <Setter TargetName="Background" Property="Background" Value="{StaticResource LS_disabledPadTxtColor}"/>
                    </Trigger>
                    <Trigger Property="Tag" Value="Selected">
                        <Setter TargetName="Background" Property="Opacity" Value="0.4"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="ListEntryStyle" TargetType="ContentControl">
                <Setter Property="Template" Value="{StaticResource ListEntryTemplate}" />
                <Setter Property="ToolTipService.Placement" Value="Right"/>
                <Setter Property="noesis:StyleInteraction.Triggers">
                    <Setter.Value>
                        <noesis:StyleTriggerCollection>
                            <b:EventTrigger EventName="PreviewMouseLeftButtonUp">
                                <ls:LSPlaySound Sound="UI_Shared_Click"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                        </noesis:StyleTriggerCollection>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ListEntryTextStyle" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                <Setter Property="LineHeight" Value="{StaticResource ScaledDefaultFontSizeLineHeight}"/>
            </Style>

            <Style x:Key="AlchemyWrappingText" TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                <Setter Property="TextAlignment" Value="Center"/>
            </Style>

            <DataTemplate x:Key="RecipesListTemplate" DataType="{x:Type ls:VMRecipesCollection}">
                <StackPanel>
                    <b:Interaction.Behaviors>
                        <ls:CollectionSortBehavior x:Name="RecipesSortBehavior" ItemsSource="{Binding Recipes}" Comparer="{Binding DataContext.AlchemyRecipesComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
                    </b:Interaction.Behaviors>

                    <ls:LSToggleButton x:Name="ExpandToggle" IsChecked="False" Height="64">
                        <ls:LSToggleButton.Template>
                            <ControlTemplate TargetType="{x:Type ls:LSToggleButton}">
                                <ControlTemplate.Resources>
                                    <BitmapImage x:Key="Arrow_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/listItem_expandToggle_default.png"/>
                                    <BitmapImage x:Key="Arrow_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/listItem_expandToggle_active.png"/>

                                    <Style TargetType="TextBlock">
                                        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
                                    </Style>
                                </ControlTemplate.Resources>

                                <StackPanel Orientation="Horizontal" Background="Transparent">
                                    <Image x:Name="ToggleIcon" Source="{StaticResource Arrow_d}" Stretch="None" Margin="10,0" RenderTransformOrigin="0.5,0.5"/>

                                    <ContentPresenter x:Name="content" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                </StackPanel>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="ToggleIcon" Property="Source" Value="{StaticResource Arrow_h}"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter TargetName="ToggleIcon" Property="RenderTransform">
                                            <Setter.Value>
                                                <TransformGroup>
                                                    <RotateTransform Angle="90"/>
                                                </TransformGroup>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ls:LSToggleButton.Template>

                        <StackPanel Orientation="Horizontal">
                            <Image x:Name="GroupIcon" Source="{DynamicResource GroupIcon}" Stretch="Uniform" Width="{StaticResource ListIconSize}" Height="{StaticResource ListIconSize}" VerticalAlignment="Center" HorizontalAlignment="Center"  Margin="8,0"/>
                            <TextBlock x:Name="GroupName" VerticalAlignment="Center" Foreground="{StaticResource LS_accent75TxtColor}">
                                <Run Text="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}"/><Run 
                                    x:Name="CraftableCount" Text="{Binding TotalCraftableRecipes, StringFormat='{} ({0}/'}"/><Run 
                                    x:Name="GroupCount" Text="{Binding ItemsSource.Count, ElementName=RecipesList, StringFormat='{}{0})'}"/>
                            </TextBlock>
                        </StackPanel>
                    </ls:LSToggleButton>

                    <ItemsControl x:Name="RecipesList" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}"
                                      ItemsSource="{Binding SortedItems, ElementName=RecipesSortBehavior}"
                                      Visibility="{Binding Path=IsChecked, ElementName=ExpandToggle, Converter={StaticResource BoolToVisibleConverter}}">
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding DataContext.HideAvailableRecipes, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            <Condition Binding="{Binding DataContext.CanBeCrafted, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.ItemContainerStyle>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMRecipe}">
                                <ContentControl x:Name="EntryRoot" Style="{StaticResource ListEntryStyle}">
                                    <ContentControl.ToolTip>
                                        <ls:LSTooltip Content="{Binding DataContext.Result, ElementName=EntryRoot}"/>
                                    </ContentControl.ToolTip>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <Rectangle x:Name="Icon" Grid.Column="0" Fill="{Binding Result.Item.Icon}" Width="72" Height="72" VerticalAlignment="Center" ClipToBounds="False" Margin="8,0,0,0"/>
                                        <TextBlock x:Name="Name" Grid.Column="1" Text="{Binding Result.Item.NameAlchemy}" Style="{StaticResource ListEntryTextStyle}" Margin="12,12"/>
                                        <Button Grid.Column="0" Grid.ColumnSpan="2" Command="{Binding DataContext.ChangeSelectedRecipe, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}" Background="Transparent"/>
                                    </Grid>
                                </ContentControl>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding CanBeCrafted}" Value="False">
                                        <Setter TargetName="Icon" Property="Opacity" Value="0.8"/>
                                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_accent00TxtColor}"/>
                                        <Setter TargetName="EntryRoot" Property="Tag" Value="Disabled"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsMouseOver, ElementName=EntryRoot}" Value="True">
                                        <Setter TargetName="Icon" Property="Opacity" Value="1"/>
                                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                    </DataTrigger>
                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                <Binding Path="DataContext.SelectedRecipe" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                <Binding Path="."/>
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <Setter TargetName="EntryRoot" Property="Tag" Value="Selected"/>
                                        <Setter TargetName="Name" Property="Opacity" Value="1"/>
                                        <Setter TargetName="Icon" Property="Opacity" Value="1"/>
                                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsMouseOver, ElementName=ExpandToggle}" Value="True">
                        <Setter TargetName="GroupIcon" Property="Source" Value="{DynamicResource GroupIcon_h}"/>
                        <Setter TargetName="GroupName" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- CRAFTING -->
            <DataTemplate x:Key="CraftingSlot" DataType="{x:Type ls:VMItem}">
                <StackPanel x:Name="EntryRoot" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <StackPanel.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                            <Setter Property="Width" Value="600"/>
                            <Setter Property="TextAlignment" Value="Center"/>
                            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                        </Style>
                    </StackPanel.Resources>

                    <TextBlock x:Name="Title" Foreground="{StaticResource LS_accent75TxtColor}" Visibility="{Binding Text, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToHiddenConverter}, ConverterParameter='EmptyString'}"/>

                    <TextBlock x:Name="Name">
                        <Run x:Name="NamePrefix" Foreground="{StaticResource LS_accent75TxtColor}"/><Run x:Name="NameText" Text="{Binding NameAlchemy}" Foreground="{StaticResource LS_extraspecialTxtColor}"/>
                    </TextBlock>

                    <ContentControl x:Name="Slot" HorizontalAlignment="Center" VerticalAlignment="Center" ContentTemplate="{StaticResource AlchemySlotTemplate}" Content="{Binding .}" Tag="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <ContentControl.Resources>
                            <BitmapImage x:Key="SlotEnabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_default.png"/>
                            <BitmapImage x:Key="SlotEnabled_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_default_h.png"/>
                            <BitmapImage x:Key="SlotDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_error.png"/>
                            <BitmapImage x:Key="SlotDisabled_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_error_h.png"/>
                        </ContentControl.Resources>
                    </ContentControl>

                    <TextBlock x:Name="Count" Text="{Binding Count, StringFormat='{}{0}/1'}" Foreground="{StaticResource LS_tint100}"/>
                </StackPanel>

                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.IsCreatingItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding Count}" Value="0"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Count" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra">
                        <Setter TargetName="Count" Property="Text" Value="{Binding DataContext.TotalAvailableExtraExtracts, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, StringFormat='{}{0}/1'}"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.IsCreatingItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="False"/>
                            <Condition Binding="{Binding Count}" Value="0"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                    </MultiDataTrigger>

                    <!-- Main extract titles based on the extract type -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Main"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Air"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Title" Property="Text" Value="{Binding Source='hb918ad87gcdc2g4809g922dg0f6c34595e6b',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Main"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Earth"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Title" Property="Text" Value="{Binding Source='h9cfa94d3g61b5g4bdcg91fag64d138bad8a2',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Main"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Fey"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Title" Property="Text" Value="{Binding Source='hbd8f16fbgcc72g489egb97eg3b6c414331a1',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Main"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Fire"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Title" Property="Text" Value="{Binding Source='h85ae0acdg4ddeg4f26g8bd6g3350c47e10d7',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Main"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Shadow"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Title" Property="Text" Value="{Binding Source='h6882b06eg7116g4d13ga04cg40936915be3c',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Main"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Water"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Title" Property="Text" Value="{Binding Source='hc73e4e3ag44c0g49b7g96f8g732f01f8270a',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>

                    <!-- Extra extract names based on the extract type -->
                    <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra">
                        <Setter TargetName="NamePrefix" Property="Text" Value="{Binding Source='h7bf9cc90gb598g426egb932g150189db5be7',Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} '}"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Air"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="NameText" Property="Text" Value="{Binding Source='h2c1af163gda89g4142g8670g492407614241',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Earth"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="NameText" Property="Text" Value="{Binding Source='h53369a2cgd283g467cg924cg3938e9bbdc30',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Fey"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="NameText" Property="Text" Value="{Binding Source='h17759c79g9c66g4cf4ga71bg82b7914319a1',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Fire"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="NameText" Property="Text" Value="{Binding Source='hd7d538e9gd122g4216g9b2aga1c7aaa5c7ef',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Shadow"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="NameText" Property="Text" Value="{Binding Source='hee19fd7fg6d6fg4f9fg83d7ge350d0ea4a8d',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Extra"/>
                            <Condition Binding="{Binding AlchemyExtractType}" Value="Water"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="NameText" Property="Text" Value="{Binding Source='h7f02c548g5195g434egb3edg30c0a31130e1',Converter={StaticResource TranslatedStringConverter}}"/>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- EXTRACT CRAFTING -->
            <DataTemplate x:Key="ExtractCraftingSlot" DataType="{x:Type ls:VMTooltipItemSectionDetail}">
                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" >
                    <ContentControl x:Name="Slot" ContentTemplate="{StaticResource AlchemySlotTemplate}" Content="{Binding Item}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Left" ls:AttachedProperties.InheritedTag="CustomCount" >
                        <ContentControl.Resources>
                            <BitmapImage x:Key="SlotEnabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/extract_itemSlot_active.png"/>
                            <BitmapImage x:Key="SlotEnabled_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/extract_itemSlot_active_h.png"/>
                            <BitmapImage x:Key="SlotDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/extract_itemSlot_inactive.png"/>
                            <BitmapImage x:Key="SlotDisabled_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/extract_itemSlot_inactive_h.png"/>
                        </ContentControl.Resources>
                    </ContentControl>

                    <Image x:Name="ActiveLine" Source="{StaticResource ExtractFlowPartialActive}" Visibility="Hidden" HorizontalAlignment="Center" Stretch="None" Margin="0,-10,0,10"/>
                </StackPanel>

                <DataTemplate.Triggers>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource LessThanOrEqualMultiConverter}">
                                <Binding Path="(ls:AttachedProperties.InheritedNumber)" RelativeSource="{RelativeSource Self}"/>
                                <Binding Path="Item.Count"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter TargetName="ActiveLine" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- SORTING -->
            <ControlTemplate x:Key="SortButtonTemplate" TargetType="ls:LSButton">
                <ControlTemplate.Resources>
                    <BitmapImage x:Key="EntryBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_d.png"/>
                    <BitmapImage x:Key="EntryBg_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/selector_listitem_h.png"/>
                    <BitmapImage x:Key="BulletIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_bullet_d.png"/>
                    <BitmapImage x:Key="BulletIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_bullet_h.png"/>
                </ControlTemplate.Resources>
                <Grid x:Name="Entry">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Image x:Name="bg" Grid.Column="0" Grid.ColumnSpan="2" Source="{StaticResource EntryBg}" Stretch="None"/>
                    <Image x:Name="icon" Grid.Column="0" Source="{StaticResource BulletIcon}" Stretch="None" Margin="20,0,0,0"/>
                    <TextBlock x:Name="text" Grid.Column="1" Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{StaticResource LS_accent25TxtColor}" Margin="20,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="bg" Property="Source" Value="{StaticResource EntryBg_h}"/>
                        <Setter TargetName="icon" Property="Source" Value="{StaticResource BulletIcon_h}"/>
                        <Setter TargetName="text" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Entry" Property="Opacity" Value="0.85"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- PROCESS -->
            <Storyboard x:Key="ResultMessageStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtractCraftingMessage">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:2.8" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>

        <Grid x:Name="AlchemyRoot" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- RECIPES -->
            <Grid x:Name="RecipesList" Grid.Column="0" HorizontalAlignment="Center" Width="852"  Margin="0,44,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Sorting and filtering -->
                <StackPanel Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Left" >

                    <ls:LSToggleButton x:Name="SortToggleButton" 
                                           Template="{StaticResource SortToggleButtonTemplate}" 
                                           VerticalAlignment="Center" 
                                           Margin="60,0,0,0"/>

                    <ls:LSCheckBox x:Name="AvailableRecipesButton" 
                                       IsChecked="{Binding HideAvailableRecipes, Mode=OneWay}" 
                                       Command="{Binding ToggleHideAvailableRecipes}"
                                       Margin="20,0,0,0">
                        <ls:LSCheckBox.Template>
                            <ControlTemplate TargetType="ls:LSCheckBox">
                                <ControlTemplate.Resources>
                                    <BitmapImage x:Key="Bg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkbox_d.png"/>
                                    <BitmapImage x:Key="Bg_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkbox_h.png"/>
                                    <BitmapImage x:Key="Bg_disabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkbox_disabled.png"/>

                                    <BitmapImage x:Key="Check" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_d.png"/>
                                    <BitmapImage x:Key="Check_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_h.png"/>
                                    <BitmapImage x:Key="Check_disabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_disabled.png"/>
                                </ControlTemplate.Resources>

                                <StackPanel Orientation="Horizontal" Background="Transparent">
                                    <Grid VerticalAlignment="Center" Margin="0,0,8,0">
                                        <Image x:Name="MarkerBg" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{StaticResource Bg}" Stretch="None"/>
                                        <Image x:Name="MarkerCheck" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{StaticResource Check}" Stretch="None" Visibility="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter={StaticResource TrueValue}}"/>
                                    </Grid>

                                    <TextBlock x:Name="Text" Text="{Binding Source='hd79639b7gebffg4016ga0bfg7615cc3ca89c',Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" Style="{StaticResource DetailedListText}"/>
                                </StackPanel>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Text" Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                                        <Setter TargetName="MarkerBg" Property="Source" Value="{StaticResource Bg_h}"/>
                                        <Setter TargetName="MarkerCheck" Property="Source" Value="{StaticResource Check_h}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="MarkerBg" Property="Source" Value="{DynamicResource Bg_disabled}"/>
                                        <Setter TargetName="MarkerCheck" Property="Source" Value="{DynamicResource Check_disabled}"/>
                                        <Setter Property="Opacity" Value="0.75"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ls:LSCheckBox.Template>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="Checked">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SelectedRecipe.IsSolutionRecipe}" Operator="Equal" RightOperand="False"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>

                                <b:InvokeCommandAction Command="{Binding ChangeSelectedRecipe}" CommandParameter="{x:Null}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="Checked">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SelectedRecipe.CanBeCrafted}" Operator="Equal" RightOperand="False"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>

                                <b:InvokeCommandAction Command="{Binding ChangeSelectedRecipe}" CommandParameter="{x:Null}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSCheckBox>
                </StackPanel>

                <!-- List -->
                <ScrollViewer x:Name="RecipesScrollList" Grid.Row="1" Padding="44,0,0,0" Margin="18" Template="{StaticResource FlippedSimpleScrollViewerTemplate}" VerticalAlignment="Top" VerticalScrollBarVisibility="Auto">
                    <StackPanel>
                        <ContentPresenter x:Name="PotionsList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                    Content="{Binding Data.PotionRecipes}"
                                    ls:AttachedProperties.InheritedTag="{Binding Source='h2a90fdabg4131g46cag994agc41868d38697', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_d.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_h.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="ElixirsList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                              Content="{Binding Data.ElixirRecipes}"
                                              ls:AttachedProperties.InheritedTag="{Binding Source='h0d4195b4g618ag445fgaa9eg168f6fba5c36', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_d.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_h.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="GrenadesList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                              Content="{Binding Data.GrenadeRecipes}"
                                              ls:AttachedProperties.InheritedTag="{Binding Source='hff6fc62agd6edg463aga06ag505e235db962', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_d.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_h.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="CoatingsList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                              Content="{Binding Data.CoatingRecipes}"
                                              ls:AttachedProperties.InheritedTag="{Binding Source='h231c7ac3g48ecg49f4ga675gb6f16e824c54', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_d.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_category01_h.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="ExtractAirList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                              Content="{Binding Data.ExtractAirRecipes}"
                                              ls:AttachedProperties.InheritedTag="{Binding Source='h2553158bgad4dg4f2bgb289g73021df996b2', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Air.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Air.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="ExtractEarthList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                          Content="{Binding Data.ExtractEarthRecipes}"
                                          ls:AttachedProperties.InheritedTag="{Binding Source='h51d33125g11e0g474ag98a0gb9f4a406f593', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Earth.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Earth.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="ExtractFeyList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                          Content="{Binding Data.ExtractFeyRecipes}"
                                          ls:AttachedProperties.InheritedTag="{Binding Source='h36ced4c2g84ecg4e17g9790gd5abcc520543', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Shadow_2.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Shadow_2.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="ExtractFireList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                          Content="{Binding Data.ExtractFireRecipes}"
                                          ls:AttachedProperties.InheritedTag="{Binding Source='h3f0368d9g82b4g47fdg90b8ge1b7a026a43d', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Fire.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Fire.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="ExtractShadowList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                          Content="{Binding Data.ExtractShadowRecipes}"
                                          ls:AttachedProperties.InheritedTag="{Binding Source='h3be6ebc2g50e7g4e8fg99edg499bdbaf356b', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Shadow_1.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Shadow_1.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                        <ContentPresenter x:Name="ExtractWaterList" ContentTemplate="{StaticResource RecipesListTemplate}" 
                                          Content="{Binding Data.ExtractWaterRecipes}"
                                          ls:AttachedProperties.InheritedTag="{Binding Source='h648fff5ag77efg4846g9752gcaf6a99758e8', Converter={StaticResource TranslatedStringConverter}}">
                            <ContentPresenter.Resources>
                                <BitmapImage x:Key="GroupIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Water.png"/>
                                <BitmapImage x:Key="GroupIcon_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ItemIcons/Item_BASE_ALCH_Extract_Water.png"/>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </StackPanel>
                </ScrollViewer>

                <!-- Extract All Ingredients Button -->
                <ls:LSButton Grid.Row="2" x:Name="ExtractAllIngredients"
                                 HorizontalAlignment="Center"
                                 Style="{StaticResource BigBrownButtonStyle}"
                                 Command="{Binding CreateExtracts}"
                                 Margin="0,0,0,28"
                                 Width="600"
                                 OverwriteClickSound="UI_HUD_Alchemy_CreateExtracts_Click">
                    <ls:LSButton.Content>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h4bf5b366g76a0g424dgaa14g37124b33b746"/>
                            <Binding Path="TotalAvailableExtractions"/>
                        </MultiBinding>
                    </ls:LSButton.Content>
                </ls:LSButton>
            </Grid>

            <!-- EXTRACT AND CRAFTING -->
            <StackPanel x:Name="ExtractAndCrafting" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,44,0,0">
                <!-- Title -->
                <ContentControl Name="CraftingTitle" Style="{StaticResource BaseTitleStyle}">
                    <TextBlock Text="{Binding Source='hd40af023g3265g492dgb433gb272f433a093', Converter={StaticResource TranslatedStringConverter}}"/>
                </ContentControl>

                <!-- Extract and crafting -->
                <Grid x:Name="ExtractCrafting" HorizontalAlignment="Center" VerticalAlignment="Top">
                    <Image x:Name="AlchemyBg" Source="{StaticResource CombineBg}" HorizontalAlignment="Center" VerticalAlignment="Top" Stretch="None"/>

                    <Grid x:Name="AlchemyOrbHolder" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,312,0,0">
                        <Image x:Name="AlchemyOrb" Source="{StaticResource OrbEnabled}" Stretch="None"/>

                        <ls:AnimatedImage x:Name="AlchemyOrbVFX" Style="{StaticResource AlchemyAnimationStyle}"/>

                        <ls:LSButton x:Name="SecondaryCraftingButton" HorizontalAlignment="Center" VerticalAlignment="Center"
                                         Width="{Binding ActualWidth, ElementName=AlchemyOrb}"
                                         Height="{Binding ActualHeight, ElementName=AlchemyOrb}"
                                         Command="{Binding Command, ElementName=ExtractCraftingButton}"
                                         IsEnabled="{Binding IsEnabled, ElementName=ExtractCraftingButton}"
                                         OverwriteClickSound="UI_HUD_Alchemy_CreateSolution_Click">
                            <ls:LSButton.Template>
                                <ControlTemplate TargetType="ls:LSButton">
                                    <Border Background="Transparent">
                                        <Image x:Name="icon" Source="{StaticResource OrbButtonIcon}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Border>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="icon" Property="Source" Value="{StaticResource OrbButtonIcon_h}" />
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="icon" Property="Margin" Value="0,4,0,0"/>
                                        </Trigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                                <Condition Binding="{Binding IsCreatingItems}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ls:LSButton.Template>
                        </ls:LSButton>

                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding (ls:AnimatedImage.AnimationEnded), ElementName=AlchemyOrbVFX}" Value="True">
                                <b:InvokeCommandAction Command="{Binding DataContext.EndCreationProcess, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </Grid>

                    <Grid x:Name="Crafting" Visibility="Hidden">
                        <Grid x:Name="CraftingSolution">
                            <ContentPresenter x:Name="BaseItem" ContentTemplate="{StaticResource CraftingSlot}" Content="{Binding SelectedRecipe.BaseExtract.Item}" 
                                              HorizontalAlignment="Left" VerticalAlignment="Top" Margin="-120,132,0,0" 
                                              ToolTipService.Placement="Left" 
                                              Tag="Main">
                                <ContentPresenter.ToolTip>
                                    <ls:LSTooltip Content="{Binding DataContext.SelectedRecipe.BaseExtract, ElementName=Crafting}" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, ElementName=Crafting}"/>
                                </ContentPresenter.ToolTip>
                            </ContentPresenter>

                            <ContentPresenter x:Name="ExtraExtract" ContentTemplate="{StaticResource CraftingSlot}" Content="{Binding SelectedExtraExtract}" 
                                              HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,132,-118,0" 
                                              ToolTipService.Placement="Left" 
                                              Tag="Extra">
                                <ContentPresenter.ToolTip>
                                    <ls:LSTooltip x:Name="ExtraExtractToolTip" Content="{Binding DataContext.SelectedExtraExtract, ElementName=Crafting}" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, ElementName=Crafting}"/>
                                </ContentPresenter.ToolTip>
                            </ContentPresenter>
                        </Grid>

                        <Grid x:Name="CraftingExtract" Visibility="Collapsed">
                            <TextBlock x:Name="ExtractResultTut" Text="{Binding Source='h45fd5913g762cg44fbg8498g37522dcff3c3', Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_accent25TxtColor}" Width="800" TextAlignment="Center" TextWrapping="Wrap"/>

                            <TextBlock x:Name="ExtractResultName" Text="{Binding SelectedRecipe.BaseExtract.Item.Name}" FontSize="{StaticResource ScaledLargeFontSize}" Foreground="{StaticResource LS_accent100TxtColor}" Width="800" Margin="0,140,0,0" TextAlignment="Center"/>

                            <TextBlock x:Name="ExtractResultCount" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_baseTxtColor}" Margin="0,190,0,0" TextAlignment="Center">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="ha1a20103gb5b2g45a8gaf1fgea40cca68201"/>
                                        <Binding Path="SelectedRecipe.BaseExtract.Item.Count"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>

                            <ContentPresenter x:Name="ExtractSlot1" ContentTemplate="{StaticResource ExtractCraftingSlot}" Content="{Binding SelectedRecipe.BaseExtract}" 
                                              HorizontalAlignment="Left" VerticalAlignment="Top" Margin="153,246,0,0" 
                                              ls:AttachedProperties.InheritedNumber="1"/>

                            <ContentPresenter x:Name="ExtractSlot2" ContentTemplate="{StaticResource ExtractCraftingSlot}" Content="{Binding SelectedRecipe.BaseExtract}" 
                                              HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,246,0,0" 
                                              ls:AttachedProperties.InheritedNumber="2"/>

                            <ContentPresenter x:Name="ExtractSlot3" ContentTemplate="{StaticResource ExtractCraftingSlot}" Content="{Binding SelectedRecipe.BaseExtract}" 
                                              HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,246,153,0" 
                                              ls:AttachedProperties.InheritedNumber="3"/>
                        </Grid>
                        
                        <StackPanel x:Name="Result" DataContext="{Binding SelectedRecipe.Result}" 
                                        HorizontalAlignment="Center" Margin="0,658,0,0"
                                        ToolTipService.Placement="Left">
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                    <Setter Property="TextAlignment" Value="Center"/>
                                    <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                </Style>
                            </StackPanel.Resources>

                            <StackPanel.ToolTip>
                                <ls:LSTooltip Content="{Binding DataContext.SelectedRecipe.Result, ElementName=Crafting}" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, ElementName=Crafting}"/>
                            </StackPanel.ToolTip>

                            <ContentControl HorizontalAlignment="Center" VerticalAlignment="Center" ContentTemplate="{StaticResource AlchemySlotTemplate}" Content="{Binding Item}" Tag="{Binding ElementName=Result}">
                                <ContentControl.Resources>
                                    <BitmapImage x:Key="SlotEnabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_default.png"/>
                                    <BitmapImage x:Key="SlotEnabled_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_default_h.png"/>
                                    <BitmapImage x:Key="SlotDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_disabled.png"/>
                                    <BitmapImage x:Key="SlotDisabled_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/crafting_itemFrame_disabled.png"/>
                                </ContentControl.Resources>
                            </ContentControl>

                            <TextBlock x:Name="ResultName" Text="{Binding Item.Name}" FontSize="{StaticResource ScaledBigFontSize}" Foreground="{StaticResource LS_extraspecialTxtColor}" Width="800" TextWrapping="Wrap" LineStackingStrategy="BlockLineHeight" LineHeight="{StaticResource ScaledIntermediateFontSizeLineHeight}" Margin="0,16,0,0"/>
                        </StackPanel>
                    </Grid>
                </Grid>

                <Grid Margin="0,32,0,0">
                    <!-- Errors -->
                    <TextBlock x:Name="ExtractCraftingError" 
                                   Style="{StaticResource AlchemyWrappingText}" 
                                   Foreground="{StaticResource LS_alertTxtColor}" 
                                   FontSize="{StaticResource ScaledLargeFontSize}" 
                                   Visibility="Hidden" MaxWidth="800" Margin="0,16,0,0"/>
                    <TextBlock x:Name="ExtractCraftingTutorial" Text="{Binding Source='h869eeab2g5859g4defg8eb7ge77cc11eaa1a',Converter={StaticResource TranslatedStringConverter}}" 
                                   Style="{StaticResource AlchemyWrappingText}" 
                                   Foreground="{StaticResource LS_accent100TxtColor}" 
                                   FontSize="{StaticResource ScaledDefaultFontSize}" 
                                   Visibility="Hidden" MaxWidth="800" Margin="0,16,0,0"/>

                    <!-- Amount Input -->
                    <StackPanel x:Name="AmountInput" Visibility="Hidden">

                        <TextBlock x:Name="AmountInputTitle" Text="{Binding Source='h7a90a95cgf7b0g4b53g93efg2837c4dc267a', Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_extraspecialTxtColor}" HorizontalAlignment="Center"/>

                        <StackPanel  Orientation="Horizontal" HorizontalAlignment="Center" >
                            <ls:LSButton x:Name="NavigationLeftButton" Template="{StaticResource IconButtonTemplate}" VerticalAlignment="Center">
                                <ls:LSButton.Resources>
                                    <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_d.png"/>
                                    <BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_h.png"/>
                                    <BitmapImage x:Key="ButtonPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_p.png"/>
                                    <BitmapImage x:Key="ButtonDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_disabled.png"/>
                                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                                </ls:LSButton.Resources>

                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="LSButtonPressed">
                                        <b:ChangePropertyAction TargetObject="{Binding .}" PropertyName="ItemsToCraft" Value="{Binding ItemsToCraft, Converter={StaticResource AddConverter}, ConverterParameter=-1}"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseEnter">
                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseLeftButtonUp">
                                        <ls:LSPlaySound Sound="UI_Shared_Click"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseLeftButtonDown">
                                        <ls:LSPlaySound Sound="UI_Shared_Press"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>

                            <Grid>
                                <Image x:Name="AmountInputBg" Source="{StaticResource AmountInputBg}" Stretch="None"/>
                                <ls:LSTextBox x:Name="AmountInputBox" Text="{Binding ItemsToCraft}" Mask="Integer" TextImmediateSourceUpdate="True" Foreground="{StaticResource LS_extraspecialTxtColor}" VerticalAlignment="Center" Background="Transparent" HorizontalContentAlignment="Center" BorderThickness="0" MaxLines="1" TextAlignment="Center" Focusable="True"/>
                            </Grid>

                            <ls:LSButton x:Name="NavigationRightButton" Template="{StaticResource IconButtonTemplate}" VerticalAlignment="Center" RenderTransformOrigin="0.5, 0.5">
                                <ls:LSButton.Resources>
                                    <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_d.png"/>
                                    <BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_h.png"/>
                                    <BitmapImage x:Key="ButtonPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_p.png"/>
                                    <BitmapImage x:Key="ButtonDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btnHalf_blue_disabled.png"/>
                                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_h.png"/>
                                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browseSmall_d.png"/>
                                </ls:LSButton.Resources>

                                <ls:LSButton.RenderTransform>
                                    <ScaleTransform ScaleX="-1"/>
                                </ls:LSButton.RenderTransform>

                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="LSButtonPressed">
                                        <b:ChangePropertyAction TargetObject="{Binding .}" PropertyName="ItemsToCraft" Value="{Binding ItemsToCraft, Converter={StaticResource AddConverter}, ConverterParameter=1}"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseEnter">
                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseLeftButtonUp">
                                        <ls:LSPlaySound Sound="UI_Shared_Click"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseLeftButtonDown">
                                        <ls:LSPlaySound Sound="UI_Shared_Press"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                        </StackPanel>
                    </StackPanel>
                </Grid>

                <!-- Buttons -->
                <ls:LSButton x:Name="ExtractCraftingButton"
                                 HorizontalAlignment="Center"
                                 Style="{StaticResource BigBrownButtonStyle}"
                                 Margin="0,24,0,0"/>

                <ls:LSButton x:Name="CraftAllItemsButton"
                                 HorizontalAlignment="Center" 
                                 Style="{StaticResource BigBrownButtonStyle}"
                                 Command="{Binding CraftItems}"
                                 CommandParameter="All"
                                 Visibility="Collapsed"
                                 Margin="0,4,0,0">
                    <ls:LSButton.Content>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="hf645785cg182fg40d2g9ed9g3f42fca2053c"/>
                            <Binding Path="SelectedRecipe.Result.Item.Count"/>
                        </MultiBinding>
                    </ls:LSButton.Content>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseEnter">
                            <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MouseLeftButtonUp">
                            <ls:LSPlaySound Sound="UI_Shared_Click"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MouseLeftButtonDown">
                            <ls:LSPlaySound Sound="UI_Shared_Press"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSButton>

                <!-- Craft message -->
                <TextBlock x:Name="ExtractCraftingMessage" 
                               Style="{StaticResource AlchemyWrappingText}"
                               Foreground="{StaticResource LS_accent100TxtColor}" Width="800" Opacity="0" Margin="0,20,0,0">
                    <TextBlock.Text>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h1b698442ga1f1g4ecagba7ag82b58143139a"/>
                            <Binding Path="TotalCreatedItems"/>
                            <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>

            </StackPanel>

            <!-- SORTING -->
            <ls:LSNineSliceImage x:Name="Filters" ImageSource="{StaticResource SortBg}" Slices="40" Padding="20,30" 
                                     HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Column="0" Margin="44,88,0,0"
                                     Visibility="{Binding IsChecked, ElementName=SortToggleButton, Converter={StaticResource BoolToVisibleConverter}}">
                <StackPanel>
                    <TextBlock Text="{Binding Source='h9414328dgbabeg4602g82c1g4c947c1c8e34',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_accent25TxtColor}" FontSize="{StaticResource ScaledSmallishFontSize}" Margin="40,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>

                    <ls:LSButton x:Name="SortNameButton" Template="{StaticResource SortButtonTemplate}"
                                     Tag="{Binding Source='h86ac5591g3822g45f1ga6d1gd39367a8481d',Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding SetSortMode}" CommandParameter="Name">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="Click">
                                <b:ChangePropertyAction TargetName="SortToggleButton" PropertyName="IsChecked" Value="False"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSButton>

                    <ls:LSButton x:Name="SortTimeButton" Template="{StaticResource SortButtonTemplate}"
                                     Tag="{Binding Source='h83250180g4f67g4697g97d4g3f698f3708ea',Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding SetSortMode}" CommandParameter="Time">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="Click">
                                <b:ChangePropertyAction TargetName="SortToggleButton" PropertyName="IsChecked" Value="False"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSButton>
                </StackPanel>
            </ls:LSNineSliceImage>
        </Grid>

        <ControlTemplate.Triggers>
            <!-- LIST -->
            <DataTrigger Binding="{Binding SelectedRecipe}" Value="{x:Null}">
                <Setter TargetName="AlchemyBg" Property="Source" Value="{StaticResource ExtractBg}"/>
                <Setter TargetName="CraftingTitle" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="ExtractCraftingError" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExtractCraftingButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExtractCraftingButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="AlchemyOrb" Property="Source" Value="{StaticResource OrbDisabled}"/>
                <Setter TargetName="ExtractCraftingTutorial" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <!-- ORB -->
            <DataTrigger Binding="{Binding IsMouseOver, ElementName=SecondaryCraftingButton}" Value="True">
                <Setter TargetName="AlchemyOrb" Property="Source" Value="{StaticResource OrbEnabled_h}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=SecondaryCraftingButton}" Value="True"/>
                    <Condition Binding="{Binding IsCreatingItems}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="AlchemyOrb" Property="Source" Value="{StaticResource OrbActive_h}"/>
            </MultiDataTrigger>

            <!-- EXTRACTS -->
            <DataTrigger Binding="{Binding SelectedRecipe, Converter={StaticResource NullToBoolFalseConverter}}" Value="False">
                <Setter TargetName="ExtractAndCrafting" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCreatingItems}" Value="False"/>
                    <Condition Binding="{Binding ExtractAir.Item.Count}" Value="0"/>
                    <Condition Binding="{Binding ExtractEarth.Item.Count}" Value="0"/>
                    <Condition Binding="{Binding ExtractFey.Item.Count}" Value="0"/>
                    <Condition Binding="{Binding ExtractFire.Item.Count}" Value="0"/>
                    <Condition Binding="{Binding ExtractShadow.Item.Count}" Value="0"/>
                    <Condition Binding="{Binding ExtractWater.Item.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ExtractAllIngredients" Property="IsEnabled" Value="False"/>
            </MultiDataTrigger>

            <!-- CRAFTING -->
            <DataTrigger Binding="{Binding SelectedRecipe, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                <Setter TargetName="Crafting" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ExtractCraftingError" Property="Text" Value="{Binding Source='ha593d514gcd01g477dgb588gdfc415f31ef4',Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="ExtractCraftingButton" Property="Content" Value="{Binding Source='hfe28d675ga44ag4895gba67gcd86f47fb61b',Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="ExtractCraftingButton" Property="Command" Value="{Binding DataContext.CraftItems, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                <Setter TargetName="ExtractCraftingButton" Property="OverwriteClickSound" Value="UI_HUD_Alchemy_CreateSolution_Click"/>
                <Setter TargetName="CraftAllItemsButton" Property="OverwriteClickSound" Value="UI_HUD_Alchemy_CreateSolution_Click"/>
                <Setter TargetName="CraftAllItemsButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedRecipe.Result.Item.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1, FallbackValue=False}" Value="True">
                <Setter TargetName="AmountInput" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedRecipe.Result.Item.Count, Converter={StaticResource LessThanConverter}, ConverterParameter=2, FallbackValue=True}" Value="True">
                <Setter TargetName="CraftAllItemsButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="AmountInput" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ItemsToCraft, Converter={StaticResource LessThanConverter}, ConverterParameter=2, FallbackValue=True}" Value="False">
                <Setter TargetName="ExtractCraftingButton" Property="Content" Value="{Binding Source='h1deddae4gae4eg4a54gafb5ge2e61529e00e',Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="ExtractCraftingButton" Property="OverwriteClickSound" Value="UI_HUD_Alchemy_CreateSolution_Click"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCreatingItems}" Value="False"/>
                    <Condition Binding="{Binding SelectedRecipe, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    <Condition Binding="{Binding SelectedRecipe.Result.Item.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ExtractCraftingButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="ExtractCraftingError" Property="Visibility" Value="Visible"/>
                <Setter TargetName="AlchemyOrb" Property="Source" Value="{StaticResource OrbDisabled}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding IsFocused, ElementName=AmountInputBox}" Value="True">
                <Setter TargetName="AmountInputBg" Property="Source" Value="{StaticResource AmountInputBg_h}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedRecipe, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    <Condition Binding="{Binding SelectedRecipe.IsSolutionRecipe}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ExtractCrafting" Property="Margin" Value="0,-81,0,0"/>
            </MultiDataTrigger>

            <!-- If there's no real selected extra extract, set the tooltip to use the VMTooltipItemSectionDetail instead -->
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedExtraExtract"/>
                        <Binding Path="ExtractAir.Item"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="ExtraExtractToolTip" Property="Content" Value="{Binding DataContext.ExtractAir, ElementName=Crafting}"/>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedExtraExtract"/>
                        <Binding Path="ExtractEarth.Item"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="ExtraExtractToolTip" Property="Content" Value="{Binding DataContext.ExtractEarth, ElementName=Crafting}"/>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedExtraExtract"/>
                        <Binding Path="ExtractFey.Item"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="ExtraExtractToolTip" Property="Content" Value="{Binding DataContext.ExtractFey, ElementName=Crafting}"/>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedExtraExtract"/>
                        <Binding Path="ExtractFire.Item"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="ExtraExtractToolTip" Property="Content" Value="{Binding DataContext.ExtractFire, ElementName=Crafting}"/>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedExtraExtract"/>
                        <Binding Path="ExtractShadow.Item"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="ExtraExtractToolTip" Property="Content" Value="{Binding DataContext.ExtractShadow, ElementName=Crafting}"/>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedExtraExtract"/>
                        <Binding Path="ExtractWater.Item"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="ExtraExtractToolTip" Property="Content" Value="{Binding DataContext.ExtractWater, ElementName=Crafting}"/>
            </DataTrigger>

            <!-- EXTRACT CRAFTING -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedRecipe, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    <Condition Binding="{Binding SelectedRecipe.IsSolutionRecipe}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CraftingTitle" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="CraftingSolution" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="CraftingExtract" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ExtractCraftingButton" Property="Content" Value="{Binding Source='hcf348dd3g3108g41b9g88c1gc09ee4f9192a', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="ExtractCraftingButton" Property="OverwriteClickSound" Value="UI_HUD_Alchemy_CreateExtracts_Click"/>
                <Setter TargetName="CraftAllItemsButton" Property="OverwriteClickSound" Value="UI_HUD_Alchemy_CreateExtracts_Click"/>
                <Setter TargetName="CraftAllItemsButton" Property="Content">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="hf86950e1g7605g42c7gb789gd894ff687b1b"/>
                            <Binding Path="SelectedRecipe.Result.Item.Count"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="AlchemyOrbHolder" Property="Visibility" Value="Collapsed"/>

                <Setter TargetName="AlchemyBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/extract_flowLines_inactive.png"/>
                <Setter TargetName="AlchemyBg" Property="VerticalAlignment" Value="Center"/>
                <Setter TargetName="AlchemyBg" Property="Margin" Value="0,82,0,-82"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedRecipe, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    <Condition Binding="{Binding SelectedRecipe.IsSolutionRecipe}" Value="False"/>
                    <Condition Binding="{Binding SelectedRecipe.CanBeCrafted}" Value="True"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="AlchemyBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/extract_flowLines_active.png"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding IsChecked, ElementName=AvailableRecipesButton}" Value="True">
                <Setter TargetName="ExtractAirList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExtractEarthList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExtractFeyList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExtractFireList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExtractShadowList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExtractWaterList" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- PROCESS -->
            <DataTrigger Binding="{Binding IsCreatingItems}" Value="True">
                <Setter TargetName="AlchemyOrb" Property="Source" Value="{StaticResource OrbActive}"/>
                <Setter TargetName="ExtractCraftingButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="CraftAllItemsButton" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCreatingItems}" Value="True"/>
                    <Condition Binding="{Binding IsVisible, ElementName=ExtractAndCrafting}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <StopStoryboard BeginStoryboardName="ResultMessageTextStoryboard"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="AlchemyOrbVFX" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding IsCreatingItems}" Value="True">
                <DataTrigger.ExitActions>
                    <BeginStoryboard x:Name="ResultMessageTextStoryboard" Storyboard="{StaticResource ResultMessageStoryboard}"/>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <!-- SCALING -->
            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.UIScaling}" Value="Minimal">
                <Setter TargetName="BaseItem" Property="Margin" Value="-120,152,0,0"/>
                <Setter TargetName="ExtraExtract" Property="Margin" Value="0,152,-118,0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.UIScaling}" Value="Small">
                <Setter TargetName="BaseItem" Property="Margin" Value="-120,142,0,0"/>
                <Setter TargetName="ExtraExtract" Property="Margin" Value="0,142,-118,0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.UIScaling}" Value="Large">
                <Setter TargetName="BaseItem" Property="Margin" Value="-120,122,0,0"/>
                <Setter TargetName="ExtraExtract" Property="Margin" Value="0,122,-118,0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.UIScaling}" Value="ExtraLarge">
                <Setter TargetName="BaseItem" Property="Margin" Value="-120,113,0,0"/>
                <Setter TargetName="ExtraExtract" Property="Margin" Value="0,113,-118,0"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--SINGLE CLICK ITEM TEMPLATE FOR POPOUT-->
    <Style x:Key="SingleClickBaseInvContainerItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="{DynamicResource ScaledNewSlotSize}"/>
        <Setter Property="Height" Value="{DynamicResource ScaledNewSlotSize}"/>
        <Setter Property="noesis:StyleInteraction.Behaviors">
            <Setter.Value>
                <noesis:StyleBehaviorCollection>
                    <ls:MouseModifyBehavior SuppressMouseEvents="{Binding Path=(ls:MultiSelect.IsEnabled) ,RelativeSource={RelativeSource AncestorType=ListBoxItem}}"/>
                </noesis:StyleBehaviorCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="ls:ContextMenuService.Context" Value="Inventory"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <ls:LSButton Command="{Binding DataContext.UseGameObject, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Object}" Padding="0">

                        <ls:LSEntityObject Context="Inventory" DataContext="{Binding Object}" EntityRef="{Binding EntityHandle}" x:Name="invCellBase" Background="{TemplateBinding Background}" ToolTipService.Placement="Right" Tag="{Binding DataContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ls:ContextMenuService.GenerateEnabled="False" ls:MoveFocus.Focusable="True" Focusable="True" AllowDrop="False">

                            <b:Interaction.Behaviors>
                                <ls:ContextMenuFillBehavior Context="Inventory" Player="{Binding DataContext.CurrentPlayer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" TargetObject="{Binding .}" Source="{Binding SelectedItems,ElementName=InventoryHolder}" Command="{Binding DataContext.ContextActionPressed, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:Interaction.Behaviors>
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseEnter">
                                    <b:InvokeCommandAction IsEnabled="{Binding IsNew}" Command="{Binding DataContext.ClearItemNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <ls:LSEntityObject.ToolTip>
                                <ls:LSTooltip Content="{Binding Path=DataContext.Object, RelativeSource={RelativeSource Mode=TemplatedParent}}" ls:TooltipExtender.Owner="{Binding Tag.CurrentPlayer.SelectedCharacter, ElementName=invCellBase}"/>
                            </ls:LSEntityObject.ToolTip>


                            <ContentPresenter IsHitTestVisible="False"/>
                            <TextBlock x:Name="EquipmentLetter" Text="{Binding Source='h9079b9dcgb3b5g4f5cg9ca0gccadfa842d28',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource EquippedTextStyle}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="4,0,0,-4"/>
                            <Control Style="{StaticResource NewInventoryCellItemStyle}" />
                            <Image x:Name="SelectedImg" Source="{StaticResource InvSlot_Selector}" Visibility="Hidden" Stretch="Fill" IsHitTestVisible="False"/>
                            <Rectangle Fill="{StaticResource LS_DisabledPanelColor}" Visibility="{Binding Tag, ElementName=CharacterPanelHolder, Converter={StaticResource BoolToCollapsedConverter}}"/>
                        </ls:LSEntityObject>
                    </ls:LSButton>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SelectedImg" Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SelectedImg" Property="Opacity" Value="1"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Object.Equipped}" Value="NotEquipped">
                            <Setter TargetName="EquipmentLetter" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Object, Converter={StaticResource TypeConverter}}" Value="ls.Character">
                            <Setter TargetName="EquipmentLetter" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!--EQUIPMENT STYLE-->
    <Style x:Key="newEquipmentSlotStyle" TargetType="ls:LSButton" BasedOn="{StaticResource {x:Type ls:LSButton}}">
        <Setter Property="noesis:StyleInteraction.Behaviors">
            <Setter.Value>
                <noesis:StyleBehaviorCollection>
                    <ls:DragGenericBehavior StartDragCommand="{Binding DataContext.DragEquipmentSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    <ls:DropOnGenericBehavior DropCommand="{Binding DataContext.DropEquipmentSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                </noesis:StyleBehaviorCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="Command" Value="{Binding DataContext.ShowAvailableEquipmentDelayedCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="CommandParameter" Value="{Binding}" />
        <Setter Property="noesis:StyleInteraction.Triggers">
            <Setter.Value>
                <noesis:StyleTriggerCollection>
                    <b:EventTrigger EventName="MouseEnter">
                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                        <b:InvokeCommandAction IsEnabled="{Binding IsNew}" Command="{Binding DataContext.UpdateEquipmentSlotNewFlagCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding DataContext.UnequipItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                    </b:EventTrigger>
                </noesis:StyleTriggerCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipService.Placement" Value="Right"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSButton">
                    <ControlTemplate.Resources>
                        <BitmapImage  x:Key="SelArrowUri" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EQSlots_overlaySelected_arrow.png" />
                        <BitmapImage  x:Key="SelOverlayUri" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EQSlots_overlaySelected.png" />
                    </ControlTemplate.Resources>
                    <Grid x:Name="root" Width="{StaticResource ScaledNewSlotSize}" Height="{StaticResource NewSlotSize}" ToolTipService.IsEnabled="{Binding Item,Converter={StaticResource NullToBoolFalseConverter}}" Background="Transparent" ToolTipService.ShowOnDisabled="True" VerticalAlignment="Center" HorizontalAlignment="Center" ToolTipService.Placement="{TemplateBinding ToolTipService.Placement}">
                        <Grid.ToolTip>
                            <ls:LSTooltip x:Name="tooltip" IsHitTestVisible="False" Content="{Binding Path=DataContext.Item,ElementName=root}"/>
                        </Grid.ToolTip>
                        <Image x:Name="SlotBg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_torch.png" Visibility="Collapsed"/>
                        <Image x:Name="SlotBlank" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_blank.png" Visibility="Visible"/>
                        <ls:LSEntityObject EntityRef="{Binding Item.EntityHandle}" Context="Inventory" Background="{Binding Item.Icon}" Width="{StaticResource ScaledNewItemIconSize}" Height="{StaticResource ScaledNewItemIconSize}"/>
                        <Grid x:Name="IconControl" Background="{DynamicResource EquipmentSlotBg}" Width="{StaticResource NewIconSlotSize}" Height="{StaticResource NewIconSlotSize}" Opacity="1.0" DataContext="{Binding Item}">
                            <Image x:Name="RarityBackground" Style="{StaticResource RarityFrameBackgroundImageStyle}"/>
                            <ls:LSEntityObject EntityRef="{Binding EntityHandle}" Context="Inventory" Background="{Binding Icon}"/>
                            <Image x:Name="RarityForeground" Style="{StaticResource RarityFrameForegroundImageStyle}"/>
                        </Grid>
                        <Rectangle x:Name="greyscaleImg"  Opacity="0.5" Fill="#17000a" Visibility="Collapsed"/>
                        <!-- Highlight slot when hovered -->
                        <Image x:Name="hoverImg" IsHitTestVisible="False" Visibility="Collapsed" Stretch="Uniform" Source="{StaticResource ActiveSlot_h_img}"/>
                        <!--New item indication-->
                        <!--<Image Style="{StaticResource NewInventoryCellItemImageStyle}"/>-->
                        <Rectangle x:Name="DisableLayer" Opacity="0" Fill="Black" IsHitTestVisible="False"/>

                        <!-- Selected slot indicator -->
                        <Image x:Name="SelOverlay" Source="{StaticResource SelOverlayUri}" Visibility="Collapsed" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False"/>
                        <Image x:Name="SelArrow" Source="{StaticResource SelArrowUri}" Visibility="Collapsed" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" IsHitTestVisible="False" Margin="0,-12,0,0"/>


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="hoverImg" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding EquippedType}" Value="FromTwoHanded">
                            <Setter TargetName="RarityBackground" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RarityForeground" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="greyscaleImg" Property="Visibility" Value="Visible"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding IsSelecting}" Value="True">
                            <Setter TargetName="DisableLayer" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="SelOverlay" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SelArrow" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataContext.HasEquipmentFilter, ElementName=EquipmentSlots}" Value="False">
                            <Setter TargetName="DisableLayer" Property="Visibility" Value="Hidden"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding EquippedType}" Value="None">
                            <Setter TargetName="SlotBlank" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SlotBg" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Tag,ElementName=equipmentPanel}" Value="False">
                            <Setter TargetName="IconControl" Property="Opacity" Value="{DynamicResource OtherPlayersItemOpacity}"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0], Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="ls.VMItem"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].IsEquipment, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                            <Binding Path="DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].EquipmentSlotType" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                            <Binding Path="SlotType"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                            <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                            <Binding Path="DataContext.OwnerUserID" ElementName="EquipmentSlots"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="hoverImg" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0], Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="ls.VMItem"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].IsEquipment, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].EquipmentSlotType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Ring"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].EquipmentSlotType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Ring2"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].EquipmentSlotType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Ring3"/>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                            <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                            <Binding Path="DataContext.OwnerUserID" ElementName="EquipmentSlots"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="hoverImg" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0], Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="ls.VMItem"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].IsEquipment, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].EquipmentSlotType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="MeleeMainHand"/>
                                <Condition Binding="{Binding SlotType}" Value="MeleeOffHand"/>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                            <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                            <Binding Path="DataContext.OwnerUserID" ElementName="EquipmentSlots"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="hoverImg" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0], Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="ls.VMItem"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].IsEquipment, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects[0].EquipmentSlotType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="RangedMainHand"/>
                                <Condition Binding="{Binding SlotType}" Value="RangedOffHand"/>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                            <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                            <Binding Path="DataContext.OwnerUserID" ElementName="EquipmentSlots"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="hoverImg" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="tooltip" Property="Content" Value="{Binding Source='hcc92420fgadcfg4a13g90feg6996722734b6',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="root" Property="ToolTipService.IsEnabled" Value="True"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Tag, ElementName=CharacterPanelHolder}" Value="False">
                            <Setter TargetName="DisableLayer" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="DisableLayer" Property="Opacity" Value="0"/>
                            <Setter TargetName="DisableLayer" Property="Fill" Value="{StaticResource LS_DisabledPanelColor}"/>
                        </DataTrigger>

                        <!--SLOT BACKGROUNDS-->
                        <DataTrigger Binding="{Binding SlotType}" Value="Amulet">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_amulet.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Ring">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_ring01.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Ring2">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_ring02.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Ring3">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_ring02.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="VanityBody">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_shirt.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="VanityBoots">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_shoes.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Helmet">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_head.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Boots">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_feet.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Cloak">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_cloak.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Gloves">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_gloves.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Breast">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_chest.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Underwear">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_underwear.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="MusicalInstrument">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_instrument.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="MeleeMainHand">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_melee_mainhand.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="MeleeOffHand">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_melee_offhand.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="RangedMainHand">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_ranged_mainhand.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="RangedOffHand">
                            <Setter TargetName="SlotBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EquipSlots/EQ_ranged_offhand.png"/>
                        </DataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
    </Style>

    <!--TOGGLEABLE EQ SLOTS TEMPLATES-->
    <ControlTemplate x:Key="VisibilityButtonTemplate" TargetType="ls:LSButton">
        <StackPanel Orientation="Horizontal">
            <Grid VerticalAlignment="Top" HorizontalAlignment="Left">
                <Image x:Name="frame" VerticalAlignment="Center" HorizontalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_d_active.png" Stretch="None"/>
                <Image x:Name="icon" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{DynamicResource IconNormal}" Stretch="None">
                    <!-- Default is hidden-->
                    <Image.Style>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Image.Style>
                </Image>
                <Rectangle Fill="{StaticResource LS_DisabledPanelColor}" Visibility="{Binding Tag, ElementName=CharacterPanelHolder, Converter={StaticResource BoolToCollapsedConverter}}"/>
                <Rectangle x:Name="DimDownVisibilityCover" Width="40" Height="40" Opacity="0.6" Fill="Black" IsHitTestVisible="False"/>
            </Grid>
            <TextBlock Name="HelmetToggleString" Text="{Binding Source='h90154bd4g08b9g46efg8e70gbce5d5a99e1a',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource DetailedListText}" Visibility="Collapsed" Margin="4,0,-600,0" noesis:Text.StrokeThickness="4" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}">
                <TextBlock.Effect>
                    <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                </TextBlock.Effect>
            </TextBlock>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding VisibilityType}" Value="Visible">
                <Setter Property="Style" TargetName="icon">
                    <Setter.Value>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" TargetName="HelmetToggleString" Value="{Binding Source='h90154bd4g08b9g46efg8e70gbce5d5a99e1a',Converter={StaticResource TranslatedStringConverter}}"/>

            </DataTrigger>

            <DataTrigger Binding="{Binding VisibilityType}" Value="CinematicsHidden">
                <Setter Property="Style" TargetName="icon">
                    <Setter.Value>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" TargetName="HelmetToggleString" Value="{Binding Source='h57dce093g8d4ag43b4gb7a3g525250a499c1',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding VisibilityType}" Value="Hidden">
                <Setter Property="Style" TargetName="icon">
                    <Setter.Value>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" TargetName="HelmetToggleString" Value="{Binding Source='h5bd7b04cg842eg4892ga9b7ga421ad707517',Converter={StaticResource TranslatedStringConverter}}"/>

            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
                <Setter Property="Visibility" Value="Visible" TargetName="HelmetToggleString"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
            </Trigger>

            <DataTrigger Binding="{Binding IsSelecting}" Value="True">
                <Setter TargetName="DimDownVisibilityCover" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.HasEquipmentFilter, ElementName=EquipmentSlots}" Value="False">
                <Setter TargetName="DimDownVisibilityCover" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="HelmetEQTemplate" TargetType="Control">
        <Grid HorizontalAlignment="Left">
            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}"/>
            <ls:LSButton x:Name="VisibilityButton" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="0,-40,0,0" Command="{Binding DataContext.ChangeEquipmentVisibilityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" Template="{StaticResource VisibilityButtonTemplate}" Opacity="0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" TargetName="VisibilityButton"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="StowedVisibilityButtonTemplate" TargetType="ls:LSButton">
        <StackPanel Orientation="Horizontal">
            <TextBlock Name="MusicalToggleString" Text="{Binding Source='h99bd79aeg8906g4400g9bdbg2ea075945d2e',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource DetailedListText}" Margin="-600,0,4,0" TextAlignment="Right" Visibility="Collapsed" noesis:Text.StrokeThickness="4" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}">
                <TextBlock.Effect>
                    <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                </TextBlock.Effect>
            </TextBlock>
            <Grid>
                <Image x:Name="frame" HorizontalAlignment="Left" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_d_active.png" Stretch="None"/>
                <Image x:Name="icon" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{DynamicResource IconNormal}" Stretch="None">
                    <!-- Default is hidden-->
                    <Image.Style>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Image.Style>
                </Image>
                <Rectangle Fill="{StaticResource LS_DisabledPanelColor}" Visibility="{Binding Tag, ElementName=CharacterPanelHolder, Converter={StaticResource BoolToCollapsedConverter}}"/>
            </Grid>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding StowedVisibility}" Value="ShowWeaponOnly">
                <Setter Property="Style" TargetName="icon">
                    <Setter.Value>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" TargetName="MusicalToggleString" Value="{Binding Source='hddb17d4eg181fg4e65g9f0cg8e430dc903ca',Converter={StaticResource TranslatedStringConverter}}"/>

            </DataTrigger>

            <DataTrigger Binding="{Binding StowedVisibility}" Value="ShowMusicalInstrumentOnly">
                <Setter Property="Style" TargetName="icon">
                    <Setter.Value>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_dialogueNone_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" TargetName="MusicalToggleString" Value="{Binding Source='hfb427664gb836g49ebga804g0aa44391e8ad',Converter={StaticResource TranslatedStringConverter}}"/>

            </DataTrigger>

            <DataTrigger Binding="{Binding StowedVisibility}" Value="ShowAll">
                <Setter Property="Style" TargetName="icon">
                    <Setter.Value>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/ico_visibility_none_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
                <Setter Property="Visibility" Value="Visible" TargetName="MusicalToggleString"/>

            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MuscialEQTemplate">

        <Grid>
            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" VerticalAlignment="Bottom"/>
            <ls:LSButton x:Name="VisibilityButton" Command="{Binding DataContext.ChangeStowedVisibilityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" Template="{StaticResource StowedVisibilityButtonTemplate}" Visibility="Collapsed" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,-40,0,0">
            </ls:LSButton>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="VisibilityButton"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="VanityButtonTemplate" TargetType="ls:LSButton">
        <ControlTemplate.Resources>
            <ImageSource x:Key="ActiveFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_d_active.png</ImageSource>
        </ControlTemplate.Resources>

        <StackPanel Orientation="Horizontal">
            <TextBlock Name="VanityToggleString" DockPanel.Dock="Top" Text="{Binding Source='h5c3d81adg53ffg44f7gaabfg58ddbfb5d13d',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource DetailedListText}" TextAlignment="Right" Visibility="Collapsed" Margin="-600,0,0,0" noesis:Text.StrokeThickness="4" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}">
                <TextBlock.Effect>
                    <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                </TextBlock.Effect>
            </TextBlock>
            <Grid>
                <Image x:Name="frame" HorizontalAlignment="Left" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_d.png" Stretch="None"/>
                <Image x:Name="icon" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{DynamicResource IconNormal}" Stretch="None" Margin="-44">
                    <Image.Style>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_EQ_selected.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_EQ_selected.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_EQ_selected.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Image.Style>
                </Image>
                <Rectangle Fill="{StaticResource LS_DisabledPanelColor}" Visibility="{Binding Tag, ElementName=CharacterPanelHolder, Converter={StaticResource BoolToCollapsedConverter}}"/>
            </Grid>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ArmorSetVisibility}" Value="Vanity">
                <Setter Property="Style" TargetName="icon">
                    <Setter.Value>
                        <Style TargetType="Image">
                            <Style.Resources>
                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_d.png</ImageSource>
                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_h.png</ImageSource>
                                <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_h.png</ImageSource>
                            </Style.Resources>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" Value="{Binding Source='hd0ce1dceg17fcg427cga007gad73bae7e0ab',Converter={StaticResource TranslatedStringConverter}}" TargetName="VanityToggleString"/>
                <Setter Property="Source" Value="{StaticResource ActiveFrame}" TargetName="frame"/>
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
                <Setter Property="Visibility" Value="Visible" TargetName="VanityToggleString"/>

            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Equipment/toggle_visibility_h_active.png" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="WeaponAttackBonusTemplate" TargetType="Control">
        <Grid HorizontalAlignment="Stretch" DataContext="{Binding Stats}" Background="{StaticResource LS_PopUpBackgroundColor}">
            <Grid.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource DetailedListValue}">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="TextAlignment" Value="Center"/>
                </Style>
                <Style x:Key="DualLineBreaks" TargetType="Border">
                    <Setter Property="BorderBrush" Value="{StaticResource LS_tint20}"/>
                    <Setter Property="BorderThickness" Value="0,0,3,0"/>
                    <Setter Property="Margin" Value="0,6"/>
                </Style>
                <Style x:Key="DualLineBreaksMirror" BasedOn="{StaticResource DualLineBreaks}" TargetType="Border">
                    <Setter Property="BorderThickness" Value="3,0,0,0"/>
                </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- ==== ATTACK BONUS ROW ==== -->
            <Border x:Name="AtackBonusRow" Grid.Row="0" Style="{StaticResource RowBG_d}" HorizontalAlignment="Stretch" Margin="2,0" ToolTipService.Placement="Right"  ToolTipService.VerticalOffset="-80">
                <Border.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=DataContext.AttackBonus, ElementName=AtackBonusRow}"/>
                </Border.ToolTip>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                    </Grid.ColumnDefinitions>
                    <!--MELEE BONUS-->
                    <TextBlock Grid.Column="0" x:Name="MeleeBonus_MainH" Text="{Binding MeleeAttackBonus.Value, StringFormat=' {0:+#;-#;- }'}"/>
                    <Border x:Name="MeleeBonusSeparatorLine" Grid.Column="0" Style="{StaticResource DualLineBreaks}"/>
                    <TextBlock Grid.Column="1" x:Name="MeleeBonus_OffH" Text="{Binding OffHandMeleeAttackBonus.Value, StringFormat=' {0:+#;-#;- }'}"/>

                    <!--LABEL-->
                    <TextBlock Grid.Column="2" Text="{Binding Source='h4db5409ag8fb5g4d46g88a1g465c84e20fef',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource DetailedListText}" HorizontalAlignment="Center"/>

                    <!--RANGED BONUS-->
                    <TextBlock Grid.Column="3" x:Name="RangedBonus_MainH" Text="{Binding RangedAttackBonus.Value, StringFormat=' {0:+#;-#;- }'}"/>
                    <Border x:Name="RangedBonusSeparatorLine" Grid.Column="4" Style="{StaticResource DualLineBreaksMirror}"/>
                    <TextBlock x:Name="RangedBonus_OffH" Grid.Column="4" Text="{Binding OffHandRangedAttackBonus.Value, StringFormat=' {0:+#;-#;- }'}"/>
                </Grid>
            </Border>

            <!-- ==== DAMAGE ROW ==== -->
            <Border x:Name="DamageBonusRow"  Grid.Row="1" Style="{StaticResource RowBG_d}" HorizontalAlignment="Stretch" Margin="2,0" ToolTipService.Placement="Right" ToolTipService.VerticalOffset="-80">
                <Border.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=DataContext.EquippedWeaponDamage, ElementName=DamageBonusRow}"/>
                </Border.ToolTip>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                        <ColumnDefinition Width="{Binding Source={StaticResource CSSlotSize}}"/>
                    </Grid.ColumnDefinitions>
                    <!--MELEE DAMAGE -->
                    <TextBlock Grid.Column="0" x:Name="MeleeDamage_MainH">
                        <ls:TextBlockFormatter.SourceText>                                 
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h1c706361g066ag4701gb902g31e2406b5dea"/>
                                <Binding Path="MeleeAttackDamageRange.Value"/>
                                <Binding Path="MeleeAttackDamageRange.Max"/>
                            </MultiBinding>
                        </ls:TextBlockFormatter.SourceText>
                    </TextBlock>
                    <Border Grid.Column="0" x:Name="MeleeDamageSeparatorLine" Style="{StaticResource DualLineBreaks}"/>
                    <TextBlock Grid.Column="1" x:Name="MeleeDamage_OffH">
                        <ls:TextBlockFormatter.SourceText>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h1c706361g066ag4701gb902g31e2406b5dea"/>
                                <Binding Path="OffHandMeleeAttackDamageRange.Value"/>
                                <Binding Path="OffHandMeleeAttackDamageRange.Max"/>
                            </MultiBinding>
                        </ls:TextBlockFormatter.SourceText>
                    </TextBlock>
                    <!--LABEL-->
                    <TextBlock Grid.Column="2" Text="{Binding Source='h53477166gd2ebg4769gad58gc949e73e89c4',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource DetailedListText}" HorizontalAlignment="Center"/>

                    <!--RANGED DAMAGE -->
                    <TextBlock Grid.Column="3" x:Name="RangedDamage_MainH">
                        <ls:TextBlockFormatter.SourceText>       
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h1c706361g066ag4701gb902g31e2406b5dea"/>
                                <Binding Path="RangedAttackDamageRange.Value"/>
                                <Binding Path="RangedAttackDamageRange.Max"/>
                            </MultiBinding>
                        </ls:TextBlockFormatter.SourceText>
                    </TextBlock>
                    <Border Grid.Column="4" x:Name="RangedDamageSeparatorLine" Style="{StaticResource DualLineBreaksMirror}"/>
                    <TextBlock Grid.Row="4" x:Name="RangedDamage_OffH" Grid.Column="4">
                        <ls:TextBlockFormatter.SourceText>       
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h1c706361g066ag4701gb902g31e2406b5dea"/>
                                <Binding Path="OffHandRangedAttackDamageRange.Value"/>
                                <Binding Path="OffHandRangedAttackDamageRange.Max"/>
                            </MultiBinding>
                        </ls:TextBlockFormatter.SourceText>
                    </TextBlock>
                </Grid>
            </Border>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True" SourceName="AtackBonusRow">
                <Setter TargetName="AtackBonusRow" Property="Background" Value="{StaticResource RowBG_h}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="DamageBonusRow">
                <Setter TargetName="DamageBonusRow" Property="Background" Value="{StaticResource RowBG_h}"/>
            </Trigger>

            <DataTrigger Binding="{Binding HasMeleeDualWielding}" Value="False">
                <Setter TargetName="MeleeBonus_MainH" Property="Grid.ColumnSpan" Value="2"/>
                <Setter TargetName="MeleeBonus_OffH" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="MeleeBonusSeparatorLine" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="MeleeDamage_MainH" Property="Grid.ColumnSpan" Value="2"/>
                <Setter TargetName="MeleeDamage_OffH" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="MeleeDamageSeparatorLine" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding HasRangedDualWielding}" Value="False">
                <Setter TargetName="RangedBonus_MainH" Property="Grid.ColumnSpan" Value="2"/>
                <Setter TargetName="RangedBonus_OffH" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="RangedBonusSeparatorLine" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="RangedDamage_MainH" Property="Grid.ColumnSpan" Value="2"/>
                <Setter TargetName="RangedDamage_OffH" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="RangedDamageSeparatorLine" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Equipment.RangedMainHand.Item, Converter={StaticResource NullToBoolTrueConverter}}" Value="True">
                <Setter TargetName="RangedBonus_MainH" Property="Text" Value="-"/>
                <Setter TargetName="RangedDamage_MainH" Property="ls:TextBlockFormatter.SourceText" Value="-"/>
            </DataTrigger>


        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ===== INVENTORY GRID  ===== -->

    <Style x:Key="InventoryGridStyle" TargetType="ls:LSGrid">
        <Setter Property="noesis:Element.PPAAMode" Value="Disabled"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ContainerData" Value="{Binding .}"/>
        <Setter Property="IndexParam" Value="Index"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="CellWidth" Value="{DynamicResource ScaledNewSlotSize}"/>
        <Setter Property="CellHeight" Value="{DynamicResource ScaledNewSlotSize}"/>
        <Setter Property="HorizontalSpacing" Value="{DynamicResource ScaledNewInvSpacing}"/>
        <Setter Property="VerticalSpacing" Value="{DynamicResource ScaledNewInvSpacing}"/>
        <Setter Property="AutoIndex" Value="False"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding CurrentFilter, ElementName='FilteringContainerHolder', Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                <Setter Property="AutoIndex" Value="True"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsChecked, ElementName=ChangePartyContextButton}" Value="True">
                <Setter Property="AutoIndex" Value="True"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding (ls:AttachedProperties.InheritedNumber), RelativeSource={RelativeSource Self}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter Property="Columns">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource DivideMultiConverter}" ConverterParameter="Floor">
                            <Binding Path="(ls:AttachedProperties.InheritedNumber)" RelativeSource="{RelativeSource Self}"/>
                            <Binding Source="{StaticResource ScaledNewSlotSize}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FilterInventoryGridStyle" BasedOn="{StaticResource InventoryGridStyle}" TargetType="ls:LSGrid">
        <Setter Property="AllowDrop" Value="False"/>
    </Style>


    <ItemsPanelTemplate x:Key="FilterInventoryGridTemplate">
        <ls:LSGrid x:Name="InvGrid" Style="{StaticResource FilterInventoryGridStyle}" ContainerData="{Binding Inventory}">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_State_MouseOverInventory"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeave">
                    <ls:LSPlaySound Sound="UI_State_MouseOverInventory_Off"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="WidgetClosing">
                    <b:InvokeCommandAction Command="{Binding DataContext.ClearInventoryNewFlags, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }"/>
                </b:EventTrigger>

                <b:EventTrigger EventName="WidgetClosing" >
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding IsVisible, ElementName=CharacterPanelHolder}" Operator="Equal" RightOperand="True"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <!-- Tutorial UI Event - Inventory Closed-->
                    <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="3b433da9-3bd4-4273-8e7f-f85e03ee1601"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </ls:LSGrid>
    </ItemsPanelTemplate>

    <ItemsPanelTemplate x:Key="InventoryGridTemplate">
        <ls:LSGrid x:Name="InvGrid" Style="{StaticResource InventoryGridStyle}" ContainerData="{Binding Inventory}">
            <ls:LSGrid.Background>
                <ImageBrush x:Name="BackgroundBrush" ImageSource="{StaticResource InventorySlotsTileImage}" TileMode="Tile" Stretch="Fill" ViewportUnits="Absolute" Viewport="{DynamicResource ScaledTileViewport}" AlignmentX="Left" AlignmentY="Top"/>
            </ls:LSGrid.Background>
            <b:Interaction.Behaviors>
                <ls:DropOnInventoryGridBehavior DropCommand="{Binding DataContext.DropOnInventorySlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </b:Interaction.Behaviors>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="PreviewDrop">
                    <ls:LSPlaySound Sound="UI_State_MouseOverInventory"/>
                    <b:InvokeCommandAction Command="{Binding DataContext.ClearFilterCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    <b:ChangePropertyAction TargetName="ChangePartyContextButton" PropertyName="IsChecked" Value="False"/>
                    <b:ChangePropertyAction TargetName="FilteringContainerHolder" PropertyName="CurrentFilter" Value="{x:Null}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_State_MouseOverInventory"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeave">
                    <ls:LSPlaySound Sound="UI_State_MouseOverInventory_Off"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="WidgetClosing">
                    <b:InvokeCommandAction Command="{Binding DataContext.ClearInventoryNewFlags, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }"/>
                </b:EventTrigger>

                <b:EventTrigger EventName="WidgetClosing" >
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding IsVisible, ElementName=CharacterPanelHolder}" Operator="Equal" RightOperand="True"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <!-- Tutorial UI Event - Inventory Closed-->
                    <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="3b433da9-3bd4-4273-8e7f-f85e03ee1601"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </ls:LSGrid>
    </ItemsPanelTemplate>

      <!--INVENTORY TEMPLATE WITH FILTERS-->
    <ControlTemplate x:Key="CharacterInventoryTemplate" TargetType="Control">
        <ControlTemplate.Resources>
            <BitmapImage  x:Key="InvBGImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/overlay_partyInv_bg.png" />
            <BitmapImage  x:Key="EQInvBGImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/overlay_EQInv_bg.png" />
            <BitmapImage  x:Key="PartyInvImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/overlay_partyInv.png" />
        </ControlTemplate.Resources>
        <Grid x:Name="CharacterPanelHolder" Tag="{Binding IsContentEditable}">
            <b:Interaction.Triggers>
                <b:DataTrigger Binding="{Binding IsVisible, ElementName=CharacterPanelHolder}" Value="True">
                    <!-- Tutorial UI Event - Inventory Opened-->
                    <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="e2d0dd0a-5958-454f-9ec3-0bfba58c7153"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding IsVisible, ElementName=CharacterPanelHolder}" Value="False">
                    <!-- Tutorial UI Event - Inventory Closed-->
                    <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="3b433da9-3bd4-4273-8e7f-f85e03ee1601"/>
                </b:DataTrigger>

            </b:Interaction.Triggers>


            <Grid x:Name="InventoryColumnHolder" Tag="JustCreated">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <b:Interaction.Triggers>
                    <b:DataTrigger Binding="{Binding IsKeyboardFocusWithin, ElementName=InventoryHolder}" Value="False">
                        <b:ChangePropertyAction TargetName="InventoryHolder" PropertyName="SelectedIndex" Value="-1" />
                    </b:DataTrigger>
                    <b:EventTrigger EventName="MouseRightButtonUp" SourceObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=IsMouseOver, ElementName=InventoryHolder}" Operator="Equal" RightOperand="False"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ChangePropertyAction TargetName="InventoryHolder" PropertyName="SelectedIndex" Value="-1" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <ls:LSInputBinding BoundEvent="ActionCancel" EatInput="False" IsEnabled="True" PlayerId="{Binding PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="LSInputBindingPressed">
                            <b:ChangePropertyAction TargetName="InventoryHolder" PropertyName="SelectedIndex" Value="-1" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSInputBinding>

                <Control Grid.Row="1" Grid.RowSpan="2" x:Name="SortListHolder" HorizontalAlignment="Left" VerticalAlignment="Top" Template="{StaticResource SortListTemplate}" DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="{Binding IsChecked, ElementName=SortToggleButton, Converter={StaticResource BoolToVisibleConverter}}" Panel.ZIndex="3"/>

                <!-- Inventory -->
                <ListBox Grid.Row="1" x:Name="InventoryHolder" ItemsSource="{Binding GeneratedItemsList, ElementName=FilteringContainerHolder}" ItemsPanel="{StaticResource InventoryGridTemplate}" SelectionMode="Extended" ls:MultiSelect.IsEnabled="False" ItemTemplate="{StaticResource Template.InventorySlot}" ls:AttachedProperties.InheritedNumber="{Binding ActualWidth, ElementName=InventoryColumnHolder, Converter={StaticResource AddConverter}, ConverterParameter=-28}">

                    <b:Interaction.Behaviors>
                        <ls:DragGenericBehavior StartDragCommand="{Binding DataContext.DragInventoryCommand , RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    </b:Interaction.Behaviors>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource BaseInvContainerItemStyle}">
                            <Setter Property="Template" >
                                <Setter.Value>
                                    <ControlTemplate TargetType="ListBoxItem">
                                        <ls:LSEntityObject x:Name="invCellBase" Context="Inventory" DataContext="{Binding Object}" EntityRef="{Binding EntityHandle}" Background="{TemplateBinding Background}"
                                                               ToolTipService.Placement="Right" Tag="{Binding DataContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                               ls:ContextMenuService.GenerateEnabled="False" ls:MoveFocus.Focusable="True" Focusable="True">
                                            <b:Interaction.Behaviors>
                                                <ls:ContextMenuFillBehavior Context="Inventory" Player="{Binding DataContext.CurrentPlayer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" TargetObject="{Binding .}" Source="{Binding SelectedItems,ElementName=InventoryHolder}" Command="{Binding DataContext.ContextActionPressed, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                            </b:Interaction.Behaviors>
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="MouseEnter">
                                                    <b:InvokeCommandAction IsEnabled="{Binding IsNew}" Command="{Binding DataContext.ClearItemNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="MouseLeftButtonDown">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Object, Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="ls.Character"/>
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <ls:LSPlaySound Sound="UI_HUD_Inventory_PickupCharacter"/>
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="DragEnter">
                                                    <b:InvokeCommandAction Command="{Binding DataContext.UpdateDragErrorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=DataContext.Object, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="DragLeave">
                                                    <b:InvokeCommandAction Command="{Binding DataContext.UpdateDragErrorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{x:Null}"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                            <ls:LSEntityObject.ToolTip>
                                                <ls:LSTooltip Content="{Binding Path=DataContext.Object, RelativeSource={RelativeSource Mode=TemplatedParent}}" ls:TooltipExtender.Owner="{Binding Tag.CurrentPlayer.SelectedCharacter, ElementName=invCellBase}"/>
                                            </ls:LSEntityObject.ToolTip>
                                            <ContentPresenter IsHitTestVisible="False"/>
                                            <TextBlock x:Name="EquipmentLetter" Text="{Binding Source='h9079b9dcgb3b5g4f5cg9ca0gccadfa842d28',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource EquippedTextStyle}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="4,0,0,-4"/>
                                            <Control Style="{StaticResource NewInventoryCellItemStyle}" />
                                            <Image x:Name="SelectedImg" Source="{StaticResource InvSlot_Selector}" Visibility="Hidden" Stretch="Fill" IsHitTestVisible="False"/>
                                            <Rectangle x:Name="LockForeground" Fill="{StaticResource LS_DisabledPanelColor}" Visibility="Collapsed"/>
                                        </ls:LSEntityObject>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible"/>
                                                <Setter TargetName="SelectedImg" Property="Opacity" Value="0.8"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible"/>
                                                <Setter TargetName="SelectedImg" Property="Opacity" Value="1"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding Object.Equipped}" Value="NotEquipped">
                                                <Setter TargetName="EquipmentLetter" Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Object, Converter={StaticResource TypeConverter}}" Value="ls.Character">
                                                <Setter TargetName="EquipmentLetter" Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Tag, ElementName=CharacterPanelHolder}" Value="False">
                                                <Setter TargetName="LockForeground" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Object.IsGroupingBlocked}" Value="True">
                                                <Setter TargetName="LockForeground" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>

                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>

                    <ListBox.Template>
                        <ControlTemplate TargetType="ListBox">
                            <Grid x:Name="TemplateRoot" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <Border x:Name="InventoryTint" Background="{StaticResource InventoryBGShade}" Margin="-6,-4,20,-6" BorderBrush="Transparent" BorderThickness="2"/>
                                <ScrollViewer VerticalScrollBarVisibility="Visible" Template="{StaticResource NoForcedStyleScrollViewerTemplate}" HorizontalScrollBarVisibility="Disabled" Padding="0,0,-6,0" Margin="-8,0,8,0">
                                    <b:Interaction.Behaviors>
                                        <ls:DragScrollingBehavior/>
                                    </b:Interaction.Behaviors>
                                    <ItemsPresenter x:Name="itemsContainer"/>
                                </ScrollViewer>
                                <Grid x:Name="NoItemsFoundOverlay" Visibility="Collapsed">
                                    <Rectangle Fill="{StaticResource LS_DisabledPanelColor}"/>
                                    <Control Template="{StaticResource NoResultsFoundTemplate}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,40,0,0"/>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CurrentFilter, ElementName=FilteringContainerHolder, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                                        <Condition Binding="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" Value="0"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="NoItemsFoundOverlay" Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>

                                <!--Hide the no items found overlay if we're attempting to drag-->

                                <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects.Count,Converter={StaticResource GreaterThanConverter}, ConverterParameter='0', RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                    <Setter TargetName="NoItemsFoundOverlay" Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding CurrentFilter, ElementName=FilteringContainerHolder, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                                    <Setter TargetName="InventoryTint" Property="Background" Value="{StaticResource InventoryBGShadeFilter}"/>
                                    <Setter TargetName="InventoryTint" Property="BorderBrush" Value="{StaticResource InventoryBGShadeFilterBorder}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ListBox.Template>
                </ListBox>

                <!-- Filter -->
                <StackPanel x:Name="FiltersControl" Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Left" Height="88">
                    <b:Interaction.Behaviors>
                        <ls:InventoriesMergerBehavior x:Name="InventoriesMerger" Inventories="{Binding Inventories}"/>
                        <ls:InventoriesMergerBehavior x:Name="PartyInventoriesMerger" Inventories="{Binding DataContext.CurrentPlayer.PartyInventory, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    </b:Interaction.Behaviors>

                    <ls:LSToggleButton x:Name="SortToggleButton" Template="{StaticResource SortToggleButtonTemplate}" VerticalAlignment="Center"/>

                    <ls:FilteringContainer x:Name="FilteringContainerHolder" Margin="4,0,4,0" FilterPredicate="{Binding InventoryPredicate}" Template="{StaticResource FilterHolderTemplate}"
                                           CurrentFilter="{Binding DataContext.CurrentPlayer.UIData.GlobalSelectedFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Mode=OneWay}"
                                           ItemsList="{Binding InventoriesSlots, ElementName=InventoriesMerger}" DefaultViewItemsList="{Binding Inventory.Slots}" MaxDisplayedFilters="7"
                                           SortComparer="{Binding DataContext.Data.InventoryIndexSortComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                        <ls:FilteringContainer.EnumFiltersList>
                            <ls:EnumFilterItem EnumId="gui::EPopularFilters" Label="h977af483ga6d9g4334g9ee0g3b85b94c67db" AlwaysVisible="True" />
                            <ls:EnumFilterItem EnumId="eoc::EProficiencyGroup" Label="ha4c5f0cfg93ebg47ecg8eecg6524ad70aee0" />
                        </ls:FilteringContainer.EnumFiltersList>

                        <b:Interaction.Triggers>

                            <b:DataTrigger Binding="{Binding IsKeyboardFocusWithin, ElementName=FilteringContainerHolder}" Value="True">
                                <b:InvokeCommandAction Command="{Binding DataContext.HideAvailableEquipmentCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:DataTrigger>

                            <b:EventTrigger EventName="FilterCleared">
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearFilterCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                <b:ChangePropertyAction TargetName="ChangePartyContextButton" PropertyName="IsChecked" Value="False"/>
                            </b:EventTrigger>

                            <b:PropertyChangedTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.GlobalSelectedFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                <b:ChangePropertyAction TargetName="FilteringContainerHolder" PropertyName="CurrentFilter" Value="{Binding DataContext.CurrentPlayer.UIData.GlobalSelectedFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Mode=OneWay}"/>
                            </b:PropertyChangedTrigger>

                        </b:Interaction.Triggers>
                    </ls:FilteringContainer>

                    <!--Infotip-->
                    <Control Grid.Row="0" Template="{StaticResource CharacterSheetInfotipTemplate}" VerticalAlignment="Center" Margin="-12,0,12,0"  HorizontalAlignment="Right" ToolTipService.Placement="Right">
                        <Control.ToolTip>
                            <ls:LSTooltip ToolTipService.Placement="Top">
                                <StackPanel>
                                    <TextBlock Text="{Binding Source='h9dc90f1cgd81ag487cgad09g6cdba91a98ab',Converter={StaticResource TranslatedStringConverter}}"/>

                                    <!--multiselct-->
                                    <TextBlock Foreground="{StaticResource LS_accent25TxtColor}" FontSize="{StaticResource MediumFontSize}">
                                        <Run Text="[CTRL + LMB]"/>
                                        <Run Text="{Binding Source='h1ca1b236g5282g4349gabc4g96639808464f', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </TextBlock>

                                    <!--select range-->
                                    <TextBlock Foreground="{StaticResource LS_accent25TxtColor}" FontSize="{StaticResource MediumFontSize}">
                                        <Run Text="[SHIFT + LMB]"/>
                                        <Run Text="{Binding Source='hf5138081g15f4g476ega739gb5c7e4a7c7eb', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </TextBlock>

                                    <!--split stack-->
                                    <TextBlock Foreground="{StaticResource LS_accent25TxtColor}" FontSize="{StaticResource MediumFontSize}">
                                        <Run Text="[SHIFT + Drop]"/>
                                        <Run Text="{Binding Source='h6a5ad02dg7561g4713g81dcga9d7e9949b3f', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </TextBlock>
                                    
                                   
                                </StackPanel>
                            </ls:LSTooltip>
                        </Control.ToolTip>
                    </Control>

                </StackPanel>

            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedItems.Count,ElementName=InventoryHolder,Converter={StaticResource GreaterThanConverter},ConverterParameter=1}" Value="True">
                <Setter TargetName="InventoryHolder" Property="ls:MultiSelect.IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Name, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="PartyPanel" >
                <Setter TargetName="FiltersControl" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--===== POP OUT INVENTORY TEMPLATE =====-->

    <ControlTemplate x:Key="PopOutInventoryTemplate" TargetType="Control">
        <ls:LSNineSliceImage Name="EquipmentInvHolder" Style="{StaticResource Generic9SliceBG}" Visibility="{Binding Equipment.ShowAvailableEquipment, Converter={StaticResource BoolToVisibleConverter}}" AllowDrop="False">
            <ls:LSNineSliceImage.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </ls:LSNineSliceImage.RenderTransform>

            <b:Interaction.Behaviors>
                <ls:LSMouseDragElementBehavior x:Name="DragBehavior" PositionBounds="{Binding WorldBounds}"/>
            </b:Interaction.Behaviors>


            <Grid x:Name="CharacterPanelHolder" Tag="{Binding IsContentEditable}" MaxWidth="450">
                <b:Interaction.Triggers>

                    <!-- Selecting the slot while it's not active = enabling all the filters -->

                    <b:PropertyChangedTrigger Binding="{Binding ActiveEquipmentSlot}" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding ActiveEquipmentSlot}" Operator="NotEqual" RightOperand="{x:Null}"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ChangePropertyAction TargetName="FilteringContainerHolder" PropertyName="CurrentFilter" Value="{Binding ActiveEquipmentSlot.FilterType}"/>
                        <b:ChangePropertyAction TargetName="ChangePartyContextButton" PropertyName="IsChecked" Value="True"/>
                    </b:PropertyChangedTrigger>

                    <!-- Selecting the slot while it's active = no more filtering -->

                    <b:DataTrigger Binding="{Binding ActiveEquipmentSlot}" Value="{x:Null}">
                        <b:ChangePropertyAction TargetName="FilteringContainerHolder" PropertyName="CurrentFilter" Value="{x:Null}"/>
                        <b:ChangePropertyAction TargetName="ChangePartyContextButton" PropertyName="IsChecked" Value="False"/>
                    </b:DataTrigger>

                </b:Interaction.Triggers>


                <Grid x:Name="FilterHolder" Width="388" HorizontalAlignment="Stretch" Tag="JustCreated">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition MaxHeight="488"/>
                    </Grid.RowDefinitions>
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding IsKeyboardFocusWithin, ElementName=InventoryHolder}" Value="False">
                            <b:ChangePropertyAction TargetName="InventoryHolder" PropertyName="SelectedIndex" Value="-1" />
                        </b:DataTrigger>
                        <b:EventTrigger EventName="MouseRightButtonUp" SourceObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Path=IsMouseOver, ElementName=InventoryHolder}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ChangePropertyAction TargetName="InventoryHolder" PropertyName="SelectedIndex" Value="-1" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <DockPanel>
                        <ls:LSButton DockPanel.Dock="Right" Style="{StaticResource SmallCloseButton}" HorizontalAlignment="Right" VerticalAlignment="Center" Command="{Binding DataContext.HideAvailableEquipmentCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Equipment}" />
                        <Border DockPanel.Dock="Left" x:Name="Dragbox" Grid.Row="0" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <TextBlock x:Name="EquipmentFilterHeader" Text="{Binding CurrentFilter.Name, ElementName=FilteringContainerHolder}" Margin="12,0,0,0" Style="{StaticResource DetailedListText}" VerticalAlignment="Center" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis"/>
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseEnter">
                                    <b:InvokeCommandAction Command="{Binding DataContext.SetCursorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="Resize"/>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseLeave">
                                    <b:InvokeCommandAction Command="{Binding DataContext.SetCursorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter=""/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </Border>
                        
                    </DockPanel>


                    <!--  POPOUT INVENTORY TEMPLATE  -->

                    <ListBox x:Name="PopOutInventoryHolder" Grid.Row="1" VerticalAlignment="Top" HorizontalAlignment="Stretch"  ItemsSource="{Binding GeneratedItemsList, ElementName=FilteringContainerHolder}" ItemsPanel="{StaticResource FilterInventoryGridTemplate}"  SelectionMode="Extended" ls:MultiSelect.IsEnabled="False" ItemTemplate="{StaticResource Template.InventorySlot}" ItemContainerStyle="{StaticResource SingleClickBaseInvContainerItemStyle}" AllowDrop="False" ls:AttachedProperties.InheritedNumber="{Binding ActualWidth, ElementName=CharacterPanelHolder}">

                        <b:Interaction.Behaviors>
                            <ls:DragGenericBehavior StartDragCommand="{Binding DataContext.DragInventoryCommand , RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:Interaction.Behaviors>
                        <ListBox.Template>
                            <ControlTemplate TargetType="ListBox">

                                <Grid x:Name="TemplateRoot" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" AllowDrop="False">
                                    <ScrollViewer VerticalScrollBarVisibility="Visible" Template="{StaticResource NoForcedStyleScrollViewerTemplate}" HorizontalScrollBarVisibility="Disabled" Padding="0" AllowDrop="False">
                                        <b:Interaction.Behaviors>
                                            <ls:DragScrollingBehavior/>
                                        </b:Interaction.Behaviors>
                                        <ItemsPresenter x:Name="itemsContainer" Margin="0,0,0,-64" />
                                    </ScrollViewer>
                                    <Grid x:Name="NoItemsFoundOverlay" Visibility="Collapsed">
                                        <Rectangle Fill="{StaticResource LS_DisabledPanelColor}"/>
                                        <Control Template="{StaticResource NoResultsFoundTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding CurrentFilter, ElementName=FilteringContainerHolder, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                                            <Condition Binding="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" Value="0"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="NoItemsFoundOverlay" Property="Visibility" Value="Visible"/>
                                    </MultiDataTrigger>
                                    <!-- Hide the no items found overlay if we're attempting to drag-->
                                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.DragData.DraggingGameObjects.Count,Converter={StaticResource GreaterThanConverter}, ConverterParameter='0', RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                        <Setter TargetName="NoItemsFoundOverlay" Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ListBox.Template>
                    </ListBox>

                    <!-- Filter -->
                    <StackPanel x:Name="FiltersControl" Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center" Grid.RowSpan="3">
                        <b:Interaction.Behaviors>
                            <ls:InventoriesMergerBehavior x:Name="InventoriesMerger" Inventories="{Binding Inventories}"/>
                            <ls:InventoriesMergerBehavior x:Name="PartyInventoriesMerger" Inventories="{Binding DataContext.CurrentPlayer.PartyInventory, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:Interaction.Behaviors>

                        <ls:LSToggleButton x:Name="SortToggleButton" Template="{StaticResource SortToggleButtonTemplate}" VerticalAlignment="Top" HorizontalAlignment="Left" Visibility="Collapsed"/>
                        <ls:LSToggleButton x:Name="ChangePartyContextButton" Visibility="Collapsed"/>

                        <ls:FilteringContainer x:Name="FilteringContainerHolder" Margin="8,0,0,0" FilterPredicate="{Binding InventoryPredicate}" Template="{StaticResource FilterHolderTemplate}"
                                           CurrentFilter="{Binding DataContext.CurrentPlayer.UIData.GlobalSelectedFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Mode=OneWay}"
                                           ItemsList="{Binding InventoriesSlots, ElementName=InventoriesMerger}" DefaultViewItemsList="{Binding Inventory.Slots}" MaxDisplayedFilters="7"
                                           SortComparer="{Binding DataContext.Data.InventoryIndexSortComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Visibility="Collapsed">
                            <ls:FilteringContainer.EnumFiltersList>
                                <ls:EnumFilterItem EnumId="gui::EPopularFilters" Label="h977af483ga6d9g4334g9ee0g3b85b94c67db" AlwaysVisible="True" />
                                <ls:EnumFilterItem EnumId="eoc::EProficiencyGroup" Label="ha4c5f0cfg93ebg47ecg8eecg6524ad70aee0" />
                            </ls:FilteringContainer.EnumFiltersList>

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="FilterCleared">
                                    <b:InvokeCommandAction Command="{Binding DataContext.ClearFilterCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                    <b:ChangePropertyAction TargetName="ChangePartyContextButton" PropertyName="IsChecked" Value="False"/>
                                </b:EventTrigger>

                                <b:PropertyChangedTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.GlobalSelectedFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <b:ChangePropertyAction TargetName="FilteringContainerHolder" PropertyName="CurrentFilter" Value="{Binding DataContext.CurrentPlayer.UIData.GlobalSelectedFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Mode=OneWay}"/>
                                </b:PropertyChangedTrigger>
                            </b:Interaction.Triggers>
                        </ls:FilteringContainer>
                    </StackPanel>
                </Grid>
            </Grid>
        </ls:LSNineSliceImage>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CurrentFilter.Enum, ElementName=FilteringContainerHolder}" Value="MAX">
                <Setter TargetName="EquipmentFilterHeader" Property="Text" Value="{Binding Source='haedaccc7gffa0g4a2fg99bcg6703ffbb8ad7', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            
            <DataTrigger Binding="{Binding IsChecked, ElementName=ChangePartyContextButton}" Value="True">
                <Setter TargetName="FilteringContainerHolder" Property="ItemsList" Value="{Binding InventoriesSlots, ElementName=PartyInventoriesMerger}"/>
                <Setter TargetName="FilteringContainerHolder" Property="DefaultViewItemsList" Value="{Binding DataContext.CurrentPlayer.PartyInventory.Slots, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </DataTrigger>

            <Trigger SourceName="EquipmentInvHolder"  Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard FillBehavior="Stop">
                                <DoubleAnimation
                                            Storyboard.TargetName="EquipmentInvHolder"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"                                        
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.26">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation
                                            Storyboard.TargetName="EquipmentInvHolder"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"                                        
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.26">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =====  EQUIPMENT TEMPLATE ===== -->

    <ControlTemplate x:Key="CharacterEquipmentTemplate" TargetType="Control">
        <ControlTemplate.Resources>
            <BitmapImage  x:Key="EquimentSlotsImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EQSlots_default.png" />
            <BitmapImage  x:Key="EquimentACImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EQSlots_AC.png" />
            <BitmapImage  x:Key="EquimentTextBGImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EQSlots_txt_bg.png" />
            <BitmapImage  x:Key="EquimentTextBG_H_Img" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/EQSlots_txt_bg_h.png" />
        </ControlTemplate.Resources>

        <Grid x:Name="CharacterPanelHolder" Tag="{Binding IsContentEditable}">
            <b:Interaction.Triggers>

                <!--Selecting the slot while it's not active = enabling all the filters-->
                <b:PropertyChangedTrigger Binding="{Binding ActiveEquipmentSlot}" >
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding ActiveEquipmentSlot}" Operator="NotEqual" RightOperand="{x:Null}"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ChangePropertyAction TargetName="FilteringContainerHolder" PropertyName="CurrentFilter" Value="{Binding ActiveEquipmentSlot.FilterType}"/>
                    <b:ChangePropertyAction TargetName="ChangePartyContextButton" PropertyName="IsChecked" Value="True"/>
                    <b:InvokeCommandAction Command="{Binding DataContext.SelectCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>

                </b:PropertyChangedTrigger>

                <!--Selecting the slot while it's active = no more filtering-->
                <b:DataTrigger Binding="{Binding ActiveEquipmentSlot}" Value="{x:Null}">
                    <b:ChangePropertyAction TargetName="FilteringContainerHolder" PropertyName="CurrentFilter" Value="{x:Null}"/>
                    <b:ChangePropertyAction TargetName="ChangePartyContextButton" PropertyName="IsChecked" Value="False"/>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding IsVisible, ElementName=CharacterPanelHolder}" Value="True">
                    <!--Tutorial UI Event - Equipment Opened-->
                    <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="56affdac-faef-448a-94fb-55182779b482"/>
                </b:DataTrigger>

            </b:Interaction.Triggers>
            <Grid x:Name="EquipmentHolder" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Grid.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Grid.RenderTransform>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>


                <!-- EQUIPMENT SLOTS -->
                <Grid x:Name="EquipmentSlots" Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.Resources>
                        <Thickness x:Key="EquipMargin">0,72,0,0</Thickness>
                    </Grid.Resources>

                    <DockPanel Name="EquipmentRight" Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Margin="{StaticResource EquipMargin}">

                        <Control DockPanel.Dock="Bottom" Template="{StaticResource MuscialEQTemplate}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.MusicalInstrument}"/>
                        <StackPanel DockPanel.Dock="Top">
                            <!--VANITY-->
                            <Grid HorizontalAlignment="Left">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <Border x:Name="VanityToggleHighlight" Grid.RowSpan="2" BorderBrush="{StaticResource LS_tempHPColor}" BorderThickness="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-3" Background="{StaticResource InventoryBGShade}" Visibility="Collapsed">
                                    <Border.Effect>
                                        <DropShadowEffect BlurRadius="20" ShadowDepth="0" Color="{StaticResource tempHPColor}" />
                                    </Border.Effect>
                                </Border>

                                <ls:LSButton Grid.Row="0" Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.VanityBody}"/>
                                <ls:LSButton Grid.Row="1" Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.VanityBoots}"/>
                                <ls:LSButton Grid.RowSpan="2" VerticalAlignment="Top" Command="{Binding DataContext.ToggleArmorSetVisibility, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}" Template="{StaticResource VanityButtonTemplate}" HorizontalAlignment="Right" Margin="0,-40,-8,0">
                                    <ls:LSButton.ToolTip>
                                        <ls:LSTooltip Content="{Binding Source='had94b224g2d0eg43a9g96a7g27311c05ef99',Converter={StaticResource TranslatedStringConverter}}" x:Name="TooltipContent"/>
                                    </ls:LSButton.ToolTip>
                                </ls:LSButton>
                            </Grid>
                            <ls:LSButton Margin="0,24" Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Underwear}"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Amulet}"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Ring}"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Ring2}"/>
                            <!-- New RING SLOTS -->
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Ring3}"/>
                        </StackPanel>
                    </DockPanel>

                    <DockPanel Name="EquipmentLeft" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Left" Margin="{StaticResource EquipMargin}">
                        <!--LIGHTSOURCE-->
                        <ls:LSButton DockPanel.Dock="Bottom" VerticalAlignment="Bottom" Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.LightSource}" ToolTipService.Placement="Left"/>

                        <StackPanel DockPanel.Dock="Top">

                            <Control Template="{StaticResource HelmetEQTemplate}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Helmet}" ToolTipService.Placement="Left"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Cloak}" ToolTipService.Placement="Left"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Breast}" ToolTipService.Placement="Left"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Gloves}" ToolTipService.Placement="Left"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.Boots}" ToolTipService.Placement="Left"/>
                        </StackPanel>

                    </DockPanel>

                    <!--Melee Weapons-->
                    <StackPanel Grid.Column="0" Grid.Row="1" VerticalAlignment="Bottom">
                        <TextBlock Style="{StaticResource DetailedListText}" Text="{Binding Source='hde2dafecgf6f5g489ag9baeg23d0610570f5',Converter={StaticResource TranslatedStringConverter}}" TextAlignment="Center" IsHitTestVisible="False" TextWrapping="Wrap" noesis:Text.StrokeThickness="4" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}">
                            <TextBlock.Effect>
                                <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                            </TextBlock.Effect>
                        </TextBlock>
                        <StackPanel Orientation="Horizontal">
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.MeleeMainHand}" ToolTipService.Placement="Left"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.MeleeOffHand}" ToolTipService.Placement="Left"/>
                        </StackPanel>
                    </StackPanel>


                    <!--Ranged Weapons-->
                    <StackPanel Grid.Column="2" Grid.Row="1" VerticalAlignment="Bottom">
                        <TextBlock Style="{StaticResource DetailedListText}" Text="{Binding Source='h52df2583g5fc1g4182g9511g36238e4e0c19',Converter={StaticResource TranslatedStringConverter}}" TextAlignment="Center" IsHitTestVisible="False" TextWrapping="Wrap" noesis:Text.StrokeThickness="4" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}">
                            <TextBlock.Effect>
                                <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                            </TextBlock.Effect>
                        </TextBlock>
                        <StackPanel Orientation="Horizontal">
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.RangedMainHand}"/>
                            <ls:LSButton Style="{StaticResource newEquipmentSlotStyle}" Panel.ZIndex="{Binding IsSelecting, Converter={StaticResource BoolToIntConverter}, ConverterParameter=20}" DataContext="{Binding Equipment.RangedOffHand}"/>
                        </StackPanel>
                    </StackPanel>

                    <!--ArmorClass-->
                    <Control Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Template="{StaticResource ACHolder}" VerticalAlignment="Bottom" HorizontalAlignment="Center"/>
                </Grid>


                <Control Grid.Row="2" Template="{StaticResource WeaponAttackBonusTemplate}" VerticalAlignment="Bottom" Margin="0,8,0,20"/>

            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ArmorSetVisibility}" Value="Vanity">
                <Setter TargetName="VanityToggleHighlight" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Used in LevelUp -->
    <ControlTemplate x:Key="ExtendedPassivesHolderTemplate" TargetType="Control">
        <ScrollViewer x:Name="Scroll" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden" Template="{StaticResource ScrollViewerTemplate}" Background="Transparent" VerticalAlignment="Top" HorizontalAlignment="Left">
            <Grid>
                <Grid.Resources>
                    <Style TargetType="ItemsControl">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical"/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="ItemTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <Grid Margin="0,0,0,20">
                                        <Image x:Name="BackgroundFeature" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/features_bg_d.png" Stretch="None" VerticalAlignment="Bottom" Margin="0,0,0,0"/>

                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,0,0,16">
                                            <Grid VerticalAlignment="Top">
                                                <Image x:Name="SlotHolder" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/features_slot_d.png" Stretch="None"/>
                                                <Ellipse Width="60" Height="60" Fill="{Binding Icon}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Grid>

                                            <StackPanel x:Name="ContentContainer" Orientation="Vertical" MaxWidth="600" Margin="8,0,0,0">
                                                <TextBlock x:Name="Name" Text="{Binding Name}" FontSize="{DynamicResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_tint100}" TextWrapping="Wrap" VerticalAlignment="Top"/>
                                                <TextBlock TextWrapping="Wrap" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{DynamicResource ScaledDefaultFontSize}" VerticalAlignment="Top" HorizontalAlignment="Left">
                                                    <b:Interaction.Behaviors>
                                                        <ls:CtxTransStringRunGeneratorBehavior Source="{Binding Description}" ParamRunStyle="{StaticResource TooltipUnitParamRun}"/>
                                                    </b:Interaction.Behaviors>
                                                </TextBlock>
                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>
                                            </StackPanel>
                                        </StackPanel>
                                    </Grid>

                                    <DataTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="SlotHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/features_slot_h.png"/>
                                            <Setter TargetName="BackgroundFeature" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/features_bg_h.png"/>
                                        </Trigger>

                                        <DataTrigger Binding="{Binding ., Converter={StaticResource TypeConverter}}" Value="ls.VMPassiveFeatureBoost">
                                            <Setter TargetName="Name" Property="Text" Value="{Binding NameCTS.Text}"/>
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterLevelUp">
                                            <Setter TargetName="ContentContainer" Property="MaxWidth" Value="550"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Grid.Resources>

                <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top">
                    <ItemsControl x:Name="FeaturesList" ItemsSource="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems, ElementName=PassivesHolder}" Visibility="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems.Count, ElementName=PassivesHolder, Converter={StaticResource CountToVisibilityConverter}}"/>
                    <ItemsControl x:Name="ClassFeaturesList" ItemsSource="{Binding Path=(b:Interaction.Behaviors)[1].FilteredItems, ElementName=PassivesHolder}" Visibility="{Binding Path=(b:Interaction.Behaviors)[1].FilteredItems.Count, ElementName=PassivesHolder, Converter={StaticResource CountToVisibilityConverter}}"/>
                    <ItemsControl x:Name="SubClassFeaturesList" ItemsSource="{Binding Path=(b:Interaction.Behaviors)[2].FilteredItems, ElementName=PassivesHolder}" Visibility="{Binding Path=(b:Interaction.Behaviors)[2].FilteredItems.Count, ElementName=PassivesHolder, Converter={StaticResource CountToVisibilityConverter}}"/>
                </StackPanel>

                <TextBlock TextWrapping="Wrap" VerticalAlignment="Top" HorizontalAlignment="Left" ls:TextBlockFormatter.SourceText="{Binding Source='hf235de4fg6999g4be2gaaffgb79ffac98628',Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Visibility, ElementName=FeaturesList, Converter={StaticResource InvertVisibilityConverter}}"/>
            </Grid>
        </ScrollViewer>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterLevelUp">
                <Setter TargetName="Scroll" Property="Padding" Value="20,0,-100,0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>    

</ResourceDictionary>